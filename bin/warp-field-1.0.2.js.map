{"version":3,"sources":["webpack://WarpField/webpack/bootstrap","webpack://WarpField/./src/field-of-view.ts","webpack://WarpField/./src/fov-util.ts","webpack://WarpField/./src/geom/direction-flags.ts","webpack://WarpField/./src/geom/direction.ts","webpack://WarpField/./src/geom/index.ts","webpack://WarpField/./src/geom/mask.ts","webpack://WarpField/./src/geom/offset.ts","webpack://WarpField/./src/geom/rectangle.ts","webpack://WarpField/./src/geom/size.ts","webpack://WarpField/./src/index.ts","webpack://WarpField/./src/warp-rect.ts"],"names":[],"mappings":"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","file":"warp-field-1.0.2.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bin/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import * as geom from './geom';\r\nimport {\r\n    TileFlag,\r\n    Warp,\r\n    Wedge,\r\n    WALL_EPSILON,\r\n    BODY_EPSILON,\r\n    WARP_EPSILON,\r\n    cutWedges,\r\n    warpWedges,\r\n    whichWedge,\r\n} from './fov-util';\r\nimport {WarpRect} from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\n/**\r\n * We avoid heap allocations during the core part of the algorithm by using this\r\n * preallocated offset object.\r\n */\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\n/**\r\n * The FieldOFViewMap represents the map over which the field of view will be\r\n * computed.  It starts out empty.  You can add walls and bodies to it, and then\r\n * use getFieldOfView() to compute the field of view from a given point.\r\n */\r\nexport class FieldOfViewMap {\r\n    readonly id: string;\r\n    private readonly _size = new geom.Size();\r\n    private readonly _tileFlags: number[];\r\n\r\n    private readonly _warps = new Array<Warp>();\r\n    private readonly _tileWarpIds: number[][];\r\n\r\n    constructor(id: string, width: number, height: number, addEdgeWalls = false) {\r\n        this.id = id;\r\n        this._size.set(width, height);\r\n        this._tileFlags = new Array<number>(this._size.area).fill(0);\r\n        if (addEdgeWalls) {\r\n            for (let y = 0; y < this._size.height; y ++) {\r\n                this._addFlag(LOCAL_OFF.set(0, y), TileFlag.WALL_WEST);\r\n                this._addFlag(LOCAL_OFF.set(this._size.width - 1, y), TileFlag.WALL_EAST);\r\n            }\r\n            for (let x = 0; x < this._size.width; x ++) {\r\n                this._addFlag(LOCAL_OFF.set(x, 0), TileFlag.WALL_NORTH);\r\n                this._addFlag(LOCAL_OFF.set(x, this._size.height - 1), TileFlag.WALL_SOUTH);\r\n            }\r\n        }\r\n        this._tileWarpIds = geom.DIRECTIONS.map(() => new Array<number>(this._size.area).fill(-1));\r\n    }\r\n\r\n    private _addFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        this._tileFlags[index] |= flag;\r\n    }\r\n\r\n    private _removeFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        this._tileFlags[index] &= ~flag;\r\n    }\r\n\r\n    private _getFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        return (this._tileFlags[index] & flag) !== 0;\r\n    }\r\n\r\n    private _findOrMakeWarp(map: FieldOfViewMap, offset: geom.OffsetLike) {\r\n        for (let fid = 0; fid < this._warps.length; fid ++) {\r\n            const fwarp = this._warps[fid];\r\n            if (fwarp.map === map && fwarp.offset.equals(offset)) {\r\n                return fid;\r\n            }\r\n        }\r\n        const warp = {\r\n            map,\r\n            offset: new geom.Offset().copyFrom(offset),\r\n        };\r\n        const id = this._warps.length;\r\n        this._warps.push(warp);\r\n        return id;\r\n    }\r\n\r\n    private _addWarp(off: geom.OffsetLike, dir: geom.Direction, warpId: number) {\r\n        const index = this._size.index(off);\r\n        this._tileWarpIds[dir][index] = warpId;\r\n    }\r\n\r\n    private _removeWarp(off: geom.OffsetLike, dir: geom.Direction) {\r\n        const index = this._size.index(off);\r\n        delete this._tileWarpIds[dir][index];\r\n    }\r\n\r\n    private _getWarp(off: geom.OffsetLike, dir: geom.Direction) {\r\n        const index = this._size.index(off);\r\n        const warpId = this._tileWarpIds[dir][index];\r\n        if (warpId === -1) {\r\n            return undefined;\r\n        } else {\r\n            return this._warps[warpId];\r\n        }\r\n    }\r\n\r\n    // setup and maintenance\r\n\r\n    /**\r\n     * Adds a wall at a particular edge.  This automatically adds the\r\n     * corresponding wall on the other side.\r\n     */\r\n    addWall(x: number, y: number, dir: geom.Direction, oneWay = false) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._addFlag(LOCAL_OFF, 1 << dir);\r\n        LOCAL_OFF.addCardinalDirection(dir);\r\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\r\n            this._addFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a wall at a particular edge.  This automatically removes the\r\n     * corresponding wall on the other side.\r\n     */\r\n    removeWall(x: number, y: number, dir: geom.Direction, oneWay = false) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._removeFlag(LOCAL_OFF, 1 << dir);\r\n        LOCAL_OFF.addCardinalDirection(dir);\r\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\r\n            this._removeFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\r\n        }\r\n    }\r\n\r\n    getWalls(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        return this._tileFlags[index] & geom.DirectionFlags.ALL;\r\n    }\r\n\r\n    getWall(x: number, y: number, dir: geom.Direction) {\r\n        return (this.getWalls(x, y) & (1 << dir)) !== 0;\r\n    }\r\n\r\n    addBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._addFlag(LOCAL_OFF, TileFlag.BODY);\r\n    }\r\n\r\n    removeBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._removeFlag(LOCAL_OFF, TileFlag.BODY);\r\n    }\r\n\r\n    getBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        return (this._tileFlags[index] & TileFlag.BODY) !== 0;\r\n    }\r\n\r\n    // TODO add length argument\r\n    addWarp(sourceX: number, sourceY: number, dir: geom.Direction,\r\n            targetMap: FieldOfViewMap, targetX: number, targetY: number) {\r\n        LOCAL_OFF.set(targetX - sourceX, targetY - sourceY)\r\n                .addCardinalDirection(geom.directionOpposite(dir));\r\n        const warpId = this._findOrMakeWarp(targetMap, LOCAL_OFF);\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        this._addWarp(LOCAL_OFF, dir, warpId);\r\n    }\r\n\r\n    // TODO add length argument\r\n    removeWarp(sourceX: number, sourceY: number, dir: geom.Direction) {\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        this._removeWarp(LOCAL_OFF, dir);\r\n    }\r\n\r\n    getWarpFlags(sourceX: number, sourceY: number) {\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        let ret = 0;\r\n        geom.DIRECTIONS.forEach((dir) => {\r\n            if (this._getWarp(LOCAL_OFF, dir)) {\r\n                ret |= 1 << dir;\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    getWarpFlag(sourceX: number, sourceY: number, dir: geom.Direction) {\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        return this._getWarp(LOCAL_OFF, dir) != null;\r\n    }\r\n\r\n    // execution\r\n\r\n    /**\r\n     * Compute the field of view for a camera at the given tile.\r\n     * chebyshevRadius is the vision radius.  It uses chebyshev distance\r\n     * (https://en.wikipedia.org/wiki/Chebyshev_distance), which just means\r\n     * that the limit of vision in a large empty field will be square.\r\n     *\r\n     * This returns a WarpRect, which indicates which tiles are visible\r\n     * and which map is seen in each tile.  warpRect.getMask(x, y) will return\r\n     * true for visible tiles, warpRect.getMap(x, y) will return\r\n     * the map for that tile, and warpRect.getOffset(x, y) will return the\r\n     * location in that map which is visible there.\r\n     */\r\n    getFieldOfView(x: number, y: number, chebyshevRadius: number) {\r\n        const origin = new geom.Offset(x, y);\r\n        const boundRect = new geom.Rectangle().set(\r\n            origin.x - chebyshevRadius, origin.y - chebyshevRadius,\r\n            chebyshevRadius * 2 + 1, chebyshevRadius * 2 + 1,\r\n        );\r\n        const mask = new WarpRect(boundRect);\r\n        // the player can always see itself\r\n        mask.set(origin, true, undefined);\r\n        // the field is divided into quadrants\r\n        this._quadrant(mask, origin, chebyshevRadius, -1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius,  1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius, -1,  1);\r\n        this._quadrant(mask, origin, chebyshevRadius,  1,  1);\r\n        return mask;\r\n    }\r\n\r\n    private _quadrant(mask: WarpRect, origin: geom.OffsetLike, chebyshevRadius: number,\r\n                      xDir: number, yDir: number) {\r\n        const {x: startX, y: startY} = origin;\r\n        const endDXY = (chebyshevRadius + 1);\r\n        if (endDXY < 0 || !this._size.containsOffset(origin)) {\r\n            return;\r\n        }\r\n        const farYFlag = [TileFlag.WALL_NORTH, TileFlag.WALL_SOUTH][(yDir + 1) / 2];\r\n        const farXFlag = [TileFlag.WALL_WEST, TileFlag.WALL_EAST][(xDir + 1) / 2];\r\n        const yWarpDir = [geom.Direction.NORTH, geom.Direction.SOUTH][(yDir + 1) / 2];\r\n        const yWarps = this._tileWarpIds[yWarpDir];\r\n        const xWarpDir = [geom.Direction.WEST, geom.Direction.EAST][(xDir + 1) / 2];\r\n        const xWarps = this._tileWarpIds[xWarpDir];\r\n        const startMapIndex = this._size.index(origin);\r\n        const startMaskIndex = mask.index(origin.x, origin.y);\r\n        // Initial wedge is from slope zero to slope infinity (i.e. the whole quadrant)\r\n        const wedges = [{\r\n            low: 0,\r\n            high: Number.POSITIVE_INFINITY,\r\n            warp: undefined,\r\n            warpCount: 0,\r\n        } as Wedge];\r\n        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n        for (let dy = 0, yMapIndex = startMapIndex, yMaskIndex = startMaskIndex;\r\n             dy !== endDXY && wedges.length > 0;\r\n             dy ++, yMapIndex = yMapIndex + yDir * this._size.width, yMaskIndex = yMaskIndex + yDir * mask.width\r\n        ) {\r\n            const divYpos = 1 / (dy + 0.5);\r\n            const divYneg = dy === 0 ? Number.POSITIVE_INFINITY : 1 / (dy - 0.5);\r\n            const divYmid = 1 / dy;\r\n            let wedgeIndex = 0;\r\n            // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n            // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n            for (let dx = 0, mapIndex = yMapIndex, maskIndex = yMaskIndex,\r\n                 slopeY = -0.5 * divYpos, slopeX = 0.5 * divYneg,\r\n                 slopeFar = 0.5 * divYpos, slopeMid = 0;\r\n                 dx !== endDXY && wedgeIndex !== wedges.length;\r\n                 dx ++, mapIndex = mapIndex + xDir, maskIndex = maskIndex + xDir,\r\n                 slopeY = slopeY + divYpos, slopeX = slopeX + divYneg,\r\n                 slopeFar = slopeFar + divYpos, slopeMid = slopeMid + divYmid\r\n            ) {\r\n                // the slopes of the four corners of this tile\r\n                // these are named as follows:\r\n                //   slopeY is the slope closest to the Y axis\r\n                //   slopeFar is the slope to the farthest corner\r\n                //   slopeMid is the slope to the center\r\n                //   slopeX is the slope closest to the X axis\r\n                // these are always true:\r\n                //   slopeY < slopeFar < slopeX\r\n                //   slopeY < slopeMid < slopeX\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---X\r\n                // |   |   | C |\r\n                // +---+---Y---F\r\n\r\n                // the walls of this tile\r\n                // these are named as follows:\r\n                //   wallY is the farthest horizontal wall (slopeY to slopeFar)\r\n                //   wallX is the farthest vertical wall (slopeFar to slopeX)\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---+\r\n                // |   |   | C X\r\n                // +---+---+-Y-+\r\n\r\n                // advance the wedge index until this tile is not after the current wedge\r\n                while (slopeY >= wedges[wedgeIndex].high) {\r\n                    wedgeIndex ++;\r\n                    if (wedgeIndex >= wedges.length) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (wedgeIndex >= wedges.length) {\r\n                    break;\r\n                }\r\n\r\n                // if the current wedge is after this tile, move on\r\n                if (slopeX <= wedges[wedgeIndex].low) {\r\n                    continue;\r\n                }\r\n\r\n                {\r\n                    const centerWedge = whichWedge(wedges, wedgeIndex, slopeMid);\r\n                    mask.setAt(maskIndex, true, wedges[centerWedge].warp);\r\n                }\r\n\r\n                {\r\n                    let wedgeIndexInner = wedgeIndex;\r\n                    while (wedgeIndexInner < wedges.length && slopeX > wedges[wedgeIndexInner].low) {\r\n                        let newWedges = [wedges[wedgeIndexInner]];\r\n                        const {warp} = wedges[wedgeIndexInner];\r\n                        let wallY: boolean;\r\n                        let wallX: boolean;\r\n                        let body: boolean;\r\n                        let warpY: Warp;\r\n                        let warpX: Warp;\r\n                        const nextWarpCount = wedges[wedgeIndexInner].warpCount + 1;\r\n\r\n                        if (typeof warp === 'undefined') {\r\n                            wallY = (this._tileFlags[mapIndex] & farYFlag) !== 0;\r\n                            wallX = (this._tileFlags[mapIndex] & farXFlag) !== 0;\r\n                            body = (dx !== 0 || dy !== 0) && (this._tileFlags[mapIndex] & TileFlag.BODY) !== 0;\r\n                            warpY = this._warps[yWarps[mapIndex]];\r\n                            warpX = this._warps[xWarps[mapIndex]];\r\n                        } else {\r\n                            const {map, offset} = warp;\r\n                            LOCAL_OFF.copyFrom(offset).add(startX + dx * xDir, startY + dy * yDir);\r\n                            wallY = map._getFlag(LOCAL_OFF, farYFlag);\r\n                            wallX = map._getFlag(LOCAL_OFF, farXFlag);\r\n                            body = (dx !== 0 || dy !== 0) && map._getFlag(LOCAL_OFF, TileFlag.BODY);\r\n                            warpY = map._getWarp(LOCAL_OFF, yWarpDir);\r\n                            warpX = map._getWarp(LOCAL_OFF, xWarpDir);\r\n                        }\r\n\r\n                        if (wallX && wallY) {\r\n                            // this tile has both far walls\r\n                            // so we can't see beyond it and the whole range should be cut out of the wedge(s)\r\n                            newWedges = cutWedges(newWedges, slopeY - WALL_EPSILON, slopeX + WALL_EPSILON);\r\n                        } else if (wallX) {\r\n                            if (typeof warpY !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeY - WARP_EPSILON, slopeFar + WARP_EPSILON, warpY, nextWarpCount);\r\n                            }\r\n                            if (body) {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY + BODY_EPSILON, slopeX + WALL_EPSILON);\r\n                            } else {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeFar - WALL_EPSILON, slopeX + WALL_EPSILON);\r\n                            }\r\n                        } else if (wallY) {\r\n                            if (body) {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY - WALL_EPSILON, slopeX - BODY_EPSILON);\r\n                            } else {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY - WALL_EPSILON, slopeFar + WALL_EPSILON);\r\n                            }\r\n                            if (typeof warpX !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeFar - WARP_EPSILON, slopeX + WARP_EPSILON, warpX, nextWarpCount);\r\n                            }\r\n                        } else {\r\n                            if (typeof warpY !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeY - WARP_EPSILON, slopeFar + WARP_EPSILON, warpY, nextWarpCount);\r\n                            }\r\n                            if (body) {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY + BODY_EPSILON, slopeX - BODY_EPSILON);\r\n                            }\r\n                            if (typeof warpX !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeFar - WARP_EPSILON, slopeX + WARP_EPSILON, warpX, nextWarpCount);\r\n                            }\r\n                        }\r\n\r\n                        if (newWedges.length !== 1) {\r\n                            wedges.splice(wedgeIndexInner, 1, ...newWedges);\r\n                        }\r\n                        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n                        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n                        wedgeIndexInner = wedgeIndexInner + newWedges.length;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as geom from './geom';\r\nimport {FieldOfViewMap} from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\n/**\r\n * These flags determine whether a given tile has walls in any of the cardinal\r\n * directions, and whether there is a \"body\" in the tile.\r\n */\r\nexport enum TileFlag {\r\n    WALL_NORTH = 1 << geom.Direction.NORTH,\r\n    WALL_EAST  = 1 << geom.Direction.EAST,\r\n    WALL_WEST  = 1 << geom.Direction.WEST,\r\n    WALL_SOUTH = 1 << geom.Direction.SOUTH,\r\n    BODY       = 1 << geom.DIRECTIONS.length,\r\n}\r\n\r\nexport interface Warp {\r\n    map: FieldOfViewMap;\r\n    offset: geom.Offset;\r\n}\r\n\r\n/**\r\n * In the shadowcasting algorithm, each shadow is represented by a \"wedge\",\r\n * running from a \"low\" angle to a \"high\" angle.  To support warps, we also\r\n * track for each wedge a map (if we've gone through a warp), and an offset\r\n * (the location within the target map relative to the player's location in\r\n * the source map).\r\n */\r\nexport interface Wedge {\r\n    low: number;\r\n    high: number;\r\n    warp: Warp | undefined;\r\n    warpCount: number;\r\n}\r\n\r\n// istanbul ignore next\r\nfunction rangeToString(low: number, high: number) {\r\n    return `${low.toFixed(7)}-${high.toFixed(7)}`;\r\n}\r\n\r\n// istanbul ignore next\r\nfunction wedgeToString(wedge: Wedge) {\r\n    return `{${rangeToString(wedge.low, wedge.high)}`\r\n        + `${typeof wedge.warp !== 'undefined' ? `~${wedge.warp.map.id}` : ''}}`;\r\n}\r\n\r\n// istanbul ignore next\r\nfunction wedgesToString(wedges: Wedge[]) {\r\n    return `[${wedges.map(wedgeToString).join(', ')}]`;\r\n}\r\n\r\n/**\r\n * Bodies in this algorithm do not entirely fill their tiles.  This is\r\n * implemented by adjusting the angles of the shadows the bodies cast,\r\n * making the wedge very slightly narrower.  BODY_EPSILON represents the\r\n * amount of reduction on either side of the wedge.\r\n */\r\nexport const BODY_EPSILON = 0.00001;\r\n\r\n/**\r\n * Walls do fill the entire tile edge.  With infinite precision, there would be\r\n * no need to adjust the shadow cast by a wall.  But we're using floating point\r\n * math here, which means imprecision can creep in and cause angles not to line\r\n * up properly.  To fix that, we widen the wedges of the shadows cast by walls.\r\n * We must make sure not to widen them as much as we narrow the body shadows,\r\n * or else they might close the gap we want between a body and a wall.\r\n */\r\nexport const WALL_EPSILON = BODY_EPSILON / 4;\r\n\r\n/**\r\n * Warps also fill the entire tile edge.  But we don't extend warps as much as\r\n * walls, just in case a sliver of warp might make it past a wall on the other\r\n * side of the warp, at the edge of the warp range.\r\n */\r\nexport const WARP_EPSILON = WALL_EPSILON / 4;\r\n\r\nconst DEBUG_CUTWEDGE: boolean = false;\r\n\r\n/**\r\n * This function cuts a range of angles out of a wedge.\r\n */\r\nexport function cutWedge(wedge: Wedge, low: number, high: number): Wedge[] {\r\n    // istanbul ignore next\r\n    if (DEBUG_CUTWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`cut ${wedgeToString(wedge)} ${rangeToString(low, high)}`);\r\n    }\r\n    let ret: Wedge[];\r\n    if (low <= wedge.low) {\r\n        if (high >= wedge.high) {\r\n            // wedge is entirely occluded, remove it\r\n            ret = [];\r\n        } else if (high >= wedge.low) {\r\n            // low part of wedge is occluded, trim it\r\n            wedge.low = high;\r\n            ret = [wedge];\r\n        } else {\r\n            // cut doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else if (high >= wedge.high) {\r\n        if (low <= wedge.high) {\r\n            // high part of wedge is occluded, trim it\r\n            wedge.high = low;\r\n            ret = [wedge];\r\n        } else {\r\n            // cut doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else {\r\n        // middle part of wedge is occluded, split it\r\n        const nextWedge = {\r\n            low: high,\r\n            high: wedge.high,\r\n            warp: wedge.warp,\r\n            warpCount: wedge.warpCount,\r\n        };\r\n        wedge.high = low;\r\n        ret = [wedge, nextWedge];\r\n    }\r\n    // istanbul ignore next\r\n    if (DEBUG_CUTWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`--> ${wedgesToString(ret)}`);\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function cutWedges(wedges: Wedge[], low: number, high: number): Wedge[] {\r\n    const ret = new Array<Wedge>();\r\n    for (const wedge of wedges) {\r\n        ret.push(...cutWedge(wedge, low, high));\r\n    }\r\n    return ret;\r\n}\r\n\r\nconst DEBUG_WARPWEDGE: boolean = false;\r\n\r\nexport function warpWedge(wedge: Wedge, low: number, high: number, warp: Warp, warpCount: number): Wedge[] {\r\n    // istanbul ignore next\r\n    if (DEBUG_WARPWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`warp ${wedgeToString(wedge)} ${rangeToString(low, high)} ${warp.map.id}`);\r\n    }\r\n    let ret: Wedge[];\r\n    if (low <= wedge.low) {\r\n        if (high >= wedge.high) {\r\n            // wedge is entirely warped\r\n            wedge.warp = warp;\r\n            wedge.warpCount = warpCount;\r\n            ret = [wedge];\r\n        } else if (high >= wedge.low) {\r\n            // low part of wedge is warped, split it into two\r\n            const nextWedge = {\r\n                low: high,\r\n                high: wedge.high,\r\n                warp: wedge.warp,\r\n                warpCount: wedge.warpCount,\r\n            };\r\n            wedge.high = high;\r\n            wedge.warp = warp;\r\n            wedge.warpCount = warpCount;\r\n            ret = [wedge, nextWedge];\r\n        } else {\r\n            // warp doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else if (high >= wedge.high) {\r\n        if (low <= wedge.high) {\r\n            // high part of wedge is occluded, split it into two\r\n            const nextWedge = {\r\n                low,\r\n                high: wedge.high,\r\n                warp,\r\n                warpCount,\r\n            };\r\n            wedge.high = low;\r\n            ret = [wedge, nextWedge];\r\n        } else {\r\n            // warp doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else {\r\n        // middle part of wedge is occluded, split it into three\r\n        const middleWedge = {\r\n            low,\r\n            high,\r\n            warp,\r\n            warpCount,\r\n        };\r\n        const highWedge = {\r\n            low: high,\r\n            high: wedge.high,\r\n            warp: wedge.warp,\r\n            warpCount: wedge.warpCount,\r\n        };\r\n        wedge.high = low;\r\n        ret = [wedge, middleWedge, highWedge];\r\n    }\r\n    // istanbul ignore next\r\n    if (DEBUG_WARPWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`--> ${wedgesToString(ret)}`);\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function warpWedges(wedges: Wedge[], low: number, high: number, warp: Warp, warpCount: number): Wedge[] {\r\n    const ret = new Array<Wedge>();\r\n    for (const wedge of wedges) {\r\n        ret.push(...warpWedge(wedge, low, high, warp, warpCount));\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function whichWedge(wedges: Wedge[], wedgeIndex: number, centerSlope: number) {\r\n    // determine the wedge containing centerSlope,\r\n    // or if there isn't one, then the one nearest to centerSlope\r\n    // or if two are very close, the one with the least warp count\r\n    // or if they both have the same warp count, the one with the lowest map id\r\n    let cur = wedgeIndex;\r\n    // skip to the next wedge while it starts before before centerSlope\r\n    while (cur < wedges.length - 1 && wedges[cur + 1].low < centerSlope - WALL_EPSILON * 2) {\r\n        cur ++;\r\n    }\r\n    if (cur >= wedges.length - 1 || wedges[cur].high > centerSlope + WALL_EPSILON * 2) {\r\n        // the current wedge contains centerSlope or is past it, so this is the closest\r\n        return cur;\r\n    } else if (wedges[cur].high < centerSlope - WALL_EPSILON * 2) {\r\n        // the current wedge isn't very close to centerSlope\r\n        // choose the closest one\r\n        if (Math.abs(wedges[cur].high - centerSlope) < Math.abs(wedges[cur + 1].low - centerSlope)) {\r\n            return cur;\r\n        } else {\r\n            return cur + 1;\r\n        }\r\n    } else {\r\n        // the current wedge is very close to centerSlope\r\n        if (wedges[cur + 1].low < centerSlope + WALL_EPSILON * 2) {\r\n            // the next wedge is very close to centerSlope too\r\n            // compare warp counts\r\n            if (wedges[cur].warpCount < wedges[cur + 1].warpCount) {\r\n                return cur;\r\n            } else if (wedges[cur].warpCount > wedges[cur + 1].warpCount) {\r\n                return cur + 1;\r\n            } else {\r\n                // same warp count\r\n                // compare map ids\r\n                if (wedges[cur].warp.map.id < wedges[cur + 1].warp.map.id) {\r\n                    return cur;\r\n                } else {\r\n                    return cur + 1;\r\n                }\r\n            }\r\n        } else {\r\n            // the next wedge isn't very close to centerSlope, use the current one\r\n            return cur;\r\n        }\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\nexport enum DirectionFlags {\r\n    NONE  = 0,\r\n    NORTH = 1,\r\n    EAST  = 2,\r\n    SOUTH = 4,\r\n    WEST  = 8,\r\n    ALL   = 15,\r\n}\r\n\r\nexport function directionFlagsToString(flags: DirectionFlags) {\r\n    let ret = '[';\r\n    if ((flags & DirectionFlags.NORTH) !== 0) {\r\n        ret += 'N';\r\n    }\r\n    if ((flags & DirectionFlags.EAST) !== 0) {\r\n        ret += 'E';\r\n    }\r\n    if ((flags & DirectionFlags.SOUTH) !== 0) {\r\n        ret += 'S';\r\n    }\r\n    if ((flags & DirectionFlags.WEST) !== 0) {\r\n        ret += 'W';\r\n    }\r\n    return ret + ']';\r\n}\r\n\r\n// conversion\r\n\r\nexport function directionFlagsFromDirection(dir: geom.Direction) {\r\n    return (1 << dir) as DirectionFlags;\r\n}\r\n","// tslint:disable:no-bitwise\r\n\r\nexport enum Direction {\r\n    NORTH = 0,\r\n    EAST  = 1,\r\n    SOUTH = 2,\r\n    WEST  = 3,\r\n}\r\n\r\nexport const DIRECTIONS = [\r\n    Direction.NORTH,\r\n    Direction.EAST,\r\n    Direction.SOUTH,\r\n    Direction.WEST,\r\n];\r\n\r\nconst DIRECTIONS_STR = [\r\n    'N',\r\n    'E',\r\n    'S',\r\n    'W',\r\n];\r\n\r\nexport function directionToString(dir: Direction) {\r\n    return DIRECTIONS_STR[dir];\r\n}\r\n\r\nexport function directionOpposite(dir: Direction) {\r\n    return ((dir + 2) & 3) as Direction;\r\n}\r\n","export * from './direction';\r\nexport * from './direction-flags';\r\nexport * from './offset';\r\nexport * from './size';\r\nexport * from './rectangle';\r\nexport * from './mask';\r\n","import * as geom from '.';\r\n\r\nexport class Mask implements geom.SizeLike {\r\n    private readonly _size = new geom.Size();\r\n    private readonly _bits: boolean[];\r\n    // TODO consider Uint8Array for bits\r\n\r\n    constructor(size: geom.SizeLike, initialValue = false) {\r\n        this._size.copyFrom(size);\r\n        this._bits = new Array<boolean>(this._size.area).fill(initialValue);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        let ret = '';\r\n        const off = new geom.Offset();\r\n        for (let y = 0; y < this._size.height; y ++) {\r\n            for (let x = 0; x < this._size.width; x ++) {\r\n                off.set(x, y);\r\n                ret += this.get(off.set(x, y)) ? '☑' : '☐';\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    get width() {\r\n        return this._size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._size.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this._size.index(off);\r\n    }\r\n\r\n    getAt(index: number) {\r\n        return this._bits[index];\r\n    }\r\n\r\n    get(off: geom.OffsetLike) {\r\n        return this.getAt(this.index(off));\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean) {\r\n        this._bits[index] = value;\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean) {\r\n        return this.setAt(this.index(off), value);\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nconst X_FROM_DIRECTION = [  0, 1, 0, -1 ];\r\nconst Y_FROM_DIRECTION = [ -1, 0, 1,  0 ];\r\n\r\nexport interface OffsetLike {\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\nexport class Offset implements OffsetLike {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor();\r\n    constructor(x: number, y: number);\r\n    constructor(x?: number, y?: number) {\r\n        if (typeof x === 'undefined') {\r\n            x = 0;\r\n        }\r\n        if (typeof y === 'undefined') {\r\n            y = 0;\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.x},${this.y})`;\r\n    }\r\n\r\n    equals(other: OffsetLike) {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    // chebyshev: can move in any direction (diagonals are ok)\r\n    get magnitudeChebyshev() {\r\n        return Math.max(Math.abs(this.x), Math.abs(this.y));\r\n    }\r\n\r\n    // manhattan: can move only in cardinal directions (no diagonals)\r\n    get magnitudeManhattan(): number {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: OffsetLike) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        return this;\r\n    }\r\n\r\n    setFromDirection(dir: geom.Direction) {\r\n        this.x = X_FROM_DIRECTION[dir];\r\n        this.y = Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    add(x: number, y: number) {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n\r\n    addSize(size: geom.SizeLike) {\r\n        this.x += size.width;\r\n        this.y += size.height;\r\n        return this;\r\n    }\r\n\r\n    addOffset(off: OffsetLike) {\r\n        this.x += off.x;\r\n        this.y += off.y;\r\n        return this;\r\n    }\r\n\r\n    addDirection(dir: geom.Direction) {\r\n        this.x += X_FROM_DIRECTION[dir];\r\n        this.y += Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    addCardinalDirection(dir: geom.Direction) {\r\n        this.x += X_FROM_DIRECTION[dir];\r\n        this.y += Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    subtractOffset(off: OffsetLike) {\r\n        this.x -= off.x;\r\n        this.y -= off.y;\r\n        return this;\r\n    }\r\n\r\n    multiply(factor: number) {\r\n        this.x *= factor;\r\n        this.y *= factor;\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    // chebyshev: can move in any direction (diagonals are ok)\r\n    distanceChebyshev(other: OffsetLike) {\r\n        return this.subtractOffset(other).magnitudeChebyshev;\r\n    }\r\n\r\n    // manhattan: can move only in cardinal directions (no diagonals)\r\n    distanceManhattan(other?: OffsetLike): number {\r\n        return this.subtractOffset(other).magnitudeManhattan;\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport interface RectangleLike extends geom.SizeLike {\r\n    readonly westX: number;\r\n    readonly northY: number;\r\n}\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport class Rectangle implements RectangleLike, geom.SizeLike {\r\n    northWest: geom.Offset;\r\n    size: geom.Size;\r\n\r\n    constructor();\r\n    constructor(westX: number, northY: number, width: number, height: number);\r\n    constructor(westX?: number, northY?: number, width?: number, height?: number) {\r\n        if (typeof westX === 'undefined') {\r\n            westX = 0;\r\n        }\r\n        if (typeof northY === 'undefined') {\r\n            northY = 0;\r\n        }\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.northWest = new geom.Offset(westX, northY);\r\n        this.size = new geom.Size(width, height);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.westX},${this.northY} ${this.width}x${this.height})`;\r\n    }\r\n\r\n    equals(other: RectangleLike) {\r\n        return this.westX === other.westX && this.northY === other.northY && this.size.equals(other);\r\n    }\r\n\r\n    get northY() {\r\n        return this.northWest.y;\r\n    }\r\n\r\n    get southY() {\r\n        return this.northWest.y + this.size.height - 1;\r\n    }\r\n\r\n    get westX() {\r\n        return this.northWest.x;\r\n    }\r\n\r\n    get eastX() {\r\n        return this.northWest.x + this.size.width - 1;\r\n    }\r\n\r\n    get width() {\r\n        return this.size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this.size.height;\r\n    }\r\n\r\n    get empty() {\r\n        return this.size.empty;\r\n    }\r\n\r\n    get area() {\r\n        return this.size.area;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(westX: number, northY: number, width: number, height: number) {\r\n        this.northWest.set(westX, northY);\r\n        this.size.set(width, height);\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: RectangleLike) {\r\n        this.northWest.set(other.westX, other.northY);\r\n        this.size.set(other.width, other.height);\r\n        return this;\r\n    }\r\n\r\n    extendToInclude(off: geom.OffsetLike) {\r\n        const dx = off.x - this.westX;\r\n        if (dx < 0) {\r\n            this.size.width -= dx;\r\n            this.northWest.x = off.x;\r\n        } else if (dx >= this.size.width) {\r\n            this.size.width = dx + 1;\r\n        }\r\n        const dy = off.y - this.northWest.y;\r\n        if (dy < 0) {\r\n            this.size.height -= dy;\r\n            this.northWest.y = off.y;\r\n        } else if (dy >= this.size.height) {\r\n            this.size.height = dy + 1;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return this.size.containsOffset(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n\r\n    containsRectangle(other: RectangleLike) {\r\n        LOCAL_OFF.set(other.westX, other.northY).subtractOffset(this.northWest);\r\n        if (!this.size.containsOffset(LOCAL_OFF)) {\r\n            return false;\r\n        }\r\n        if (other.width === 0 && other.height === 0) {\r\n            return false;\r\n        }\r\n        return this.size.containsOffset(LOCAL_OFF.add(other.width - 1, other.height - 1));\r\n    }\r\n\r\n    overlapsRectangle(other: RectangleLike) {\r\n        return this.northY <= other.northY + other.height - 1\r\n            && this.southY >= other.northY\r\n            && this.westX <= other.westX + other.width - 1\r\n            && this.eastX >= other.westX\r\n            && !this.empty\r\n            && other.width !== 0 && other.height !== 0;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this.size.index(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport interface SizeLike {\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport class Size implements SizeLike {\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor();\r\n    constructor(width: number, height: number);\r\n    constructor(width?: number, height?: number) {\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.width}x${this.height})`;\r\n    }\r\n\r\n    equals(other: SizeLike) {\r\n        return this.width === other.width && this.height === other.height;\r\n    }\r\n\r\n    get empty() {\r\n        return this.width === 0 || this.height === 0;\r\n    }\r\n\r\n    get area() {\r\n        return this.width * this.height;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: SizeLike) {\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n        return this;\r\n    }\r\n\r\n    add(width: number, height: number) {\r\n        this.width += width;\r\n        this.height += height;\r\n        return this;\r\n    }\r\n\r\n    addOffset(off: geom.OffsetLike) {\r\n        this.width += off.x;\r\n        this.height += off.y;\r\n        return this;\r\n    }\r\n\r\n    multiply(factor: number) {\r\n        this.width *= factor;\r\n        this.height *= factor;\r\n        return this;\r\n    }\r\n\r\n    // TODO: rotate\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return off.x >= 0 && off.y >= 0 && off.x < this.width && off.y < this.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return off.y * this.width + off.x;\r\n    }\r\n}\r\n","/*\r\n *  WarpField\r\n *  github.com/sbj42/warp-field\r\n *  James Clark\r\n *  Licensed under the MIT license.\r\n */\r\n\r\nexport {FieldOfViewMap} from './field-of-view';\r\nexport {Warp} from './fov-util';\r\nexport {WarpRect} from './warp-rect';\r\nexport {Direction, DirectionFlags, Offset} from './geom';\r\n","import * as geom from './geom';\r\nimport {FieldOfViewMap} from '.';\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport interface Warp {\r\n    map: FieldOfViewMap;\r\n    offset: geom.Offset;\r\n}\r\n\r\nimport {Offset} from './geom';\r\n\r\nexport class WarpRect implements geom.RectangleLike {\r\n    private readonly _rectangle = new geom.Rectangle();\r\n    private readonly _mask: geom.Mask;\r\n    private readonly _warps: Warp[];\r\n\r\n    constructor(rect: geom.RectangleLike, initialValue = false) {\r\n        this._rectangle.copyFrom(rect);\r\n        this._mask = new geom.Mask(rect, initialValue);\r\n        this._warps = new Array<Warp>(this._rectangle.area);\r\n    }\r\n\r\n    private _warpsToString() {\r\n        let ret = '';\r\n        const off = new geom.Offset();\r\n        for (let y = 0; y < this._rectangle.height; y ++) {\r\n            for (let x = 0; x < this._rectangle.width; x ++) {\r\n                off.set(x, y).addOffset(this._rectangle.northWest);\r\n                if (this.getMask(off.x, off.y)) {\r\n                    const warp = this._getWarp(off);\r\n                    if (typeof warp === 'undefined') {\r\n                        ret += '-';\r\n                    } else {\r\n                        ret += warp.map.id[0];\r\n                    }\r\n                } else {\r\n                    ret += '.';\r\n                }\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    private _getWarpAt(index: number) {\r\n        return this._warps[index];\r\n    }\r\n\r\n    private _getWarp(off: geom.OffsetLike) {\r\n        return this._warps[this._rectangle.index(off)];\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `${this._rectangle.northWest}\\n${this._warpsToString()}`;\r\n    }\r\n\r\n    get westX() {\r\n        return this._rectangle.westX;\r\n    }\r\n\r\n    get northY() {\r\n        return this._rectangle.northY;\r\n    }\r\n\r\n    get width() {\r\n        return this._rectangle.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._rectangle.height;\r\n    }\r\n\r\n    index(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y).subtractOffset(this._rectangle.northWest);\r\n        return this._mask.index(LOCAL_OFF);\r\n    }\r\n\r\n    getMaskAt(index: number) {\r\n        return this._mask.getAt(index);\r\n    }\r\n\r\n    getMask(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        if (!this._rectangle.containsOffset(LOCAL_OFF)) {\r\n            return false;\r\n        }\r\n        return this._mask.getAt(this._rectangle.index(LOCAL_OFF));\r\n    }\r\n\r\n    getMapAt(index: number) {\r\n        const warp = this._getWarpAt(index);\r\n        if (warp) {\r\n            return warp.map;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getMap(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const warp = this._getWarp(LOCAL_OFF);\r\n        if (warp) {\r\n            return warp.map;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getOffsetAt(index: number): Offset {\r\n        const warp = this._getWarpAt(index);\r\n        if (warp) {\r\n            return warp.offset;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getOffset(x: number, y: number): Offset {\r\n        LOCAL_OFF.set(x, y);\r\n        const warp = this._getWarp(LOCAL_OFF);\r\n        if (warp) {\r\n            return warp.offset;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean, warp: Warp | undefined) {\r\n        this._mask.setAt(index, value);\r\n        this._warps[index] = warp;\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean, warp: Warp | undefined) {\r\n        this._mask.setAt(this._rectangle.index(off), value);\r\n        this._warps[this._rectangle.index(off)] = warp;\r\n        return this;\r\n    }\r\n}\r\n"],"sourceRoot":""}