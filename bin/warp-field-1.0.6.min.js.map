{"version":3,"sources":["webpack://WarpField/./src/field-of-view.ts","webpack://WarpField/./src/fov-util.ts","webpack://WarpField/./src/geom/direction-flags.ts","webpack://WarpField/./src/geom/direction.ts","webpack://WarpField/./src/geom/index.ts","webpack://WarpField/./src/geom/mask.ts","webpack://WarpField/./src/geom/offset.ts","webpack://WarpField/./src/geom/rectangle.ts","webpack://WarpField/./src/geom/size.ts","webpack://WarpField/./src/index.ts","webpack://WarpField/./src/warp-rect.ts","webpack://WarpField/webpack/bootstrap","webpack://WarpField/webpack/startup"],"names":["LOCAL_OFF","geom","Offset","id","width","height","addEdgeWalls","_size","Size","_warps","Array","this","set","_tileFlags","area","fill","y","_addFlag","TileFlag","WALL_WEST","WALL_EAST","x","WALL_NORTH","WALL_SOUTH","_tileWarpIds","DIRECTIONS","map","off","flag","index","_removeFlag","_getFlag","_findOrMakeWarp","offset","fid","length","fwarp","equals","warp","copyFrom","push","_addWarp","dir","warpId","_removeWarp","_getWarp","addWall","oneWay","addCardinalDirection","containsOffset","directionOpposite","removeWall","getWalls","DirectionFlags","ALL","getWall","addBody","BODY","removeBody","getBody","addWarp","sourceX","sourceY","targetMap","targetX","targetY","removeWarp","getWarpFlags","ret","forEach","getWarpFlag","getFieldOfView","chebyshevRadius","origin","boundRect","Rectangle","mask","WarpRect","undefined","_quadrant","xDir","yDir","startX","startY","endDXY","farYFlag","farXFlag","yWarpDir","Direction","NORTH","SOUTH","yWarps","xWarpDir","WEST","EAST","xWarps","startMapIndex","startMaskIndex","wedges","low","high","Number","POSITIVE_INFINITY","warpCount","dy","yMapIndex","yMaskIndex","divYpos","divYneg","divYmid","wedgeIndex","dx","mapIndex","maskIndex","slopeY","slopeX","slopeFar","slopeMid","centerWedge","whichWedge","setAt","wedgeIndexInner","newWedges","wallY","wallX","body","warpY","warpX","nextWarpCount","add","cutWedges","WALL_EPSILON","warpWedges","WARP_EPSILON","BODY_EPSILON","splice","FieldOfViewMap","cutWedge","wedge","nextWedge","warpWedge","middleWedge","highWedge","centerSlope","cur","Math","abs","flags","DIRECTIONS_STR","size","initialValue","_bits","toString","get","getAt","value","Mask","X_FROM_DIRECTION","Y_FROM_DIRECTION","other","max","setFromDirection","addSize","addOffset","addDirection","subtractOffset","multiply","factor","distanceChebyshev","magnitudeChebyshev","distanceManhattan","magnitudeManhattan","westX","northY","northWest","empty","extendToInclude","containsRectangle","overlapsRectangle","southY","eastX","rect","_rectangle","_mask","_warpsToString","getMask","_getWarpAt","getMaskAt","getMapAt","getMap","getOffsetAt","getOffset","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call"],"mappings":"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","file":"warp-field-1.0.6.min.js","sourcesContent":["import * as geom from './geom';\r\nimport {\r\n    TileFlag,\r\n    Warp,\r\n    Wedge,\r\n    WALL_EPSILON,\r\n    BODY_EPSILON,\r\n    WARP_EPSILON,\r\n    cutWedges,\r\n    warpWedges,\r\n    whichWedge,\r\n} from './fov-util';\r\nimport {WarpRect} from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\n/**\r\n * We avoid heap allocations during the core part of the algorithm by using this\r\n * preallocated offset object.\r\n */\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\n/**\r\n * The FieldOFViewMap represents the map over which the field of view will be\r\n * computed.  It starts out empty.  You can add walls and bodies to it, and then\r\n * use getFieldOfView() to compute the field of view from a given point.\r\n */\r\nexport class FieldOfViewMap {\r\n    readonly id: string;\r\n    private readonly _size = new geom.Size();\r\n    private readonly _tileFlags: number[];\r\n\r\n    private readonly _warps = new Array<Warp>();\r\n    private readonly _tileWarpIds: number[][];\r\n\r\n    constructor(id: string, width: number, height: number, addEdgeWalls = false) {\r\n        this.id = id;\r\n        this._size.set(width, height);\r\n        this._tileFlags = new Array<number>(this._size.area).fill(0);\r\n        if (addEdgeWalls) {\r\n            for (let y = 0; y < this._size.height; y ++) {\r\n                this._addFlag(LOCAL_OFF.set(0, y), TileFlag.WALL_WEST);\r\n                this._addFlag(LOCAL_OFF.set(this._size.width - 1, y), TileFlag.WALL_EAST);\r\n            }\r\n            for (let x = 0; x < this._size.width; x ++) {\r\n                this._addFlag(LOCAL_OFF.set(x, 0), TileFlag.WALL_NORTH);\r\n                this._addFlag(LOCAL_OFF.set(x, this._size.height - 1), TileFlag.WALL_SOUTH);\r\n            }\r\n        }\r\n        this._tileWarpIds = geom.DIRECTIONS.map(() => new Array<number>(this._size.area).fill(-1));\r\n    }\r\n\r\n    private _addFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        this._tileFlags[index] |= flag;\r\n    }\r\n\r\n    private _removeFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        this._tileFlags[index] &= ~flag;\r\n    }\r\n\r\n    private _getFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        return (this._tileFlags[index] & flag) !== 0;\r\n    }\r\n\r\n    private _findOrMakeWarp(map: FieldOfViewMap, offset: geom.OffsetLike) {\r\n        for (let fid = 0; fid < this._warps.length; fid ++) {\r\n            const fwarp = this._warps[fid];\r\n            if (fwarp.map === map && fwarp.offset.equals(offset)) {\r\n                return fid;\r\n            }\r\n        }\r\n        const warp = {\r\n            map,\r\n            offset: new geom.Offset().copyFrom(offset),\r\n        };\r\n        const id = this._warps.length;\r\n        this._warps.push(warp);\r\n        return id;\r\n    }\r\n\r\n    private _addWarp(off: geom.OffsetLike, dir: geom.Direction, warpId: number) {\r\n        const index = this._size.index(off);\r\n        this._tileWarpIds[dir][index] = warpId;\r\n    }\r\n\r\n    private _removeWarp(off: geom.OffsetLike, dir: geom.Direction) {\r\n        const index = this._size.index(off);\r\n        delete this._tileWarpIds[dir][index];\r\n    }\r\n\r\n    private _getWarp(off: geom.OffsetLike, dir: geom.Direction) {\r\n        const index = this._size.index(off);\r\n        const warpId = this._tileWarpIds[dir][index];\r\n        if (warpId === -1) {\r\n            return undefined;\r\n        } else {\r\n            return this._warps[warpId];\r\n        }\r\n    }\r\n\r\n    // setup and maintenance\r\n\r\n    /**\r\n     * Adds a wall at a particular edge.  This automatically adds the\r\n     * corresponding wall on the other side.\r\n     */\r\n    addWall(x: number, y: number, dir: geom.Direction, oneWay = false) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._addFlag(LOCAL_OFF, 1 << dir);\r\n        LOCAL_OFF.addCardinalDirection(dir);\r\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\r\n            this._addFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a wall at a particular edge.  This automatically removes the\r\n     * corresponding wall on the other side.\r\n     */\r\n    removeWall(x: number, y: number, dir: geom.Direction, oneWay = false) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._removeFlag(LOCAL_OFF, 1 << dir);\r\n        LOCAL_OFF.addCardinalDirection(dir);\r\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\r\n            this._removeFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\r\n        }\r\n    }\r\n\r\n    getWalls(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        return this._tileFlags[index] & geom.DirectionFlags.ALL;\r\n    }\r\n\r\n    getWall(x: number, y: number, dir: geom.Direction) {\r\n        return (this.getWalls(x, y) & (1 << dir)) !== 0;\r\n    }\r\n\r\n    addBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._addFlag(LOCAL_OFF, TileFlag.BODY);\r\n    }\r\n\r\n    removeBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._removeFlag(LOCAL_OFF, TileFlag.BODY);\r\n    }\r\n\r\n    getBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        return (this._tileFlags[index] & TileFlag.BODY) !== 0;\r\n    }\r\n\r\n    // TODO add length argument\r\n    addWarp(sourceX: number, sourceY: number, dir: geom.Direction,\r\n            targetMap: FieldOfViewMap, targetX: number, targetY: number) {\r\n        LOCAL_OFF.set(targetX - sourceX, targetY - sourceY)\r\n                .addCardinalDirection(geom.directionOpposite(dir));\r\n        const warpId = this._findOrMakeWarp(targetMap, LOCAL_OFF);\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        this._addWarp(LOCAL_OFF, dir, warpId);\r\n    }\r\n\r\n    // TODO add length argument\r\n    removeWarp(sourceX: number, sourceY: number, dir: geom.Direction) {\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        this._removeWarp(LOCAL_OFF, dir);\r\n    }\r\n\r\n    getWarpFlags(sourceX: number, sourceY: number) {\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        let ret = 0;\r\n        geom.DIRECTIONS.forEach((dir) => {\r\n            if (this._getWarp(LOCAL_OFF, dir)) {\r\n                ret |= 1 << dir;\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    getWarpFlag(sourceX: number, sourceY: number, dir: geom.Direction) {\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        return this._getWarp(LOCAL_OFF, dir) != null;\r\n    }\r\n\r\n    // execution\r\n\r\n    /**\r\n     * Compute the field of view for a camera at the given tile.\r\n     * chebyshevRadius is the vision radius.  It uses chebyshev distance\r\n     * (https://en.wikipedia.org/wiki/Chebyshev_distance), which just means\r\n     * that the limit of vision in a large empty field will be square.\r\n     *\r\n     * This returns a WarpRect, which indicates which tiles are visible\r\n     * and which map is seen in each tile.  warpRect.getMask(x, y) will return\r\n     * true for visible tiles, warpRect.getMap(x, y) will return\r\n     * the map for that tile, and warpRect.getOffset(x, y) will return the\r\n     * location in that map which is visible there.\r\n     */\r\n    getFieldOfView(x: number, y: number, chebyshevRadius: number) {\r\n        const origin = new geom.Offset(x, y);\r\n        const boundRect = new geom.Rectangle().set(\r\n            origin.x - chebyshevRadius, origin.y - chebyshevRadius,\r\n            chebyshevRadius * 2 + 1, chebyshevRadius * 2 + 1,\r\n        );\r\n        const mask = new WarpRect(boundRect);\r\n        // the player can always see itself\r\n        mask.set(origin, true, undefined);\r\n        // the field is divided into quadrants\r\n        this._quadrant(mask, origin, chebyshevRadius, -1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius,  1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius, -1,  1);\r\n        this._quadrant(mask, origin, chebyshevRadius,  1,  1);\r\n        return mask;\r\n    }\r\n\r\n    private _quadrant(mask: WarpRect, origin: geom.OffsetLike, chebyshevRadius: number,\r\n                      xDir: number, yDir: number) {\r\n        const {x: startX, y: startY} = origin;\r\n        const endDXY = (chebyshevRadius + 1);\r\n        if (endDXY < 0 || !this._size.containsOffset(origin)) {\r\n            return;\r\n        }\r\n        const farYFlag = [TileFlag.WALL_NORTH, TileFlag.WALL_SOUTH][(yDir + 1) / 2];\r\n        const farXFlag = [TileFlag.WALL_WEST, TileFlag.WALL_EAST][(xDir + 1) / 2];\r\n        const yWarpDir = [geom.Direction.NORTH, geom.Direction.SOUTH][(yDir + 1) / 2];\r\n        const yWarps = this._tileWarpIds[yWarpDir];\r\n        const xWarpDir = [geom.Direction.WEST, geom.Direction.EAST][(xDir + 1) / 2];\r\n        const xWarps = this._tileWarpIds[xWarpDir];\r\n        const startMapIndex = this._size.index(origin);\r\n        const startMaskIndex = mask.index(origin.x, origin.y);\r\n        // Initial wedge is from slope zero to slope infinity (i.e. the whole quadrant)\r\n        const wedges = [{\r\n            low: 0,\r\n            high: Number.POSITIVE_INFINITY,\r\n            warp: undefined,\r\n            warpCount: 0,\r\n        } as Wedge];\r\n        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n        for (let dy = 0, yMapIndex = startMapIndex, yMaskIndex = startMaskIndex;\r\n             dy !== endDXY && wedges.length > 0;\r\n             dy ++, yMapIndex = yMapIndex + yDir * this._size.width, yMaskIndex = yMaskIndex + yDir * mask.width\r\n        ) {\r\n            const divYpos = 1 / (dy + 0.5);\r\n            const divYneg = dy === 0 ? Number.POSITIVE_INFINITY : 1 / (dy - 0.5);\r\n            const divYmid = 1 / dy;\r\n            let wedgeIndex = 0;\r\n            // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n            // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n            for (let dx = 0, mapIndex = yMapIndex, maskIndex = yMaskIndex,\r\n                 slopeY = -0.5 * divYpos, slopeX = 0.5 * divYneg,\r\n                 slopeFar = 0.5 * divYpos, slopeMid = 0;\r\n                 dx !== endDXY && wedgeIndex !== wedges.length;\r\n                 dx ++, mapIndex = mapIndex + xDir, maskIndex = maskIndex + xDir,\r\n                 slopeY = slopeY + divYpos, slopeX = slopeX + divYneg,\r\n                 slopeFar = slopeFar + divYpos, slopeMid = slopeMid + divYmid\r\n            ) {\r\n                // the slopes of the four corners of this tile\r\n                // these are named as follows:\r\n                //   slopeY is the slope closest to the Y axis\r\n                //   slopeFar is the slope to the farthest corner\r\n                //   slopeMid is the slope to the center\r\n                //   slopeX is the slope closest to the X axis\r\n                // these are always true:\r\n                //   slopeY < slopeFar < slopeX\r\n                //   slopeY < slopeMid < slopeX\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---X\r\n                // |   |   | C |\r\n                // +---+---Y---F\r\n\r\n                // the walls of this tile\r\n                // these are named as follows:\r\n                //   wallY is the farthest horizontal wall (slopeY to slopeFar)\r\n                //   wallX is the farthest vertical wall (slopeFar to slopeX)\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---+\r\n                // |   |   | C X\r\n                // +---+---+-Y-+\r\n\r\n                // advance the wedge index until this tile is not after the current wedge\r\n                while (slopeY >= wedges[wedgeIndex].high) {\r\n                    wedgeIndex ++;\r\n                    if (wedgeIndex >= wedges.length) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (wedgeIndex >= wedges.length) {\r\n                    break;\r\n                }\r\n\r\n                // if the current wedge is after this tile, move on\r\n                if (slopeX <= wedges[wedgeIndex].low) {\r\n                    continue;\r\n                }\r\n\r\n                {\r\n                    const centerWedge = whichWedge(wedges, wedgeIndex, slopeMid);\r\n                    mask.setAt(maskIndex, true, wedges[centerWedge].warp);\r\n                }\r\n\r\n                {\r\n                    let wedgeIndexInner = wedgeIndex;\r\n                    while (wedgeIndexInner < wedges.length && slopeX > wedges[wedgeIndexInner].low) {\r\n                        let newWedges = [wedges[wedgeIndexInner]];\r\n                        const {warp} = wedges[wedgeIndexInner];\r\n                        let wallY: boolean;\r\n                        let wallX: boolean;\r\n                        let body: boolean;\r\n                        let warpY: Warp;\r\n                        let warpX: Warp;\r\n                        const nextWarpCount = wedges[wedgeIndexInner].warpCount + 1;\r\n\r\n                        if (typeof warp === 'undefined') {\r\n                            wallY = (this._tileFlags[mapIndex] & farYFlag) !== 0;\r\n                            wallX = (this._tileFlags[mapIndex] & farXFlag) !== 0;\r\n                            body = (dx !== 0 || dy !== 0) && (this._tileFlags[mapIndex] & TileFlag.BODY) !== 0;\r\n                            warpY = this._warps[yWarps[mapIndex]];\r\n                            warpX = this._warps[xWarps[mapIndex]];\r\n                        } else {\r\n                            const {map, offset} = warp;\r\n                            LOCAL_OFF.copyFrom(offset).add(startX + dx * xDir, startY + dy * yDir);\r\n                            wallY = map._getFlag(LOCAL_OFF, farYFlag);\r\n                            wallX = map._getFlag(LOCAL_OFF, farXFlag);\r\n                            body = (dx !== 0 || dy !== 0) && map._getFlag(LOCAL_OFF, TileFlag.BODY);\r\n                            warpY = map._getWarp(LOCAL_OFF, yWarpDir);\r\n                            warpX = map._getWarp(LOCAL_OFF, xWarpDir);\r\n                        }\r\n\r\n                        if (wallX && wallY) {\r\n                            // this tile has both far walls\r\n                            // so we can't see beyond it and the whole range should be cut out of the wedge(s)\r\n                            newWedges = cutWedges(newWedges, slopeY - WALL_EPSILON, slopeX + WALL_EPSILON);\r\n                        } else if (wallX) {\r\n                            if (typeof warpY !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeY - WARP_EPSILON, slopeFar + WARP_EPSILON, warpY, nextWarpCount);\r\n                            }\r\n                            if (body) {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY + BODY_EPSILON, slopeX + WALL_EPSILON);\r\n                            } else {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeFar - WALL_EPSILON, slopeX + WALL_EPSILON);\r\n                            }\r\n                        } else if (wallY) {\r\n                            if (body) {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY - WALL_EPSILON, slopeX - BODY_EPSILON);\r\n                            } else {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY - WALL_EPSILON, slopeFar + WALL_EPSILON);\r\n                            }\r\n                            if (typeof warpX !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeFar - WARP_EPSILON, slopeX + WARP_EPSILON, warpX, nextWarpCount);\r\n                            }\r\n                        } else {\r\n                            if (typeof warpY !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeY - WARP_EPSILON, slopeFar + WARP_EPSILON, warpY, nextWarpCount);\r\n                            }\r\n                            if (body) {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY + BODY_EPSILON, slopeX - BODY_EPSILON);\r\n                            }\r\n                            if (typeof warpX !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeFar - WARP_EPSILON, slopeX + WARP_EPSILON, warpX, nextWarpCount);\r\n                            }\r\n                        }\r\n\r\n                        if (newWedges.length !== 1) {\r\n                            wedges.splice(wedgeIndexInner, 1, ...newWedges);\r\n                        }\r\n                        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n                        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n                        wedgeIndexInner = wedgeIndexInner + newWedges.length;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as geom from './geom';\r\nimport {FieldOfViewMap} from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\n/**\r\n * These flags determine whether a given tile has walls in any of the cardinal\r\n * directions, and whether there is a \"body\" in the tile.\r\n */\r\nexport enum TileFlag {\r\n    WALL_NORTH = 1 << geom.Direction.NORTH,\r\n    WALL_EAST  = 1 << geom.Direction.EAST,\r\n    WALL_WEST  = 1 << geom.Direction.WEST,\r\n    WALL_SOUTH = 1 << geom.Direction.SOUTH,\r\n    BODY       = 1 << geom.DIRECTIONS.length,\r\n}\r\n\r\nexport interface Warp {\r\n    map: FieldOfViewMap;\r\n    offset: geom.Offset;\r\n}\r\n\r\n/**\r\n * In the shadowcasting algorithm, each shadow is represented by a \"wedge\",\r\n * running from a \"low\" angle to a \"high\" angle.  To support warps, we also\r\n * track for each wedge a map (if we've gone through a warp), and an offset\r\n * (the location within the target map relative to the player's location in\r\n * the source map).\r\n */\r\nexport interface Wedge {\r\n    low: number;\r\n    high: number;\r\n    warp: Warp | undefined;\r\n    warpCount: number;\r\n}\r\n\r\n// istanbul ignore next\r\nfunction rangeToString(low: number, high: number) {\r\n    return `${low.toFixed(7)}-${high.toFixed(7)}`;\r\n}\r\n\r\n// istanbul ignore next\r\nfunction wedgeToString(wedge: Wedge) {\r\n    return `{${rangeToString(wedge.low, wedge.high)}`\r\n        + `${typeof wedge.warp !== 'undefined' ? `~${wedge.warp.map.id}` : ''}}`;\r\n}\r\n\r\n// istanbul ignore next\r\nfunction wedgesToString(wedges: Wedge[]) {\r\n    return `[${wedges.map(wedgeToString).join(', ')}]`;\r\n}\r\n\r\n/**\r\n * Bodies in this algorithm do not entirely fill their tiles.  This is\r\n * implemented by adjusting the angles of the shadows the bodies cast,\r\n * making the wedge very slightly narrower.  BODY_EPSILON represents the\r\n * amount of reduction on either side of the wedge.\r\n */\r\nexport const BODY_EPSILON = 0.00001;\r\n\r\n/**\r\n * Walls do fill the entire tile edge.  With infinite precision, there would be\r\n * no need to adjust the shadow cast by a wall.  But we're using floating point\r\n * math here, which means imprecision can creep in and cause angles not to line\r\n * up properly.  To fix that, we widen the wedges of the shadows cast by walls.\r\n * We must make sure not to widen them as much as we narrow the body shadows,\r\n * or else they might close the gap we want between a body and a wall.\r\n */\r\nexport const WALL_EPSILON = BODY_EPSILON / 4;\r\n\r\n/**\r\n * Warps also fill the entire tile edge.  But we don't extend warps as much as\r\n * walls, just in case a sliver of warp might make it past a wall on the other\r\n * side of the warp, at the edge of the warp range.\r\n */\r\nexport const WARP_EPSILON = WALL_EPSILON / 4;\r\n\r\nconst DEBUG_CUTWEDGE = false;\r\n\r\n/**\r\n * This function cuts a range of angles out of a wedge.\r\n */\r\nexport function cutWedge(wedge: Wedge, low: number, high: number): Wedge[] {\r\n    // istanbul ignore next\r\n    if (DEBUG_CUTWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`cut ${wedgeToString(wedge)} ${rangeToString(low, high)}`);\r\n    }\r\n    let ret: Wedge[];\r\n    if (low <= wedge.low) {\r\n        if (high >= wedge.high) {\r\n            // wedge is entirely occluded, remove it\r\n            ret = [];\r\n        } else if (high >= wedge.low) {\r\n            // low part of wedge is occluded, trim it\r\n            wedge.low = high;\r\n            ret = [wedge];\r\n        } else {\r\n            // cut doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else if (high >= wedge.high) {\r\n        if (low <= wedge.high) {\r\n            // high part of wedge is occluded, trim it\r\n            wedge.high = low;\r\n            ret = [wedge];\r\n        } else {\r\n            // cut doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else {\r\n        // middle part of wedge is occluded, split it\r\n        const nextWedge = {\r\n            low: high,\r\n            high: wedge.high,\r\n            warp: wedge.warp,\r\n            warpCount: wedge.warpCount,\r\n        };\r\n        wedge.high = low;\r\n        ret = [wedge, nextWedge];\r\n    }\r\n    // istanbul ignore next\r\n    if (DEBUG_CUTWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`--> ${wedgesToString(ret)}`);\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function cutWedges(wedges: Wedge[], low: number, high: number): Wedge[] {\r\n    const ret = new Array<Wedge>();\r\n    for (const wedge of wedges) {\r\n        ret.push(...cutWedge(wedge, low, high));\r\n    }\r\n    return ret;\r\n}\r\n\r\nconst DEBUG_WARPWEDGE = false;\r\n\r\nexport function warpWedge(wedge: Wedge, low: number, high: number, warp: Warp, warpCount: number): Wedge[] {\r\n    // istanbul ignore next\r\n    if (DEBUG_WARPWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`warp ${wedgeToString(wedge)} ${rangeToString(low, high)} ${warp.map.id}`);\r\n    }\r\n    let ret: Wedge[];\r\n    if (low <= wedge.low) {\r\n        if (high >= wedge.high) {\r\n            // wedge is entirely warped\r\n            wedge.warp = warp;\r\n            wedge.warpCount = warpCount;\r\n            ret = [wedge];\r\n        } else if (high >= wedge.low) {\r\n            // low part of wedge is warped, split it into two\r\n            const nextWedge = {\r\n                low: high,\r\n                high: wedge.high,\r\n                warp: wedge.warp,\r\n                warpCount: wedge.warpCount,\r\n            };\r\n            wedge.high = high;\r\n            wedge.warp = warp;\r\n            wedge.warpCount = warpCount;\r\n            ret = [wedge, nextWedge];\r\n        } else {\r\n            // warp doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else if (high >= wedge.high) {\r\n        if (low <= wedge.high) {\r\n            // high part of wedge is occluded, split it into two\r\n            const nextWedge = {\r\n                low,\r\n                high: wedge.high,\r\n                warp,\r\n                warpCount,\r\n            };\r\n            wedge.high = low;\r\n            ret = [wedge, nextWedge];\r\n        } else {\r\n            // warp doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else {\r\n        // middle part of wedge is occluded, split it into three\r\n        const middleWedge = {\r\n            low,\r\n            high,\r\n            warp,\r\n            warpCount,\r\n        };\r\n        const highWedge = {\r\n            low: high,\r\n            high: wedge.high,\r\n            warp: wedge.warp,\r\n            warpCount: wedge.warpCount,\r\n        };\r\n        wedge.high = low;\r\n        ret = [wedge, middleWedge, highWedge];\r\n    }\r\n    // istanbul ignore next\r\n    if (DEBUG_WARPWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`--> ${wedgesToString(ret)}`);\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function warpWedges(wedges: Wedge[], low: number, high: number, warp: Warp, warpCount: number): Wedge[] {\r\n    const ret = new Array<Wedge>();\r\n    for (const wedge of wedges) {\r\n        ret.push(...warpWedge(wedge, low, high, warp, warpCount));\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function whichWedge(wedges: Wedge[], wedgeIndex: number, centerSlope: number) {\r\n    // determine the wedge containing centerSlope,\r\n    // or if there isn't one, then the one nearest to centerSlope\r\n    // or if two are very close, the one with the least warp count\r\n    // or if they both have the same warp count, the one with the lowest map id\r\n    let cur = wedgeIndex;\r\n    // skip to the next wedge while it starts before before centerSlope\r\n    while (cur < wedges.length - 1 && wedges[cur + 1].low < centerSlope - WALL_EPSILON * 2) {\r\n        cur ++;\r\n    }\r\n    if (cur >= wedges.length - 1 || wedges[cur].high > centerSlope + WALL_EPSILON * 2) {\r\n        // the current wedge contains centerSlope or is past it, so this is the closest\r\n        return cur;\r\n    } else if (wedges[cur].high < centerSlope - WALL_EPSILON * 2) {\r\n        // the current wedge isn't very close to centerSlope\r\n        // choose the closest one\r\n        if (Math.abs(wedges[cur].high - centerSlope) < Math.abs(wedges[cur + 1].low - centerSlope)) {\r\n            return cur;\r\n        } else {\r\n            return cur + 1;\r\n        }\r\n    } else {\r\n        // the current wedge is very close to centerSlope\r\n        if (wedges[cur + 1].low < centerSlope + WALL_EPSILON * 2) {\r\n            // the next wedge is very close to centerSlope too\r\n            // compare warp counts\r\n            if (wedges[cur].warpCount < wedges[cur + 1].warpCount) {\r\n                return cur;\r\n            } else if (wedges[cur].warpCount > wedges[cur + 1].warpCount) {\r\n                return cur + 1;\r\n            } else {\r\n                // same warp count\r\n                // compare map ids\r\n                if (wedges[cur].warp.map.id < wedges[cur + 1].warp.map.id) {\r\n                    return cur;\r\n                } else {\r\n                    return cur + 1;\r\n                }\r\n            }\r\n        } else {\r\n            // the next wedge isn't very close to centerSlope, use the current one\r\n            return cur;\r\n        }\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\nexport enum DirectionFlags {\r\n    NONE  = 0,\r\n    NORTH = 1,\r\n    EAST  = 2,\r\n    SOUTH = 4,\r\n    WEST  = 8,\r\n    ALL   = 15,\r\n}\r\n\r\nexport function directionFlagsToString(flags: DirectionFlags) {\r\n    let ret = '[';\r\n    if ((flags & DirectionFlags.NORTH) !== 0) {\r\n        ret += 'N';\r\n    }\r\n    if ((flags & DirectionFlags.EAST) !== 0) {\r\n        ret += 'E';\r\n    }\r\n    if ((flags & DirectionFlags.SOUTH) !== 0) {\r\n        ret += 'S';\r\n    }\r\n    if ((flags & DirectionFlags.WEST) !== 0) {\r\n        ret += 'W';\r\n    }\r\n    return ret + ']';\r\n}\r\n\r\n// conversion\r\n\r\nexport function directionFlagsFromDirection(dir: geom.Direction) {\r\n    return (1 << dir) as DirectionFlags;\r\n}\r\n","// tslint:disable:no-bitwise\r\n\r\nexport enum Direction {\r\n    NORTH = 0,\r\n    EAST  = 1,\r\n    SOUTH = 2,\r\n    WEST  = 3,\r\n}\r\n\r\nexport const DIRECTIONS = [\r\n    Direction.NORTH,\r\n    Direction.EAST,\r\n    Direction.SOUTH,\r\n    Direction.WEST,\r\n];\r\n\r\nconst DIRECTIONS_STR = [\r\n    'N',\r\n    'E',\r\n    'S',\r\n    'W',\r\n];\r\n\r\nexport function directionToString(dir: Direction) {\r\n    return DIRECTIONS_STR[dir];\r\n}\r\n\r\nexport function directionOpposite(dir: Direction) {\r\n    return ((dir + 2) & 3) as Direction;\r\n}\r\n","export * from './direction';\r\nexport * from './direction-flags';\r\nexport * from './offset';\r\nexport * from './size';\r\nexport * from './rectangle';\r\nexport * from './mask';\r\n","import * as geom from '.';\r\n\r\nexport class Mask implements geom.SizeLike {\r\n    private readonly _size = new geom.Size();\r\n    private readonly _bits: boolean[];\r\n    // TODO consider Uint8Array for bits\r\n\r\n    constructor(size: geom.SizeLike, initialValue = false) {\r\n        this._size.copyFrom(size);\r\n        this._bits = new Array<boolean>(this._size.area).fill(initialValue);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        let ret = '';\r\n        const off = new geom.Offset();\r\n        for (let y = 0; y < this._size.height; y ++) {\r\n            for (let x = 0; x < this._size.width; x ++) {\r\n                off.set(x, y);\r\n                ret += this.get(off.set(x, y)) ? '☑' : '☐';\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    get width() {\r\n        return this._size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._size.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this._size.index(off);\r\n    }\r\n\r\n    getAt(index: number) {\r\n        return this._bits[index];\r\n    }\r\n\r\n    get(off: geom.OffsetLike) {\r\n        return this.getAt(this.index(off));\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean) {\r\n        this._bits[index] = value;\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean) {\r\n        return this.setAt(this.index(off), value);\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nconst X_FROM_DIRECTION = [  0, 1, 0, -1 ];\r\nconst Y_FROM_DIRECTION = [ -1, 0, 1,  0 ];\r\n\r\nexport interface OffsetLike {\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\nexport class Offset implements OffsetLike {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor();\r\n    constructor(x: number, y: number);\r\n    constructor(x?: number, y?: number) {\r\n        if (typeof x === 'undefined') {\r\n            x = 0;\r\n        }\r\n        if (typeof y === 'undefined') {\r\n            y = 0;\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.x},${this.y})`;\r\n    }\r\n\r\n    equals(other: OffsetLike) {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    // chebyshev: can move in any direction (diagonals are ok)\r\n    get magnitudeChebyshev() {\r\n        return Math.max(Math.abs(this.x), Math.abs(this.y));\r\n    }\r\n\r\n    // manhattan: can move only in cardinal directions (no diagonals)\r\n    get magnitudeManhattan(): number {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: OffsetLike) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        return this;\r\n    }\r\n\r\n    setFromDirection(dir: geom.Direction) {\r\n        this.x = X_FROM_DIRECTION[dir];\r\n        this.y = Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    add(x: number, y: number) {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n\r\n    addSize(size: geom.SizeLike) {\r\n        this.x += size.width;\r\n        this.y += size.height;\r\n        return this;\r\n    }\r\n\r\n    addOffset(off: OffsetLike) {\r\n        this.x += off.x;\r\n        this.y += off.y;\r\n        return this;\r\n    }\r\n\r\n    addDirection(dir: geom.Direction) {\r\n        this.x += X_FROM_DIRECTION[dir];\r\n        this.y += Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    addCardinalDirection(dir: geom.Direction) {\r\n        this.x += X_FROM_DIRECTION[dir];\r\n        this.y += Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    subtractOffset(off: OffsetLike) {\r\n        this.x -= off.x;\r\n        this.y -= off.y;\r\n        return this;\r\n    }\r\n\r\n    multiply(factor: number) {\r\n        this.x *= factor;\r\n        this.y *= factor;\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    // chebyshev: can move in any direction (diagonals are ok)\r\n    distanceChebyshev(other: OffsetLike) {\r\n        return this.subtractOffset(other).magnitudeChebyshev;\r\n    }\r\n\r\n    // manhattan: can move only in cardinal directions (no diagonals)\r\n    distanceManhattan(other?: OffsetLike): number {\r\n        return this.subtractOffset(other).magnitudeManhattan;\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport interface RectangleLike extends geom.SizeLike {\r\n    readonly westX: number;\r\n    readonly northY: number;\r\n}\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport class Rectangle implements RectangleLike, geom.SizeLike {\r\n    northWest: geom.Offset;\r\n    size: geom.Size;\r\n\r\n    constructor();\r\n    constructor(westX: number, northY: number, width: number, height: number);\r\n    constructor(westX?: number, northY?: number, width?: number, height?: number) {\r\n        if (typeof westX === 'undefined') {\r\n            westX = 0;\r\n        }\r\n        if (typeof northY === 'undefined') {\r\n            northY = 0;\r\n        }\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.northWest = new geom.Offset(westX, northY);\r\n        this.size = new geom.Size(width, height);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.westX},${this.northY} ${this.width}x${this.height})`;\r\n    }\r\n\r\n    equals(other: RectangleLike) {\r\n        return this.westX === other.westX && this.northY === other.northY && this.size.equals(other);\r\n    }\r\n\r\n    get northY() {\r\n        return this.northWest.y;\r\n    }\r\n\r\n    get southY() {\r\n        return this.northWest.y + this.size.height - 1;\r\n    }\r\n\r\n    get westX() {\r\n        return this.northWest.x;\r\n    }\r\n\r\n    get eastX() {\r\n        return this.northWest.x + this.size.width - 1;\r\n    }\r\n\r\n    get width() {\r\n        return this.size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this.size.height;\r\n    }\r\n\r\n    get empty() {\r\n        return this.size.empty;\r\n    }\r\n\r\n    get area() {\r\n        return this.size.area;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(westX: number, northY: number, width: number, height: number) {\r\n        this.northWest.set(westX, northY);\r\n        this.size.set(width, height);\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: RectangleLike) {\r\n        this.northWest.set(other.westX, other.northY);\r\n        this.size.set(other.width, other.height);\r\n        return this;\r\n    }\r\n\r\n    extendToInclude(off: geom.OffsetLike) {\r\n        const dx = off.x - this.westX;\r\n        if (dx < 0) {\r\n            this.size.width -= dx;\r\n            this.northWest.x = off.x;\r\n        } else if (dx >= this.size.width) {\r\n            this.size.width = dx + 1;\r\n        }\r\n        const dy = off.y - this.northWest.y;\r\n        if (dy < 0) {\r\n            this.size.height -= dy;\r\n            this.northWest.y = off.y;\r\n        } else if (dy >= this.size.height) {\r\n            this.size.height = dy + 1;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return this.size.containsOffset(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n\r\n    containsRectangle(other: RectangleLike) {\r\n        LOCAL_OFF.set(other.westX, other.northY).subtractOffset(this.northWest);\r\n        if (!this.size.containsOffset(LOCAL_OFF)) {\r\n            return false;\r\n        }\r\n        if (other.width === 0 && other.height === 0) {\r\n            return false;\r\n        }\r\n        return this.size.containsOffset(LOCAL_OFF.add(other.width - 1, other.height - 1));\r\n    }\r\n\r\n    overlapsRectangle(other: RectangleLike) {\r\n        return this.northY <= other.northY + other.height - 1\r\n            && this.southY >= other.northY\r\n            && this.westX <= other.westX + other.width - 1\r\n            && this.eastX >= other.westX\r\n            && !this.empty\r\n            && other.width !== 0 && other.height !== 0;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this.size.index(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport interface SizeLike {\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport class Size implements SizeLike {\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor();\r\n    constructor(width: number, height: number);\r\n    constructor(width?: number, height?: number) {\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.width}x${this.height})`;\r\n    }\r\n\r\n    equals(other: SizeLike) {\r\n        return this.width === other.width && this.height === other.height;\r\n    }\r\n\r\n    get empty() {\r\n        return this.width === 0 || this.height === 0;\r\n    }\r\n\r\n    get area() {\r\n        return this.width * this.height;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: SizeLike) {\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n        return this;\r\n    }\r\n\r\n    add(width: number, height: number) {\r\n        this.width += width;\r\n        this.height += height;\r\n        return this;\r\n    }\r\n\r\n    addOffset(off: geom.OffsetLike) {\r\n        this.width += off.x;\r\n        this.height += off.y;\r\n        return this;\r\n    }\r\n\r\n    multiply(factor: number) {\r\n        this.width *= factor;\r\n        this.height *= factor;\r\n        return this;\r\n    }\r\n\r\n    // TODO: rotate\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return off.x >= 0 && off.y >= 0 && off.x < this.width && off.y < this.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return off.y * this.width + off.x;\r\n    }\r\n}\r\n","/*\r\n *  WarpField\r\n *  github.com/sbj42/warp-field\r\n *  James Clark\r\n *  Licensed under the MIT license.\r\n */\r\n\r\nexport {FieldOfViewMap} from './field-of-view';\r\nexport {Warp} from './fov-util';\r\nexport {WarpRect} from './warp-rect';\r\nexport {Direction, DirectionFlags, Offset} from './geom';\r\n","import * as geom from './geom';\r\nimport {FieldOfViewMap} from '.';\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport interface Warp {\r\n    map: FieldOfViewMap;\r\n    offset: geom.Offset;\r\n}\r\n\r\nimport {Offset} from './geom';\r\n\r\nexport class WarpRect implements geom.RectangleLike {\r\n    private readonly _rectangle = new geom.Rectangle();\r\n    private readonly _mask: geom.Mask;\r\n    private readonly _warps: Warp[];\r\n\r\n    constructor(rect: geom.RectangleLike, initialValue = false) {\r\n        this._rectangle.copyFrom(rect);\r\n        this._mask = new geom.Mask(rect, initialValue);\r\n        this._warps = new Array<Warp>(this._rectangle.area);\r\n    }\r\n\r\n    private _warpsToString() {\r\n        let ret = '';\r\n        const off = new geom.Offset();\r\n        for (let y = 0; y < this._rectangle.height; y ++) {\r\n            for (let x = 0; x < this._rectangle.width; x ++) {\r\n                off.set(x, y).addOffset(this._rectangle.northWest);\r\n                if (this.getMask(off.x, off.y)) {\r\n                    const warp = this._getWarp(off);\r\n                    if (typeof warp === 'undefined') {\r\n                        ret += '-';\r\n                    } else {\r\n                        ret += warp.map.id[0];\r\n                    }\r\n                } else {\r\n                    ret += '.';\r\n                }\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    private _getWarpAt(index: number) {\r\n        return this._warps[index];\r\n    }\r\n\r\n    private _getWarp(off: geom.OffsetLike) {\r\n        return this._warps[this._rectangle.index(off)];\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `${this._rectangle.northWest}\\n${this._warpsToString()}`;\r\n    }\r\n\r\n    get westX() {\r\n        return this._rectangle.westX;\r\n    }\r\n\r\n    get northY() {\r\n        return this._rectangle.northY;\r\n    }\r\n\r\n    get width() {\r\n        return this._rectangle.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._rectangle.height;\r\n    }\r\n\r\n    index(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y).subtractOffset(this._rectangle.northWest);\r\n        return this._mask.index(LOCAL_OFF);\r\n    }\r\n\r\n    getMaskAt(index: number) {\r\n        return this._mask.getAt(index);\r\n    }\r\n\r\n    getMask(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        if (!this._rectangle.containsOffset(LOCAL_OFF)) {\r\n            return false;\r\n        }\r\n        return this._mask.getAt(this._rectangle.index(LOCAL_OFF));\r\n    }\r\n\r\n    getMapAt(index: number) {\r\n        const warp = this._getWarpAt(index);\r\n        if (warp) {\r\n            return warp.map;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getMap(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const warp = this._getWarp(LOCAL_OFF);\r\n        if (warp) {\r\n            return warp.map;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getOffsetAt(index: number): Offset {\r\n        const warp = this._getWarpAt(index);\r\n        if (warp) {\r\n            return warp.offset;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getOffset(x: number, y: number): Offset {\r\n        LOCAL_OFF.set(x, y);\r\n        const warp = this._getWarp(LOCAL_OFF);\r\n        if (warp) {\r\n            return warp.offset;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean, warp: Warp | undefined) {\r\n        this._mask.setAt(index, value);\r\n        this._warps[index] = warp;\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean, warp: Warp | undefined) {\r\n        this._mask.setAt(this._rectangle.index(off), value);\r\n        this._warps[this._rectangle.index(off)] = warp;\r\n        return this;\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(607);\n"],"sourceRoot":""}