{"version":3,"sources":["webpack:///warp-field-0.1.0.min.js","webpack:///webpack/bootstrap 9a5926d547c7596f8f3b","webpack:///./src/geom/index.ts","webpack:///./src/index.ts","webpack:///./src/field-of-view.ts","webpack:///./src/warp-rect.ts","webpack:///./src/fov-util.ts","webpack:///./src/geom/direction-flags.ts","webpack:///./src/geom/direction.ts","webpack:///./src/geom/mask-rect.ts","webpack:///./src/geom/mask.ts","webpack:///./src/geom/offset.ts","webpack:///./src/geom/rectangle.ts","webpack:///./src/geom/size.ts"],"names":["WarpField","modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__export","field_of_view_1","FieldOfViewMap","warp_rect_1","WarpRect","geom_1","Direction","DirectionFlags","Offset","geom","fov_util_1","_1","LOCAL_OFF","id","width","height","addEdgeWalls","_this","this","_size","Size","_warps","Array","set","_tileFlags","area","fill","y","_addFlag","TileFlag","WALL_WEST","WALL_EAST","x","WALL_NORTH","WALL_SOUTH","_tileWarpIds","DIRECTIONS","map","off","flag","index","_removeFlag","_getFlag","_findOrMakeWarp","offset","id_1","length","warp_1","equals","warp","copyFrom","push","_addWarp","dir","warpId","_removeWarp","_getWarp","addWall","oneWay","addCardinalDirection","containsOffset","directionOpposite","removeWall","getWalls","ALL","addBody","BODY","removeBody","getBody","addWarp","sourceX","sourceY","targetMap","targetX","targetY","removeWarp","getWarpFlags","ret","forEach","getFieldOfView","chebyshevRadius","origin","boundRect","Rectangle","mask","undefined","_quadrant","xDir","yDir","startX","startY","endDXY","farYFlag","farXFlag","yWarpDir","NORTH","SOUTH","yWarps","xWarpDir","WEST","EAST","xWarps","startMapIndex","startMaskIndex","wedges","low","high","Number","POSITIVE_INFINITY","warpCount","dy","yMapIndex","yMaskIndex","divYpos","divYneg","divYmid","wedgeIndex","dx","mapIndex","maskIndex","slopeY","slopeX","slopeFar","slopeMid","centerWedge","whichWedge","setAt","wedgeIndexInner","newWedges","wallY","wallX","body","warpY","warpX","nextWarpCount","add","cutWedges","WALL_EPSILON","warpWedges","BODY_EPSILON","splice","apply","concat","rect","initialValue","outsideValue","_rectangle","_mask","Mask","_warpsToString","addOffset","northWest","getMask","_getWarpAt","toString","westX","northY","subtractOffset","getMaskAt","getAt","getMapIdAt","getMap","getOffsetAt","getOffset","rangeToString","toFixed","wedgeToString","wedge","wedgesToString","join","cutWedge","DEBUG_CUTWEDGE","console","info","nextWedge","_i","wedges_1","warpWedge","DEBUG_WARPWEDGE","middleWedge","highWedge","wedges_2","centerSlope","cur","Math","abs","directionFlagsToString","flags","directionFlagsFromDirection","directionToString","DIRECTIONS_STR","MaskRect","_outsideValue","size","_bits","X_FROM_DIRECTION","Y_FROM_DIRECTION","other","max","setFromDirection","addSize","addDirection","multiply","factor","distanceChebyshev","magnitudeChebyshev","distanceManhattan","magnitudeManhattan","empty","extendToInclude","containsRectangle","overlapsRectangle","southY","eastX"],"mappings":"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","file":"warp-field-0.1.0.min.js","sourcesContent":["var WarpField =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/bin/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(6));\n__export(__webpack_require__(5));\n__export(__webpack_require__(9));\n__export(__webpack_require__(11));\n__export(__webpack_require__(10));\n__export(__webpack_require__(8));\n__export(__webpack_require__(7));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/*\n *  WallyFOV\n *  github.com/sbj42/WallyFOV\n *  James Clark\n *  Licensed under the MIT license.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar field_of_view_1 = __webpack_require__(2);\nexports.FieldOfViewMap = field_of_view_1.FieldOfViewMap;\nvar warp_rect_1 = __webpack_require__(3);\nexports.WarpRect = warp_rect_1.WarpRect;\nvar geom_1 = __webpack_require__(0);\nexports.Direction = geom_1.Direction;\nexports.DirectionFlags = geom_1.DirectionFlags;\nexports.Offset = geom_1.Offset;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar geom = __webpack_require__(0);\nvar fov_util_1 = __webpack_require__(4);\nvar _1 = __webpack_require__(1);\n// tslint:disable:no-bitwise\n/**\n * We avoid heap allocations during the core part of the algorithm by using this\n * preallocated offset object.\n */\nvar LOCAL_OFF = new geom.Offset();\n/**\n * The FieldOFViewMap represents the map over which the field of view will be\n * computed.  It start out empty.  You can add walls and bodies to it, and then\n * use getFieldOfView() to compute the field of view from a given point.\n */\nvar FieldOfViewMap = (function () {\n    function FieldOfViewMap(id, width, height, addEdgeWalls) {\n        if (addEdgeWalls === void 0) { addEdgeWalls = false; }\n        var _this = this;\n        this._size = new geom.Size();\n        this._warps = new Array();\n        this.id = id;\n        this._size.set(width, height);\n        this._tileFlags = new Array(this._size.area).fill(0);\n        if (addEdgeWalls) {\n            for (var y = 0; y < this._size.height; y++) {\n                this._addFlag(LOCAL_OFF.set(0, y), fov_util_1.TileFlag.WALL_WEST);\n                this._addFlag(LOCAL_OFF.set(this._size.width - 1, y), fov_util_1.TileFlag.WALL_EAST);\n            }\n            for (var x = 0; x < this._size.width; x++) {\n                this._addFlag(LOCAL_OFF.set(x, 0), fov_util_1.TileFlag.WALL_NORTH);\n                this._addFlag(LOCAL_OFF.set(x, this._size.height - 1), fov_util_1.TileFlag.WALL_SOUTH);\n            }\n        }\n        this._tileWarpIds = geom.DIRECTIONS.map(function () { return new Array(_this._size.area).fill(-1); });\n    }\n    FieldOfViewMap.prototype._addFlag = function (off, flag) {\n        var index = this._size.index(off);\n        this._tileFlags[index] |= flag;\n    };\n    FieldOfViewMap.prototype._removeFlag = function (off, flag) {\n        var index = this._size.index(off);\n        this._tileFlags[index] &= ~flag;\n    };\n    FieldOfViewMap.prototype._getFlag = function (off, flag) {\n        var index = this._size.index(off);\n        return (this._tileFlags[index] & flag) !== 0;\n    };\n    FieldOfViewMap.prototype._findOrMakeWarp = function (map, offset) {\n        for (var id_1 = 0; id_1 < this._warps.length; id_1++) {\n            var warp_1 = this._warps[id_1];\n            if (warp_1.map === map && warp_1.offset.equals(offset)) {\n                return id_1;\n            }\n        }\n        var warp = {\n            map: map,\n            offset: new geom.Offset().copyFrom(offset),\n        };\n        var id = this._warps.length;\n        this._warps.push(warp);\n        return id;\n    };\n    FieldOfViewMap.prototype._addWarp = function (off, dir, warpId) {\n        var index = this._size.index(off);\n        this._tileWarpIds[dir][index] = warpId;\n    };\n    FieldOfViewMap.prototype._removeWarp = function (off, dir) {\n        var index = this._size.index(off);\n        delete this._tileWarpIds[dir][index];\n    };\n    FieldOfViewMap.prototype._getWarp = function (off, dir) {\n        var index = this._size.index(off);\n        var warpId = this._tileWarpIds[dir][index];\n        if (warpId === -1) {\n            return undefined;\n        }\n        else {\n            return this._warps[warpId];\n        }\n    };\n    // setup and maintenance\n    /**\n     * Adds a wall at a particular edge.  This automatically adds the\n     * corresponding wall on the other side.\n     */\n    FieldOfViewMap.prototype.addWall = function (x, y, dir, oneWay) {\n        if (oneWay === void 0) { oneWay = false; }\n        LOCAL_OFF.set(x, y);\n        this._addFlag(LOCAL_OFF, 1 << dir);\n        LOCAL_OFF.addCardinalDirection(dir);\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\n            this._addFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\n        }\n    };\n    /**\n     * Removes a wall at a particular edge.  This automatically removes the\n     * corresponding wall on the other side.\n     */\n    FieldOfViewMap.prototype.removeWall = function (x, y, dir, oneWay) {\n        if (oneWay === void 0) { oneWay = false; }\n        LOCAL_OFF.set(x, y);\n        this._removeFlag(LOCAL_OFF, 1 << dir);\n        LOCAL_OFF.addCardinalDirection(dir);\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\n            this._removeFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\n        }\n    };\n    FieldOfViewMap.prototype.getWalls = function (x, y) {\n        LOCAL_OFF.set(x, y);\n        var index = this._size.index(LOCAL_OFF);\n        return this._tileFlags[index] & geom.DirectionFlags.ALL;\n    };\n    FieldOfViewMap.prototype.addBody = function (x, y) {\n        LOCAL_OFF.set(x, y);\n        this._addFlag(LOCAL_OFF, fov_util_1.TileFlag.BODY);\n    };\n    FieldOfViewMap.prototype.removeBody = function (x, y) {\n        LOCAL_OFF.set(x, y);\n        this._removeFlag(LOCAL_OFF, fov_util_1.TileFlag.BODY);\n    };\n    FieldOfViewMap.prototype.getBody = function (x, y) {\n        LOCAL_OFF.set(x, y);\n        var index = this._size.index(LOCAL_OFF);\n        return this._tileFlags[index] & fov_util_1.TileFlag.BODY;\n    };\n    // TODO add length argument\n    FieldOfViewMap.prototype.addWarp = function (sourceX, sourceY, dir, targetMap, targetX, targetY) {\n        LOCAL_OFF.set(targetX - sourceX, targetY - sourceY)\n            .addCardinalDirection(geom.directionOpposite(dir));\n        var warpId = this._findOrMakeWarp(targetMap, LOCAL_OFF);\n        LOCAL_OFF.set(sourceX, sourceY);\n        this._addWarp(LOCAL_OFF, dir, warpId);\n    };\n    // TODO add length argument\n    FieldOfViewMap.prototype.removeWarp = function (sourceX, sourceY, dir) {\n        LOCAL_OFF.set(sourceX, sourceY);\n        this._removeWarp(LOCAL_OFF, dir);\n    };\n    FieldOfViewMap.prototype.getWarpFlags = function (sourceX, sourceY) {\n        var _this = this;\n        LOCAL_OFF.set(sourceX, sourceY);\n        var ret = 0;\n        geom.DIRECTIONS.forEach(function (dir) {\n            if (_this._getWarp(LOCAL_OFF, dir)) {\n                ret |= 1 << dir;\n            }\n        });\n        return ret;\n    };\n    // execution\n    /**\n     * Compute the field of view for a camera at the given tile.\n     * chebyshevRadius is the vision radius.  It uses chebyshev distance\n     * (https://en.wikipedia.org/wiki/Chebyshev_distance), which just means\n     * that the limit of vision in a large empty field will be square.\n     *\n     * This returns a MaskRect, which indicates which tiles are visible.\n     * maskRect.get(x, y) will return true for visible tiles.\n     */\n    FieldOfViewMap.prototype.getFieldOfView = function (x, y, chebyshevRadius) {\n        var origin = new geom.Offset(x, y);\n        var boundRect = new geom.Rectangle().set(origin.x - chebyshevRadius, origin.y - chebyshevRadius, chebyshevRadius * 2 + 1, chebyshevRadius * 2 + 1);\n        var mask = new _1.WarpRect(boundRect);\n        // the player can always see itself\n        mask.set(origin, true, undefined);\n        // the field is divided into quadrants\n        this._quadrant(mask, origin, chebyshevRadius, -1, -1);\n        this._quadrant(mask, origin, chebyshevRadius, 1, -1);\n        this._quadrant(mask, origin, chebyshevRadius, -1, 1);\n        this._quadrant(mask, origin, chebyshevRadius, 1, 1);\n        return mask;\n    };\n    FieldOfViewMap.prototype._quadrant = function (mask, origin, chebyshevRadius, xDir, yDir) {\n        var startX = origin.x, startY = origin.y;\n        var endDXY = (chebyshevRadius + 1);\n        var farYFlag = [fov_util_1.TileFlag.WALL_NORTH, fov_util_1.TileFlag.WALL_SOUTH][(yDir + 1) / 2];\n        var farXFlag = [fov_util_1.TileFlag.WALL_WEST, fov_util_1.TileFlag.WALL_EAST][(xDir + 1) / 2];\n        var yWarpDir = [geom.Direction.NORTH, geom.Direction.SOUTH][(yDir + 1) / 2];\n        var yWarps = this._tileWarpIds[yWarpDir];\n        var xWarpDir = [geom.Direction.WEST, geom.Direction.EAST][(xDir + 1) / 2];\n        var xWarps = this._tileWarpIds[xWarpDir];\n        var startMapIndex = this._size.index(origin);\n        var startMaskIndex = mask.index(origin.x, origin.y);\n        // Initial wedge is from slope zero to slope infinity (i.e. the whole quadrant)\n        var wedges = [{\n                low: 0,\n                high: Number.POSITIVE_INFINITY,\n                warp: undefined,\n                warpCount: 0,\n            }];\n        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\n        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\n        for (var dy = 0, yMapIndex = startMapIndex, yMaskIndex = startMaskIndex; dy !== endDXY && wedges.length > 0; dy++, yMapIndex = yMapIndex + yDir * this._size.width, yMaskIndex = yMaskIndex + yDir * mask.width) {\n            var divYpos = 1 / (dy + 0.5);\n            var divYneg = dy === 0 ? Number.POSITIVE_INFINITY : 1 / (dy - 0.5);\n            var divYmid = 1 / dy;\n            var wedgeIndex = 0;\n            // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\n            // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\n            for (var dx = 0, mapIndex = yMapIndex, maskIndex = yMaskIndex, slopeY = -0.5 * divYpos, slopeX = 0.5 * divYneg, slopeFar = 0.5 * divYpos, slopeMid = 0; dx !== endDXY && wedgeIndex !== wedges.length; dx++, mapIndex = mapIndex + xDir, maskIndex = maskIndex + xDir,\n                slopeY = slopeY + divYpos, slopeX = slopeX + divYneg,\n                slopeFar = slopeFar + divYpos, slopeMid = slopeMid + divYmid) {\n                // the slopes of the four corners of this tile\n                // these are named as follows:\n                //   slopeY is the slope closest to the Y axis\n                //   slopeFar is the slope to the farthest corner\n                //   slopeMid is the slope to the center\n                //   slopeX is the slope closest to the X axis\n                // these are always true:\n                //   slopeY < slopeFar < slopeX\n                //   slopeY < slopeMid < slopeX\n                //\n                // O = origin, C = current\n                // +---+---+---+\n                // | O |   |   |\n                // +---+---+---X\n                // |   |   | C |\n                // +---+---Y---F\n                // the walls of this tile\n                // these are named as follows:\n                //   wallY is the farthest horizontal wall (slopeY to slopeFar)\n                //   wallX is the farthest vertical wall (slopeFar to slopeX)\n                //\n                // O = origin, C = current\n                // +---+---+---+\n                // | O |   |   |\n                // +---+---+---+\n                // |   |   | C X\n                // +---+---+-Y-+\n                // advance the wedge index until this tile is not after the current wedge\n                while (slopeY >= wedges[wedgeIndex].high) {\n                    wedgeIndex++;\n                    if (wedgeIndex >= wedges.length) {\n                        break;\n                    }\n                }\n                if (wedgeIndex >= wedges.length) {\n                    break;\n                }\n                // if the current wedge is after this tile, move on\n                if (slopeX <= wedges[wedgeIndex].low) {\n                    continue;\n                }\n                {\n                    var centerWedge = fov_util_1.whichWedge(wedges, wedgeIndex, slopeMid);\n                    mask.setAt(maskIndex, true, wedges[centerWedge].warp);\n                }\n                {\n                    var wedgeIndexInner = wedgeIndex;\n                    while (wedgeIndexInner < wedges.length && slopeX > wedges[wedgeIndexInner].low) {\n                        var newWedges = [wedges[wedgeIndexInner]];\n                        var warp = wedges[wedgeIndexInner].warp;\n                        var wallY = void 0;\n                        var wallX = void 0;\n                        var body = void 0;\n                        var warpY = void 0;\n                        var warpX = void 0;\n                        var nextWarpCount = wedges[wedgeIndexInner].warpCount + 1;\n                        if (typeof warp === 'undefined') {\n                            wallY = (this._tileFlags[mapIndex] & farYFlag) !== 0;\n                            wallX = (this._tileFlags[mapIndex] & farXFlag) !== 0;\n                            body = (dx !== 0 || dy !== 0) && (this._tileFlags[mapIndex] & fov_util_1.TileFlag.BODY) !== 0;\n                            warpY = this._warps[yWarps[mapIndex]];\n                            warpX = this._warps[xWarps[mapIndex]];\n                        }\n                        else {\n                            var map = warp.map, offset = warp.offset;\n                            LOCAL_OFF.copyFrom(offset).add(startX + dx * xDir, startY + dy * yDir);\n                            wallY = map._getFlag(LOCAL_OFF, fov_util_1.TileFlag.WALL_NORTH);\n                            wallX = map._getFlag(LOCAL_OFF, fov_util_1.TileFlag.WALL_WEST);\n                            body = (dx !== 0 || dy !== 0) && map._getFlag(LOCAL_OFF, fov_util_1.TileFlag.BODY);\n                            warpY = map._getWarp(LOCAL_OFF, yWarpDir);\n                            warpX = map._getWarp(LOCAL_OFF, xWarpDir);\n                        }\n                        if (wallX && wallY) {\n                            // this tile has both far walls\n                            // so we can't see beyond it and the whole range should be cut out of the wedge(s)\n                            newWedges = fov_util_1.cutWedges(newWedges, slopeY - fov_util_1.WALL_EPSILON, slopeX + fov_util_1.WALL_EPSILON);\n                        }\n                        else if (wallX) {\n                            if (typeof warpY !== 'undefined') {\n                                newWedges = fov_util_1.warpWedges(newWedges, slopeY - fov_util_1.WALL_EPSILON, slopeFar + fov_util_1.WALL_EPSILON, warpY, nextWarpCount);\n                            }\n                            if (body) {\n                                newWedges = fov_util_1.cutWedges(newWedges, slopeY + fov_util_1.BODY_EPSILON, slopeX + fov_util_1.WALL_EPSILON);\n                            }\n                            else {\n                                newWedges = fov_util_1.cutWedges(newWedges, slopeFar - fov_util_1.WALL_EPSILON, slopeX + fov_util_1.WALL_EPSILON);\n                            }\n                        }\n                        else if (wallY) {\n                            if (body) {\n                                newWedges = fov_util_1.cutWedges(newWedges, slopeY - fov_util_1.WALL_EPSILON, slopeX - fov_util_1.BODY_EPSILON);\n                            }\n                            else {\n                                newWedges = fov_util_1.cutWedges(newWedges, slopeY - fov_util_1.WALL_EPSILON, slopeFar + fov_util_1.WALL_EPSILON);\n                            }\n                            if (typeof warpX !== 'undefined') {\n                                newWedges = fov_util_1.warpWedges(newWedges, slopeFar - fov_util_1.WALL_EPSILON, slopeX + fov_util_1.WALL_EPSILON, warpX, nextWarpCount);\n                            }\n                        }\n                        else {\n                            if (typeof warpY !== 'undefined') {\n                                newWedges = fov_util_1.warpWedges(newWedges, slopeY - fov_util_1.WALL_EPSILON, slopeFar + fov_util_1.WALL_EPSILON, warpY, nextWarpCount);\n                            }\n                            if (body) {\n                                newWedges = fov_util_1.cutWedges(newWedges, slopeY + fov_util_1.BODY_EPSILON, slopeX - fov_util_1.BODY_EPSILON);\n                            }\n                            if (typeof warpX !== 'undefined') {\n                                newWedges = fov_util_1.warpWedges(newWedges, slopeFar - fov_util_1.WALL_EPSILON, slopeX + fov_util_1.WALL_EPSILON, warpX, nextWarpCount);\n                            }\n                        }\n                        if (newWedges.length !== 1) {\n                            wedges.splice.apply(wedges, [wedgeIndexInner, 1].concat(newWedges));\n                        }\n                        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\n                        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\n                        wedgeIndexInner = wedgeIndexInner + newWedges.length;\n                    }\n                }\n            }\n        }\n    };\n    return FieldOfViewMap;\n}());\nexports.FieldOfViewMap = FieldOfViewMap;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar geom = __webpack_require__(0);\nvar LOCAL_OFF = new geom.Offset();\nvar WarpRect = (function () {\n    function WarpRect(rect, initialValue, outsideValue) {\n        if (initialValue === void 0) { initialValue = false; }\n        if (outsideValue === void 0) { outsideValue = false; }\n        this._rectangle = new geom.Rectangle();\n        this._rectangle.copyFrom(rect);\n        this._mask = new geom.Mask(rect, initialValue);\n        this._warps = new Array(this._rectangle.area);\n    }\n    WarpRect.prototype._warpsToString = function () {\n        var ret = '';\n        var off = new geom.Offset();\n        for (var y = 0; y < this._rectangle.height; y++) {\n            for (var x = 0; x < this._rectangle.width; x++) {\n                off.set(x, y).addOffset(this._rectangle.northWest);\n                if (this.getMask(off.x, off.y)) {\n                    var warp = this._getWarp(off);\n                    if (typeof warp === 'undefined') {\n                        ret += '-';\n                    }\n                    else {\n                        ret += warp.map.id[0];\n                    }\n                }\n                else {\n                    ret += '.';\n                }\n            }\n            ret += '\\n';\n        }\n        return ret;\n    };\n    WarpRect.prototype._getWarpAt = function (index) {\n        return this._warps[index];\n    };\n    WarpRect.prototype._getWarp = function (off) {\n        return this._warps[this._rectangle.index(off)];\n    };\n    // accessors\n    WarpRect.prototype.toString = function () {\n        return this._rectangle.northWest + \"\\n\" + this._warpsToString();\n    };\n    Object.defineProperty(WarpRect.prototype, \"westX\", {\n        get: function () {\n            return this._rectangle.westX;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WarpRect.prototype, \"northY\", {\n        get: function () {\n            return this._rectangle.northY;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WarpRect.prototype, \"width\", {\n        get: function () {\n            return this._rectangle.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WarpRect.prototype, \"height\", {\n        get: function () {\n            return this._rectangle.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WarpRect.prototype.index = function (x, y) {\n        LOCAL_OFF.set(x, y).subtractOffset(this._rectangle.northWest);\n        return this._mask.index(LOCAL_OFF);\n    };\n    WarpRect.prototype.getMaskAt = function (index) {\n        return this._mask.getAt(index);\n    };\n    WarpRect.prototype.getMask = function (x, y) {\n        LOCAL_OFF.set(x, y);\n        if (!this._rectangle.containsOffset(LOCAL_OFF)) {\n            return false;\n        }\n        return this._mask.getAt(this._rectangle.index(LOCAL_OFF));\n    };\n    WarpRect.prototype.getMapIdAt = function (index) {\n        var warp = this._getWarpAt(index);\n        if (warp) {\n            return warp.map;\n        }\n        else {\n            return undefined;\n        }\n    };\n    WarpRect.prototype.getMap = function (x, y) {\n        LOCAL_OFF.set(x, y);\n        var warp = this._getWarp(LOCAL_OFF);\n        if (warp) {\n            return warp.map;\n        }\n        else {\n            return undefined;\n        }\n    };\n    WarpRect.prototype.getOffsetAt = function (index) {\n        var warp = this._getWarpAt(index);\n        if (warp) {\n            return warp.offset;\n        }\n        else {\n            return undefined;\n        }\n    };\n    WarpRect.prototype.getOffset = function (x, y) {\n        LOCAL_OFF.set(x, y);\n        var warp = this._getWarp(LOCAL_OFF);\n        if (warp) {\n            return warp.offset;\n        }\n        else {\n            return undefined;\n        }\n    };\n    // mutators\n    WarpRect.prototype.setAt = function (index, value, warp) {\n        this._mask.setAt(index, value);\n        this._warps[index] = warp;\n        return this;\n    };\n    WarpRect.prototype.set = function (off, value, warp) {\n        this._mask.setAt(this._rectangle.index(off), value);\n        this._warps[this._rectangle.index(off)] = warp;\n        return this;\n    };\n    return WarpRect;\n}());\nexports.WarpRect = WarpRect;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar geom = __webpack_require__(0);\n// tslint:disable:no-bitwise\n/**\n * These flags determine whether a given tile has walls in any of the cardinal\n * directions, and whether there is a \"body\" in the tile.\n */\nvar TileFlag;\n(function (TileFlag) {\n    TileFlag[TileFlag[\"WALL_NORTH\"] = 1] = \"WALL_NORTH\";\n    TileFlag[TileFlag[\"WALL_EAST\"] = 2] = \"WALL_EAST\";\n    TileFlag[TileFlag[\"WALL_WEST\"] = 8] = \"WALL_WEST\";\n    TileFlag[TileFlag[\"WALL_SOUTH\"] = 4] = \"WALL_SOUTH\";\n    TileFlag[TileFlag[\"BODY\"] = 1 << geom.DIRECTIONS.length] = \"BODY\";\n})(TileFlag = exports.TileFlag || (exports.TileFlag = {}));\nfunction rangeToString(low, high) {\n    return low.toFixed(7) + \"-\" + high.toFixed(7);\n}\nfunction wedgeToString(wedge) {\n    return \"{\" + rangeToString(wedge.low, wedge.high)\n        + ((typeof wedge.warp !== 'undefined' ? \"~\" + wedge.warp.map.id : '') + \"}\");\n}\nfunction wedgesToString(wedges) {\n    return \"[\" + wedges.map(wedgeToString).join(', ') + \"]\";\n}\n/**\n * Bodies in this algorithm do not entirely fill their tiles.  This is\n * implemented by adjusting the angles of the shadows the bodies cast,\n * making the wedge very slightly narrower.  BODY_EPSILON represents the\n * amount of reduction on either side of the wedge.\n */\nexports.BODY_EPSILON = 0.00001;\n/**\n * Walls do fill the entire tile edge.  With infinite precision, there would be\n * no need to adjust the shadow cast by a wall.  But we're using floating point\n * math here, which means imprecision can creep in and cause angles not to line\n * up properly.  To fix that, we widen the wedges of the shadows cast by walls.\n * We must make sure not to widen them as much as we narrow the body shadows,\n * or else they might close the gap we want between a body and a wall.\n */\nexports.WALL_EPSILON = exports.BODY_EPSILON / 10;\nvar DEBUG_CUTWEDGE = false;\n/**\n * This function cuts a range of angles out of a wedge.\n */\nfunction cutWedge(wedge, low, high) {\n    if (DEBUG_CUTWEDGE) {\n        // tslint:disable-next-line:no-console\n        console.info(\"cut \" + wedgeToString(wedge) + \" \" + rangeToString(low, high));\n    }\n    var ret;\n    if (low <= wedge.low) {\n        if (high >= wedge.high) {\n            // wedge is entirely occluded, remove it\n            ret = [];\n        }\n        else if (high >= wedge.low) {\n            // low part of wedge is occluded, trim it\n            wedge.low = high;\n            ret = [wedge];\n        }\n        else {\n            // cut doesn't reach the wedge\n            ret = [wedge];\n        }\n    }\n    else if (high >= wedge.high) {\n        if (low <= wedge.high) {\n            // high part of wedge is occluded, trim it\n            wedge.high = low;\n            ret = [wedge];\n        }\n        else {\n            // cut doesn't reach the wedge\n            ret = [wedge];\n        }\n    }\n    else {\n        // middle part of wedge is occluded, split it\n        var nextWedge = {\n            low: high,\n            high: wedge.high,\n            warp: wedge.warp,\n            warpCount: wedge.warpCount,\n        };\n        wedge.high = low;\n        ret = [wedge, nextWedge];\n    }\n    if (DEBUG_CUTWEDGE) {\n        // tslint:disable-next-line:no-console\n        console.info(\"--> \" + wedgesToString(ret));\n    }\n    return ret;\n}\nexports.cutWedge = cutWedge;\nfunction cutWedges(wedges, low, high) {\n    var ret = new Array();\n    for (var _i = 0, wedges_1 = wedges; _i < wedges_1.length; _i++) {\n        var wedge = wedges_1[_i];\n        ret.push.apply(ret, cutWedge(wedge, low, high));\n    }\n    return ret;\n}\nexports.cutWedges = cutWedges;\nvar DEBUG_WARPWEDGE = false;\nfunction warpWedge(wedge, low, high, warp, warpCount) {\n    if (DEBUG_WARPWEDGE) {\n        // tslint:disable-next-line:no-console\n        console.info(\"warp \" + wedgeToString(wedge) + \" \" + rangeToString(low, high) + \" \" + warp.map.id);\n    }\n    var ret;\n    if (low <= wedge.low) {\n        if (high >= wedge.high) {\n            // wedge is entirely warped\n            wedge.warp = warp;\n            wedge.warpCount = warpCount;\n            ret = [wedge];\n        }\n        else if (high >= wedge.low) {\n            // low part of wedge is warped, split it into two\n            var nextWedge = {\n                low: high,\n                high: wedge.high,\n                warp: wedge.warp,\n                warpCount: wedge.warpCount,\n            };\n            wedge.high = high;\n            wedge.warp = warp;\n            wedge.warpCount = warpCount;\n            ret = [wedge, nextWedge];\n        }\n        else {\n            // warp doesn't reach the wedge\n            ret = [wedge];\n        }\n    }\n    else if (high >= wedge.high) {\n        if (low <= wedge.high) {\n            // high part of wedge is occluded, split it into two\n            var nextWedge = {\n                low: low,\n                high: wedge.high,\n                warp: warp,\n                warpCount: warpCount,\n            };\n            wedge.high = low;\n            ret = [wedge, nextWedge];\n        }\n        else {\n            // warp doesn't reach the wedge\n            ret = [wedge];\n        }\n    }\n    else {\n        // middle part of wedge is occluded, split it into three\n        var middleWedge = {\n            low: low,\n            high: high,\n            warp: warp,\n            warpCount: warpCount,\n        };\n        var highWedge = {\n            low: high,\n            high: wedge.high,\n            warp: wedge.warp,\n            warpCount: wedge.warpCount,\n        };\n        wedge.high = low;\n        ret = [wedge, middleWedge, highWedge];\n    }\n    if (DEBUG_WARPWEDGE) {\n        // tslint:disable-next-line:no-console\n        console.info(\"--> \" + wedgesToString(ret));\n    }\n    return ret;\n}\nexports.warpWedge = warpWedge;\nfunction warpWedges(wedges, low, high, warp, warpCount) {\n    var ret = new Array();\n    for (var _i = 0, wedges_2 = wedges; _i < wedges_2.length; _i++) {\n        var wedge = wedges_2[_i];\n        ret.push.apply(ret, warpWedge(wedge, low, high, warp, warpCount));\n    }\n    return ret;\n}\nexports.warpWedges = warpWedges;\nfunction whichWedge(wedges, wedgeIndex, centerSlope) {\n    // determine the wedge containing centerSlope,\n    // or if there isn't one, then the one nearest to centerSlope\n    // or if two are very close, the one with the least warp count\n    // or if they both have the same warp count, the one with the lowest warpId\n    var cur = wedgeIndex;\n    // skip to the next wedge while it starts before before centerSlope\n    while (cur < wedges.length - 1 && wedges[cur + 1].low < centerSlope - exports.WALL_EPSILON * 2) {\n        cur++;\n    }\n    if (cur >= wedges.length - 1 || wedges[cur].high > centerSlope + exports.WALL_EPSILON * 2) {\n        // the current wedge contains centerSlope or is past it, so this is the closest\n        return cur;\n    }\n    else if (wedges[cur].high < centerSlope - exports.WALL_EPSILON * 2) {\n        // the current wedge isn't very close to centerSlope\n        // choose the closest one\n        if (Math.abs(wedges[cur].high - centerSlope) < Math.abs(wedges[cur + 1].low - centerSlope)) {\n            return cur;\n        }\n        else {\n            return cur + 1;\n        }\n    }\n    else {\n        // the current wedge is very close to centerSlope\n        if (wedges[cur + 1].low < centerSlope + exports.WALL_EPSILON * 2) {\n            // the next wedge is very close to centerSlope too\n            // compare warp counts\n            if (wedges[cur].warpCount < wedges[cur + 1].warpCount) {\n                return cur;\n            }\n            else if (wedges[cur].warpCount > wedges[cur + 1].warpCount) {\n                return cur + 1;\n            }\n            else {\n                // same warp count\n                // compare map ids\n                if (wedges[cur].warp.map.id < wedges[cur + 1].warp.map.id) {\n                    return cur;\n                }\n                else {\n                    return cur + 1;\n                }\n            }\n        }\n        else {\n            // the next wedge isn't very close to centerSlope, use the current one\n            return cur;\n        }\n    }\n}\nexports.whichWedge = whichWedge;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// tslint:disable:no-bitwise\nvar DirectionFlags;\n(function (DirectionFlags) {\n    DirectionFlags[DirectionFlags[\"NONE\"] = 0] = \"NONE\";\n    DirectionFlags[DirectionFlags[\"NORTH\"] = 1] = \"NORTH\";\n    DirectionFlags[DirectionFlags[\"EAST\"] = 2] = \"EAST\";\n    DirectionFlags[DirectionFlags[\"SOUTH\"] = 4] = \"SOUTH\";\n    DirectionFlags[DirectionFlags[\"WEST\"] = 8] = \"WEST\";\n    DirectionFlags[DirectionFlags[\"ALL\"] = 15] = \"ALL\";\n})(DirectionFlags = exports.DirectionFlags || (exports.DirectionFlags = {}));\nfunction directionFlagsToString(flags) {\n    var ret = '[';\n    if ((flags & DirectionFlags.NORTH) !== 0) {\n        ret += 'N';\n    }\n    if ((flags & DirectionFlags.EAST) !== 0) {\n        ret += 'E';\n    }\n    if ((flags & DirectionFlags.SOUTH) !== 0) {\n        ret += 'S';\n    }\n    if ((flags & DirectionFlags.WEST) !== 0) {\n        ret += 'W';\n    }\n    return ret + ']';\n}\nexports.directionFlagsToString = directionFlagsToString;\n// conversion\nfunction directionFlagsFromDirection(dir) {\n    return (1 << dir);\n}\nexports.directionFlagsFromDirection = directionFlagsFromDirection;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// tslint:disable:no-bitwise\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"NORTH\"] = 0] = \"NORTH\";\n    Direction[Direction[\"EAST\"] = 1] = \"EAST\";\n    Direction[Direction[\"SOUTH\"] = 2] = \"SOUTH\";\n    Direction[Direction[\"WEST\"] = 3] = \"WEST\";\n})(Direction = exports.Direction || (exports.Direction = {}));\nexports.DIRECTIONS = [\n    Direction.NORTH,\n    Direction.EAST,\n    Direction.SOUTH,\n    Direction.WEST,\n];\nvar DIRECTIONS_STR = [\n    'N',\n    'E',\n    'S',\n    'W',\n];\nfunction directionToString(dir) {\n    return DIRECTIONS_STR[dir];\n}\nexports.directionToString = directionToString;\nfunction directionOpposite(dir) {\n    return ((dir + 2) & 3);\n}\nexports.directionOpposite = directionOpposite;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar geom = __webpack_require__(0);\nvar LOCAL_OFF = new geom.Offset();\nvar MaskRect = (function () {\n    function MaskRect(rect, initialValue, outsideValue) {\n        if (initialValue === void 0) { initialValue = false; }\n        if (outsideValue === void 0) { outsideValue = false; }\n        this._rectangle = new geom.Rectangle();\n        this._rectangle.copyFrom(rect);\n        this._mask = new geom.Mask(rect, initialValue);\n        this._outsideValue = outsideValue;\n    }\n    // accessors\n    MaskRect.prototype.toString = function () {\n        return this._rectangle.northWest + \"/\" + this._outsideValue + \"\\n\" + this._mask;\n    };\n    Object.defineProperty(MaskRect.prototype, \"westX\", {\n        get: function () {\n            return this._rectangle.westX;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MaskRect.prototype, \"northY\", {\n        get: function () {\n            return this._rectangle.northY;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MaskRect.prototype, \"width\", {\n        get: function () {\n            return this._rectangle.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MaskRect.prototype, \"height\", {\n        get: function () {\n            return this._rectangle.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MaskRect.prototype.index = function (off) {\n        return this._mask.index(LOCAL_OFF.copyFrom(off).subtractOffset(this._rectangle.northWest));\n    };\n    MaskRect.prototype.getAt = function (index) {\n        return this._mask.getAt(index);\n    };\n    MaskRect.prototype.get = function (off) {\n        if (!this._rectangle.containsOffset(off)) {\n            return this._outsideValue;\n        }\n        return this._mask.getAt(this._rectangle.index(off));\n    };\n    // mutators\n    MaskRect.prototype.setAt = function (index, value) {\n        this._mask.setAt(index, value);\n        return this;\n    };\n    MaskRect.prototype.set = function (off, value) {\n        this._mask.setAt(this._rectangle.index(off), value);\n        return this;\n    };\n    return MaskRect;\n}());\nexports.MaskRect = MaskRect;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar geom = __webpack_require__(0);\nvar Mask = (function () {\n    // TODO consider Uint8Array for bits\n    function Mask(size, initialValue) {\n        if (initialValue === void 0) { initialValue = false; }\n        this._size = new geom.Size();\n        this._size.copyFrom(size);\n        this._bits = new Array(this._size.area).fill(initialValue);\n    }\n    // accessors\n    Mask.prototype.toString = function () {\n        var ret = '';\n        var off = new geom.Offset();\n        for (var y = 0; y < this._size.height; y++) {\n            for (var x = 0; x < this._size.width; x++) {\n                off.set(x, y);\n                ret += this.get(off.set(x, y)) ? '☑' : '☐';\n            }\n            ret += '\\n';\n        }\n        return ret;\n    };\n    Object.defineProperty(Mask.prototype, \"width\", {\n        get: function () {\n            return this._size.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Mask.prototype, \"height\", {\n        get: function () {\n            return this._size.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Mask.prototype.index = function (off) {\n        return this._size.index(off);\n    };\n    Mask.prototype.getAt = function (index) {\n        return this._bits[index];\n    };\n    Mask.prototype.get = function (off) {\n        return this.getAt(this.index(off));\n    };\n    // mutators\n    Mask.prototype.setAt = function (index, value) {\n        this._bits[index] = value;\n        return this;\n    };\n    Mask.prototype.set = function (off, value) {\n        return this.setAt(this.index(off), value);\n    };\n    return Mask;\n}());\nexports.Mask = Mask;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar X_FROM_DIRECTION = [0, 1, 0, -1];\nvar Y_FROM_DIRECTION = [-1, 0, 1, 0];\nvar Offset = (function () {\n    function Offset(x, y) {\n        if (typeof x === 'undefined') {\n            x = 0;\n        }\n        if (typeof y === 'undefined') {\n            y = 0;\n        }\n        this.x = x;\n        this.y = y;\n    }\n    // accessors\n    Offset.prototype.toString = function () {\n        return \"(\" + this.x + \",\" + this.y + \")\";\n    };\n    Offset.prototype.equals = function (other) {\n        return this.x === other.x && this.y === other.y;\n    };\n    Object.defineProperty(Offset.prototype, \"magnitudeChebyshev\", {\n        // chebyshev: can move in any direction (diagonals are ok)\n        get: function () {\n            return Math.max(Math.abs(this.x), Math.abs(this.y));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Offset.prototype, \"magnitudeManhattan\", {\n        // manhattan: can move only in cardinal directions (no diagonals)\n        get: function () {\n            return Math.abs(this.x) + Math.abs(this.y);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // mutators\n    Offset.prototype.set = function (x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    };\n    Offset.prototype.copyFrom = function (other) {\n        this.x = other.x;\n        this.y = other.y;\n        return this;\n    };\n    Offset.prototype.setFromDirection = function (dir) {\n        this.x = X_FROM_DIRECTION[dir];\n        this.y = Y_FROM_DIRECTION[dir];\n        return this;\n    };\n    Offset.prototype.add = function (x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    };\n    Offset.prototype.addSize = function (size) {\n        this.x += size.width;\n        this.y += size.height;\n        return this;\n    };\n    Offset.prototype.addOffset = function (off) {\n        this.x += off.x;\n        this.y += off.y;\n        return this;\n    };\n    Offset.prototype.addDirection = function (dir) {\n        this.x += X_FROM_DIRECTION[dir];\n        this.y += Y_FROM_DIRECTION[dir];\n        return this;\n    };\n    Offset.prototype.addCardinalDirection = function (dir) {\n        this.x += X_FROM_DIRECTION[dir];\n        this.y += Y_FROM_DIRECTION[dir];\n        return this;\n    };\n    Offset.prototype.subtractOffset = function (off) {\n        this.x -= off.x;\n        this.y -= off.y;\n        return this;\n    };\n    Offset.prototype.multiply = function (factor) {\n        this.x *= factor;\n        this.y *= factor;\n        return this;\n    };\n    // utilities\n    // chebyshev: can move in any direction (diagonals are ok)\n    Offset.prototype.distanceChebyshev = function (other) {\n        return this.subtractOffset(other).magnitudeChebyshev;\n    };\n    // manhattan: can move only in cardinal directions (no diagonals)\n    Offset.prototype.distanceManhattan = function (other) {\n        return this.subtractOffset(other).magnitudeManhattan;\n    };\n    return Offset;\n}());\nexports.Offset = Offset;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar geom = __webpack_require__(0);\nvar LOCAL_OFF = new geom.Offset();\nvar Rectangle = (function () {\n    function Rectangle(westX, northY, width, height) {\n        if (typeof westX === 'undefined') {\n            westX = 0;\n        }\n        if (typeof northY === 'undefined') {\n            northY = 0;\n        }\n        if (typeof width === 'undefined') {\n            width = 0;\n        }\n        if (typeof height === 'undefined') {\n            height = 0;\n        }\n        this.northWest = new geom.Offset(westX, northY);\n        this.size = new geom.Size(width, height);\n    }\n    // accessors\n    Rectangle.prototype.toString = function () {\n        return \"(\" + this.westX + \",\" + this.northY + \" \" + this.width + \"x\" + this.height + \")\";\n    };\n    Rectangle.prototype.equals = function (other) {\n        return this.westX === other.westX && this.northY === other.northY && this.size.equals(other);\n    };\n    Object.defineProperty(Rectangle.prototype, \"northY\", {\n        get: function () {\n            return this.northWest.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"southY\", {\n        get: function () {\n            return this.northWest.y + this.size.height - 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"westX\", {\n        get: function () {\n            return this.northWest.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"eastX\", {\n        get: function () {\n            return this.northWest.x + this.size.width - 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"width\", {\n        get: function () {\n            return this.size.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"height\", {\n        get: function () {\n            return this.size.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"empty\", {\n        get: function () {\n            return this.size.empty;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"area\", {\n        get: function () {\n            return this.size.area;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // mutators\n    Rectangle.prototype.set = function (westX, northY, width, height) {\n        this.northWest.set(westX, northY);\n        this.size.set(width, height);\n        return this;\n    };\n    Rectangle.prototype.copyFrom = function (other) {\n        this.northWest.set(other.westX, other.northY);\n        this.size.set(other.width, other.height);\n        return this;\n    };\n    Rectangle.prototype.extendToInclude = function (off) {\n        var dx = off.x - this.westX;\n        if (dx < 0) {\n            this.size.width -= dx;\n            this.northWest.x = off.x;\n        }\n        else if (dx >= this.size.width) {\n            this.size.width = dx + 1;\n        }\n        var dy = off.y - this.northWest.y;\n        if (dy < 0) {\n            this.size.height -= dy;\n            this.northWest.y = off.y;\n        }\n        else if (dy >= this.size.height) {\n            this.size.height = dy + 1;\n        }\n        return this;\n    };\n    // utilities\n    Rectangle.prototype.containsOffset = function (off) {\n        return this.size.containsOffset(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\n    };\n    Rectangle.prototype.containsRectangle = function (other) {\n        LOCAL_OFF.set(other.westX, other.northY).subtractOffset(this.northWest);\n        if (!this.size.containsOffset(LOCAL_OFF)) {\n            return false;\n        }\n        if (other.width === 0 && other.height === 0) {\n            return false;\n        }\n        return this.size.containsOffset(LOCAL_OFF.add(other.width - 1, other.height - 1));\n    };\n    Rectangle.prototype.overlapsRectangle = function (other) {\n        return this.northY <= other.northY + other.height - 1\n            && this.southY >= other.northY\n            && this.westX <= other.westX + other.width - 1\n            && this.eastX >= other.westX\n            && !this.empty\n            && other.width !== 0 && other.height !== 0;\n    };\n    Rectangle.prototype.index = function (off) {\n        return this.size.index(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\n    };\n    return Rectangle;\n}());\nexports.Rectangle = Rectangle;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Size = (function () {\n    function Size(width, height) {\n        if (typeof width === 'undefined') {\n            width = 0;\n        }\n        if (typeof height === 'undefined') {\n            height = 0;\n        }\n        this.width = width;\n        this.height = height;\n    }\n    // accessors\n    Size.prototype.toString = function () {\n        return \"(\" + this.width + \"x\" + this.height + \")\";\n    };\n    Size.prototype.equals = function (other) {\n        return this.width === other.width && this.height === other.height;\n    };\n    Object.defineProperty(Size.prototype, \"empty\", {\n        get: function () {\n            return this.width === 0 || this.height === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Size.prototype, \"area\", {\n        get: function () {\n            return this.width * this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // mutators\n    Size.prototype.set = function (width, height) {\n        this.width = width;\n        this.height = height;\n        return this;\n    };\n    Size.prototype.copyFrom = function (other) {\n        this.width = other.width;\n        this.height = other.height;\n        return this;\n    };\n    Size.prototype.add = function (width, height) {\n        this.width += width;\n        this.height += height;\n        return this;\n    };\n    Size.prototype.addOffset = function (off) {\n        this.width += off.x;\n        this.height += off.y;\n        return this;\n    };\n    Size.prototype.multiply = function (factor) {\n        this.width *= factor;\n        this.height *= factor;\n        return this;\n    };\n    // TODO: rotate\n    // utilities\n    Size.prototype.containsOffset = function (off) {\n        return off.x >= 0 && off.y >= 0 && off.x < this.width && off.y < this.height;\n    };\n    Size.prototype.index = function (off) {\n        return off.y * this.width + off.x;\n    };\n    return Size;\n}());\nexports.Size = Size;\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// warp-field-0.1.0.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bin/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9a5926d547c7596f8f3b","export * from './direction';\nexport * from './direction-flags';\nexport * from './offset';\nexport * from './size';\nexport * from './rectangle';\nexport * from './mask';\nexport * from './mask-rect';\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/index.ts","/*\n *  WallyFOV\n *  github.com/sbj42/WallyFOV\n *  James Clark\n *  Licensed under the MIT license.\n */\n\nexport {FieldOfViewMap} from './field-of-view';\nexport {Warp} from './fov-util';\nexport {WarpRect} from './warp-rect';\nexport {Direction, DirectionFlags, Offset} from './geom';\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import * as geom from './geom';\nimport {\n    TileFlag,\n    Warp,\n    Wedge,\n    WALL_EPSILON,\n    BODY_EPSILON,\n    cutWedges,\n    warpWedges,\n    whichWedge,\n} from './fov-util';\nimport {WarpRect} from '.';\n\n// tslint:disable:no-bitwise\n\n/**\n * We avoid heap allocations during the core part of the algorithm by using this\n * preallocated offset object.\n */\nconst LOCAL_OFF = new geom.Offset();\n\n/**\n * The FieldOFViewMap represents the map over which the field of view will be\n * computed.  It start out empty.  You can add walls and bodies to it, and then\n * use getFieldOfView() to compute the field of view from a given point.\n */\nexport class FieldOfViewMap {\n    readonly id: string;\n    private readonly _size = new geom.Size();\n    private readonly _tileFlags: number[];\n\n    private readonly _warps = new Array<Warp>();\n    private readonly _tileWarpIds: number[][];\n\n    constructor(id: string, width: number, height: number, addEdgeWalls = false) {\n        this.id = id;\n        this._size.set(width, height);\n        this._tileFlags = new Array<number>(this._size.area).fill(0);\n        if (addEdgeWalls) {\n            for (let y = 0; y < this._size.height; y ++) {\n                this._addFlag(LOCAL_OFF.set(0, y), TileFlag.WALL_WEST);\n                this._addFlag(LOCAL_OFF.set(this._size.width - 1, y), TileFlag.WALL_EAST);\n            }\n            for (let x = 0; x < this._size.width; x ++) {\n                this._addFlag(LOCAL_OFF.set(x, 0), TileFlag.WALL_NORTH);\n                this._addFlag(LOCAL_OFF.set(x, this._size.height - 1), TileFlag.WALL_SOUTH);\n            }\n        }\n        this._tileWarpIds = geom.DIRECTIONS.map(() => new Array<number>(this._size.area).fill(-1));\n    }\n\n    private _addFlag(off: geom.OffsetLike, flag: TileFlag) {\n        const index = this._size.index(off);\n        this._tileFlags[index] |= flag;\n    }\n\n    private _removeFlag(off: geom.OffsetLike, flag: TileFlag) {\n        const index = this._size.index(off);\n        this._tileFlags[index] &= ~flag;\n    }\n\n    private _getFlag(off: geom.OffsetLike, flag: TileFlag) {\n        const index = this._size.index(off);\n        return (this._tileFlags[index] & flag) !== 0;\n    }\n\n    private _findOrMakeWarp(map: FieldOfViewMap, offset: geom.OffsetLike) {\n        for (let id = 0; id < this._warps.length; id ++) {\n            const warp = this._warps[id];\n            if (warp.map === map && warp.offset.equals(offset)) {\n                return id;\n            }\n        }\n        const warp = {\n            map,\n            offset: new geom.Offset().copyFrom(offset),\n        };\n        const id = this._warps.length;\n        this._warps.push(warp);\n        return id;\n    }\n\n    private _addWarp(off: geom.OffsetLike, dir: geom.Direction, warpId: number) {\n        const index = this._size.index(off);\n        this._tileWarpIds[dir][index] = warpId;\n    }\n\n    private _removeWarp(off: geom.OffsetLike, dir: geom.Direction) {\n        const index = this._size.index(off);\n        delete this._tileWarpIds[dir][index];\n    }\n\n    private _getWarp(off: geom.OffsetLike, dir: geom.Direction) {\n        const index = this._size.index(off);\n        const warpId = this._tileWarpIds[dir][index];\n        if (warpId === -1) {\n            return undefined;\n        } else {\n            return this._warps[warpId];\n        }\n    }\n\n    // setup and maintenance\n\n    /**\n     * Adds a wall at a particular edge.  This automatically adds the\n     * corresponding wall on the other side.\n     */\n    addWall(x: number, y: number, dir: geom.Direction, oneWay = false) {\n        LOCAL_OFF.set(x, y);\n        this._addFlag(LOCAL_OFF, 1 << dir);\n        LOCAL_OFF.addCardinalDirection(dir);\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\n            this._addFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\n        }\n    }\n\n    /**\n     * Removes a wall at a particular edge.  This automatically removes the\n     * corresponding wall on the other side.\n     */\n    removeWall(x: number, y: number, dir: geom.Direction, oneWay = false) {\n        LOCAL_OFF.set(x, y);\n        this._removeFlag(LOCAL_OFF, 1 << dir);\n        LOCAL_OFF.addCardinalDirection(dir);\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\n            this._removeFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\n        }\n    }\n\n    getWalls(x: number, y: number) {\n        LOCAL_OFF.set(x, y);\n        const index = this._size.index(LOCAL_OFF);\n        return this._tileFlags[index] & geom.DirectionFlags.ALL;\n    }\n\n    addBody(x: number, y: number) {\n        LOCAL_OFF.set(x, y);\n        this._addFlag(LOCAL_OFF, TileFlag.BODY);\n    }\n\n    removeBody(x: number, y: number) {\n        LOCAL_OFF.set(x, y);\n        this._removeFlag(LOCAL_OFF, TileFlag.BODY);\n    }\n\n    getBody(x: number, y: number) {\n        LOCAL_OFF.set(x, y);\n        const index = this._size.index(LOCAL_OFF);\n        return this._tileFlags[index] & TileFlag.BODY;\n    }\n\n    // TODO add length argument\n    addWarp(sourceX: number, sourceY: number, dir: geom.Direction,\n            targetMap: FieldOfViewMap, targetX: number, targetY: number) {\n        LOCAL_OFF.set(targetX - sourceX, targetY - sourceY)\n                .addCardinalDirection(geom.directionOpposite(dir));\n        const warpId = this._findOrMakeWarp(targetMap, LOCAL_OFF);\n        LOCAL_OFF.set(sourceX, sourceY);\n        this._addWarp(LOCAL_OFF, dir, warpId);\n    }\n\n    // TODO add length argument\n    removeWarp(sourceX: number, sourceY: number, dir: geom.Direction) {\n        LOCAL_OFF.set(sourceX, sourceY);\n        this._removeWarp(LOCAL_OFF, dir);\n    }\n\n    getWarpFlags(sourceX: number, sourceY: number) {\n        LOCAL_OFF.set(sourceX, sourceY);\n        let ret = 0;\n        geom.DIRECTIONS.forEach(dir => {\n            if (this._getWarp(LOCAL_OFF, dir)) {\n                ret |= 1 << dir;\n            }\n        });\n        return ret;\n    }\n\n    // execution\n\n    /**\n     * Compute the field of view for a camera at the given tile.\n     * chebyshevRadius is the vision radius.  It uses chebyshev distance\n     * (https://en.wikipedia.org/wiki/Chebyshev_distance), which just means\n     * that the limit of vision in a large empty field will be square.\n     *\n     * This returns a MaskRect, which indicates which tiles are visible.\n     * maskRect.get(x, y) will return true for visible tiles.\n     */\n    getFieldOfView(x: number, y: number, chebyshevRadius: number) {\n        const origin = new geom.Offset(x, y);\n        const boundRect = new geom.Rectangle().set(\n            origin.x - chebyshevRadius, origin.y - chebyshevRadius,\n            chebyshevRadius * 2 + 1, chebyshevRadius * 2 + 1,\n        );\n        const mask = new WarpRect(boundRect);\n        // the player can always see itself\n        mask.set(origin, true, undefined);\n        // the field is divided into quadrants\n        this._quadrant(mask, origin, chebyshevRadius, -1, -1);\n        this._quadrant(mask, origin, chebyshevRadius,  1, -1);\n        this._quadrant(mask, origin, chebyshevRadius, -1,  1);\n        this._quadrant(mask, origin, chebyshevRadius,  1,  1);\n        return mask;\n    }\n\n    private _quadrant(mask: WarpRect, origin: geom.OffsetLike, chebyshevRadius: number,\n                      xDir: number, yDir: number) {\n        const {x: startX, y: startY} = origin;\n        const endDXY = (chebyshevRadius + 1);\n        const farYFlag = [TileFlag.WALL_NORTH, TileFlag.WALL_SOUTH][(yDir + 1) / 2];\n        const farXFlag = [TileFlag.WALL_WEST, TileFlag.WALL_EAST][(xDir + 1) / 2];\n        const yWarpDir = [geom.Direction.NORTH, geom.Direction.SOUTH][(yDir + 1) / 2];\n        const yWarps = this._tileWarpIds[yWarpDir];\n        const xWarpDir = [geom.Direction.WEST, geom.Direction.EAST][(xDir + 1) / 2];\n        const xWarps = this._tileWarpIds[xWarpDir];\n        const startMapIndex = this._size.index(origin);\n        const startMaskIndex = mask.index(origin.x, origin.y);\n        // Initial wedge is from slope zero to slope infinity (i.e. the whole quadrant)\n        const wedges = [{\n            low: 0,\n            high: Number.POSITIVE_INFINITY,\n            warp: undefined,\n            warpCount: 0,\n        } as Wedge];\n        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\n        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\n        for (let dy = 0, yMapIndex = startMapIndex, yMaskIndex = startMaskIndex;\n             dy !== endDXY && wedges.length > 0;\n             dy ++, yMapIndex = yMapIndex + yDir * this._size.width, yMaskIndex = yMaskIndex + yDir * mask.width\n        ) {\n            const divYpos = 1 / (dy + 0.5);\n            const divYneg = dy === 0 ? Number.POSITIVE_INFINITY : 1 / (dy - 0.5);\n            const divYmid = 1 / dy;\n            let wedgeIndex = 0;\n            // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\n            // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\n            for (let dx = 0, mapIndex = yMapIndex, maskIndex = yMaskIndex,\n                 slopeY = -0.5 * divYpos, slopeX = 0.5 * divYneg,\n                 slopeFar = 0.5 * divYpos, slopeMid = 0;\n                 dx !== endDXY && wedgeIndex !== wedges.length;\n                 dx ++, mapIndex = mapIndex + xDir, maskIndex = maskIndex + xDir,\n                 slopeY = slopeY + divYpos, slopeX = slopeX + divYneg,\n                 slopeFar = slopeFar + divYpos, slopeMid = slopeMid + divYmid\n            ) {\n                // the slopes of the four corners of this tile\n                // these are named as follows:\n                //   slopeY is the slope closest to the Y axis\n                //   slopeFar is the slope to the farthest corner\n                //   slopeMid is the slope to the center\n                //   slopeX is the slope closest to the X axis\n                // these are always true:\n                //   slopeY < slopeFar < slopeX\n                //   slopeY < slopeMid < slopeX\n                //\n                // O = origin, C = current\n                // +---+---+---+\n                // | O |   |   |\n                // +---+---+---X\n                // |   |   | C |\n                // +---+---Y---F\n\n                // the walls of this tile\n                // these are named as follows:\n                //   wallY is the farthest horizontal wall (slopeY to slopeFar)\n                //   wallX is the farthest vertical wall (slopeFar to slopeX)\n                //\n                // O = origin, C = current\n                // +---+---+---+\n                // | O |   |   |\n                // +---+---+---+\n                // |   |   | C X\n                // +---+---+-Y-+\n\n                // advance the wedge index until this tile is not after the current wedge\n                while (slopeY >= wedges[wedgeIndex].high) {\n                    wedgeIndex ++;\n                    if (wedgeIndex >= wedges.length) {\n                        break;\n                    }\n                }\n                if (wedgeIndex >= wedges.length) {\n                    break;\n                }\n\n                // if the current wedge is after this tile, move on\n                if (slopeX <= wedges[wedgeIndex].low) {\n                    continue;\n                }\n\n                {\n                    const centerWedge = whichWedge(wedges, wedgeIndex, slopeMid);\n                    mask.setAt(maskIndex, true, wedges[centerWedge].warp);\n                }\n\n                {\n                    let wedgeIndexInner = wedgeIndex;\n                    while (wedgeIndexInner < wedges.length && slopeX > wedges[wedgeIndexInner].low) {\n                        let newWedges = [wedges[wedgeIndexInner]];\n                        const {warp} = wedges[wedgeIndexInner];\n                        let wallY: boolean;\n                        let wallX: boolean;\n                        let body: boolean;\n                        let warpY: Warp;\n                        let warpX: Warp;\n                        const nextWarpCount = wedges[wedgeIndexInner].warpCount + 1;\n\n                        if (typeof warp === 'undefined') {\n                            wallY = (this._tileFlags[mapIndex] & farYFlag) !== 0;\n                            wallX = (this._tileFlags[mapIndex] & farXFlag) !== 0;\n                            body = (dx !== 0 || dy !== 0) && (this._tileFlags[mapIndex] & TileFlag.BODY) !== 0;\n                            warpY = this._warps[yWarps[mapIndex]];\n                            warpX = this._warps[xWarps[mapIndex]];\n                        } else {\n                            const {map, offset} = warp;\n                            LOCAL_OFF.copyFrom(offset).add(startX + dx * xDir, startY + dy * yDir);\n                            wallY = map._getFlag(LOCAL_OFF, TileFlag.WALL_NORTH);\n                            wallX = map._getFlag(LOCAL_OFF, TileFlag.WALL_WEST);\n                            body = (dx !== 0 || dy !== 0) && map._getFlag(LOCAL_OFF, TileFlag.BODY);\n                            warpY = map._getWarp(LOCAL_OFF, yWarpDir);\n                            warpX = map._getWarp(LOCAL_OFF, xWarpDir);\n                        }\n\n                        if (wallX && wallY) {\n                            // this tile has both far walls\n                            // so we can't see beyond it and the whole range should be cut out of the wedge(s)\n                            newWedges = cutWedges(newWedges, slopeY - WALL_EPSILON, slopeX + WALL_EPSILON);\n                        } else if (wallX) {\n                            if (typeof warpY !== 'undefined') {\n                                newWedges = warpWedges(newWedges,\n                                    slopeY - WALL_EPSILON, slopeFar + WALL_EPSILON, warpY, nextWarpCount);\n                            }\n                            if (body) {\n                                newWedges = cutWedges(newWedges,\n                                    slopeY + BODY_EPSILON, slopeX + WALL_EPSILON);\n                            } else {\n                                newWedges = cutWedges(newWedges,\n                                    slopeFar - WALL_EPSILON, slopeX + WALL_EPSILON);\n                            }\n                        } else if (wallY) {\n                            if (body) {\n                                newWedges = cutWedges(newWedges,\n                                    slopeY - WALL_EPSILON, slopeX - BODY_EPSILON);\n                            } else {\n                                newWedges = cutWedges(newWedges,\n                                    slopeY - WALL_EPSILON, slopeFar + WALL_EPSILON);\n                            }\n                            if (typeof warpX !== 'undefined') {\n                                newWedges = warpWedges(newWedges,\n                                    slopeFar - WALL_EPSILON, slopeX + WALL_EPSILON, warpX, nextWarpCount);\n                            }\n                        } else {\n                            if (typeof warpY !== 'undefined') {\n                                newWedges = warpWedges(newWedges,\n                                    slopeY - WALL_EPSILON, slopeFar + WALL_EPSILON, warpY, nextWarpCount);\n                            }\n                            if (body) {\n                                newWedges = cutWedges(newWedges,\n                                    slopeY + BODY_EPSILON, slopeX - BODY_EPSILON);\n                            }\n                            if (typeof warpX !== 'undefined') {\n                                newWedges = warpWedges(newWedges,\n                                    slopeFar - WALL_EPSILON, slopeX + WALL_EPSILON, warpX, nextWarpCount);\n                            }\n                        }\n\n                        if (newWedges.length !== 1) {\n                            wedges.splice(wedgeIndexInner, 1, ...newWedges);\n                        }\n                        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\n                        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\n                        wedgeIndexInner = wedgeIndexInner + newWedges.length;\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/field-of-view.ts","import * as geom from './geom';\nimport {FieldOfViewMap} from '.';\n\nconst LOCAL_OFF = new geom.Offset();\n\nexport interface Warp {\n    map: FieldOfViewMap;\n    offset: geom.Offset;\n}\n\nimport {Offset} from './geom';\n\nexport class WarpRect implements geom.RectangleLike {\n    private readonly _rectangle = new geom.Rectangle();\n    private readonly _mask: geom.Mask;\n    private readonly _warps: Warp[];\n\n    constructor(rect: geom.RectangleLike, initialValue = false, outsideValue = false) {\n        this._rectangle.copyFrom(rect);\n        this._mask = new geom.Mask(rect, initialValue);\n        this._warps = new Array<Warp>(this._rectangle.area);\n    }\n\n    private _warpsToString() {\n        let ret = '';\n        const off = new geom.Offset();\n        for (let y = 0; y < this._rectangle.height; y ++) {\n            for (let x = 0; x < this._rectangle.width; x ++) {\n                off.set(x, y).addOffset(this._rectangle.northWest);\n                if (this.getMask(off.x, off.y)) {\n                    const warp = this._getWarp(off);\n                    if (typeof warp === 'undefined') {\n                        ret += '-';\n                    } else {\n                        ret += warp.map.id[0];\n                    }\n                } else {\n                    ret += '.';\n                }\n            }\n            ret += '\\n';\n        }\n        return ret;\n    }\n\n    private _getWarpAt(index: number) {\n        return this._warps[index];\n    }\n\n    private _getWarp(off: geom.OffsetLike) {\n        return this._warps[this._rectangle.index(off)];\n    }\n\n    // accessors\n\n    toString() {\n        return `${this._rectangle.northWest}\\n${this._warpsToString()}`;\n    }\n\n    get westX() {\n        return this._rectangle.westX;\n    }\n\n    get northY() {\n        return this._rectangle.northY;\n    }\n\n    get width() {\n        return this._rectangle.width;\n    }\n\n    get height() {\n        return this._rectangle.height;\n    }\n\n    index(x: number, y: number) {\n        LOCAL_OFF.set(x, y).subtractOffset(this._rectangle.northWest);\n        return this._mask.index(LOCAL_OFF);\n    }\n\n    getMaskAt(index: number) {\n        return this._mask.getAt(index);\n    }\n\n    getMask(x: number, y: number) {\n        LOCAL_OFF.set(x, y);\n        if (!this._rectangle.containsOffset(LOCAL_OFF)) {\n            return false;\n        }\n        return this._mask.getAt(this._rectangle.index(LOCAL_OFF));\n    }\n\n    getMapIdAt(index: number) {\n        const warp = this._getWarpAt(index);\n        if (warp) {\n            return warp.map;\n        } else {\n            return undefined;\n        }\n    }\n\n    getMap(x: number, y: number) {\n        LOCAL_OFF.set(x, y);\n        const warp = this._getWarp(LOCAL_OFF);\n        if (warp) {\n            return warp.map;\n        } else {\n            return undefined;\n        }\n    }\n\n    getOffsetAt(index: number): Offset {\n        const warp = this._getWarpAt(index);\n        if (warp) {\n            return warp.offset;\n        } else {\n            return undefined;\n        }\n    }\n\n    getOffset(x: number, y: number): Offset {\n        LOCAL_OFF.set(x, y);\n        const warp = this._getWarp(LOCAL_OFF);\n        if (warp) {\n            return warp.offset;\n        } else {\n            return undefined;\n        }\n    }\n\n    // mutators\n\n    setAt(index: number, value: boolean, warp: Warp) {\n        this._mask.setAt(index, value);\n        this._warps[index] = warp;\n        return this;\n    }\n\n    set(off: geom.OffsetLike, value: boolean, warp: Warp) {\n        this._mask.setAt(this._rectangle.index(off), value);\n        this._warps[this._rectangle.index(off)] = warp;\n        return this;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/warp-rect.ts","import * as geom from './geom';\nimport {FieldOfViewMap} from '.';\n\n// tslint:disable:no-bitwise\n\n/**\n * These flags determine whether a given tile has walls in any of the cardinal\n * directions, and whether there is a \"body\" in the tile.\n */\nexport enum TileFlag {\n    WALL_NORTH = 1 << geom.Direction.NORTH,\n    WALL_EAST  = 1 << geom.Direction.EAST,\n    WALL_WEST  = 1 << geom.Direction.WEST,\n    WALL_SOUTH = 1 << geom.Direction.SOUTH,\n    BODY       = 1 << geom.DIRECTIONS.length,\n}\n\nexport interface Warp {\n    map: FieldOfViewMap;\n    offset: geom.Offset;\n}\n\n/**\n * In the shadowcasting algorithm, each shadow is represented by a \"wedge\",\n * running from a \"low\" angle to a \"high\" angle.  To support warps, we also\n * track for each wedge a map (if we've gone through a warp), and an offset\n * (the location within the target map relative to the player's location in\n * the source map).\n */\nexport interface Wedge {\n    low: number;\n    high: number;\n    warp: Warp | undefined;\n    warpCount: number;\n}\n\nfunction rangeToString(low: number, high: number) {\n    return `${low.toFixed(7)}-${high.toFixed(7)}`;\n}\n\nfunction wedgeToString(wedge: Wedge) {\n    return `{${rangeToString(wedge.low, wedge.high)}`\n        + `${typeof wedge.warp !== 'undefined' ? `~${wedge.warp.map.id}` : ''}}`;\n}\n\nfunction wedgesToString(wedges: Wedge[]) {\n    return `[${wedges.map(wedgeToString).join(', ')}]`;\n}\n\n/**\n * Bodies in this algorithm do not entirely fill their tiles.  This is\n * implemented by adjusting the angles of the shadows the bodies cast,\n * making the wedge very slightly narrower.  BODY_EPSILON represents the\n * amount of reduction on either side of the wedge.\n */\nexport const BODY_EPSILON = 0.00001;\n\n/**\n * Walls do fill the entire tile edge.  With infinite precision, there would be\n * no need to adjust the shadow cast by a wall.  But we're using floating point\n * math here, which means imprecision can creep in and cause angles not to line\n * up properly.  To fix that, we widen the wedges of the shadows cast by walls.\n * We must make sure not to widen them as much as we narrow the body shadows,\n * or else they might close the gap we want between a body and a wall.\n */\nexport const WALL_EPSILON = BODY_EPSILON / 10;\n\nconst DEBUG_CUTWEDGE: boolean = false;\n\n/**\n * This function cuts a range of angles out of a wedge.\n */\nexport function cutWedge(wedge: Wedge, low: number, high: number): Wedge[] {\n    if (DEBUG_CUTWEDGE) {\n        // tslint:disable-next-line:no-console\n        console.info(`cut ${wedgeToString(wedge)} ${rangeToString(low, high)}`);\n    }\n    let ret: Wedge[];\n    if (low <= wedge.low) {\n        if (high >= wedge.high) {\n            // wedge is entirely occluded, remove it\n            ret = [];\n        } else if (high >= wedge.low) {\n            // low part of wedge is occluded, trim it\n            wedge.low = high;\n            ret = [wedge];\n        } else {\n            // cut doesn't reach the wedge\n            ret = [wedge];\n        }\n    } else if (high >= wedge.high) {\n        if (low <= wedge.high) {\n            // high part of wedge is occluded, trim it\n            wedge.high = low;\n            ret = [wedge];\n        } else {\n            // cut doesn't reach the wedge\n            ret = [wedge];\n        }\n    } else {\n        // middle part of wedge is occluded, split it\n        const nextWedge = {\n            low: high,\n            high: wedge.high,\n            warp: wedge.warp,\n            warpCount: wedge.warpCount,\n        };\n        wedge.high = low;\n        ret = [wedge, nextWedge];\n    }\n    if (DEBUG_CUTWEDGE) {\n        // tslint:disable-next-line:no-console\n        console.info(`--> ${wedgesToString(ret)}`);\n    }\n    return ret;\n}\n\nexport function cutWedges(wedges: Wedge[], low: number, high: number): Wedge[] {\n    const ret = new Array<Wedge>();\n    for (const wedge of wedges) {\n        ret.push(...cutWedge(wedge, low, high));\n    }\n    return ret;\n}\n\nconst DEBUG_WARPWEDGE: boolean = false;\n\nexport function warpWedge(wedge: Wedge, low: number, high: number, warp: Warp, warpCount: number): Wedge[] {\n    if (DEBUG_WARPWEDGE) {\n        // tslint:disable-next-line:no-console\n        console.info(`warp ${wedgeToString(wedge)} ${rangeToString(low, high)} ${warp.map.id}`);\n    }\n    let ret: Wedge[];\n    if (low <= wedge.low) {\n        if (high >= wedge.high) {\n            // wedge is entirely warped\n            wedge.warp = warp;\n            wedge.warpCount = warpCount;\n            ret = [wedge];\n        } else if (high >= wedge.low) {\n            // low part of wedge is warped, split it into two\n            const nextWedge = {\n                low: high,\n                high: wedge.high,\n                warp: wedge.warp,\n                warpCount: wedge.warpCount,\n            };\n            wedge.high = high;\n            wedge.warp = warp;\n            wedge.warpCount = warpCount;\n            ret = [wedge, nextWedge];\n        } else {\n            // warp doesn't reach the wedge\n            ret = [wedge];\n        }\n    } else if (high >= wedge.high) {\n        if (low <= wedge.high) {\n            // high part of wedge is occluded, split it into two\n            const nextWedge = {\n                low,\n                high: wedge.high,\n                warp,\n                warpCount,\n            };\n            wedge.high = low;\n            ret = [wedge, nextWedge];\n        } else {\n            // warp doesn't reach the wedge\n            ret = [wedge];\n        }\n    } else {\n        // middle part of wedge is occluded, split it into three\n        const middleWedge = {\n            low,\n            high,\n            warp,\n            warpCount,\n        };\n        const highWedge = {\n            low: high,\n            high: wedge.high,\n            warp: wedge.warp,\n            warpCount: wedge.warpCount,\n        };\n        wedge.high = low;\n        ret = [wedge, middleWedge, highWedge];\n    }\n    if (DEBUG_WARPWEDGE) {\n        // tslint:disable-next-line:no-console\n        console.info(`--> ${wedgesToString(ret)}`);\n    }\n    return ret;\n}\n\nexport function warpWedges(wedges: Wedge[], low: number, high: number, warp: Warp, warpCount: number): Wedge[] {\n    const ret = new Array<Wedge>();\n    for (const wedge of wedges) {\n        ret.push(...warpWedge(wedge, low, high, warp, warpCount));\n    }\n    return ret;\n}\n\nexport function whichWedge(wedges: Wedge[], wedgeIndex: number, centerSlope: number) {\n    // determine the wedge containing centerSlope,\n    // or if there isn't one, then the one nearest to centerSlope\n    // or if two are very close, the one with the least warp count\n    // or if they both have the same warp count, the one with the lowest warpId\n    let cur = wedgeIndex;\n    // skip to the next wedge while it starts before before centerSlope\n    while (cur < wedges.length - 1 && wedges[cur + 1].low < centerSlope - WALL_EPSILON * 2) {\n        cur ++;\n    }\n    if (cur >= wedges.length - 1 || wedges[cur].high > centerSlope + WALL_EPSILON * 2) {\n        // the current wedge contains centerSlope or is past it, so this is the closest\n        return cur;\n    } else if (wedges[cur].high < centerSlope - WALL_EPSILON * 2) {\n        // the current wedge isn't very close to centerSlope\n        // choose the closest one\n        if (Math.abs(wedges[cur].high - centerSlope) < Math.abs(wedges[cur + 1].low - centerSlope)) {\n            return cur;\n        } else {\n            return cur + 1;\n        }\n    } else {\n        // the current wedge is very close to centerSlope\n        if (wedges[cur + 1].low < centerSlope + WALL_EPSILON * 2) {\n            // the next wedge is very close to centerSlope too\n            // compare warp counts\n            if (wedges[cur].warpCount < wedges[cur + 1].warpCount) {\n                return cur;\n            } else if (wedges[cur].warpCount > wedges[cur + 1].warpCount) {\n                return cur + 1;\n            } else {\n                // same warp count\n                // compare map ids\n                if (wedges[cur].warp.map.id < wedges[cur + 1].warp.map.id) {\n                    return cur;\n                } else {\n                    return cur + 1;\n                }\n            }\n        } else {\n            // the next wedge isn't very close to centerSlope, use the current one\n            return cur;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/fov-util.ts","import * as geom from '.';\n\n// tslint:disable:no-bitwise\n\nexport enum DirectionFlags {\n    NONE  = 0,\n    NORTH = 1,\n    EAST  = 2,\n    SOUTH = 4,\n    WEST  = 8,\n    ALL   = 15,\n}\n\nexport function directionFlagsToString(flags: DirectionFlags) {\n    let ret = '[';\n    if ((flags & DirectionFlags.NORTH) !== 0) {\n        ret += 'N';\n    }\n    if ((flags & DirectionFlags.EAST) !== 0) {\n        ret += 'E';\n    }\n    if ((flags & DirectionFlags.SOUTH) !== 0) {\n        ret += 'S';\n    }\n    if ((flags & DirectionFlags.WEST) !== 0) {\n        ret += 'W';\n    }\n    return ret + ']';\n}\n\n// conversion\n\nexport function directionFlagsFromDirection(dir: geom.Direction) {\n    return (1 << dir) as DirectionFlags;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/direction-flags.ts","// tslint:disable:no-bitwise\n\nexport enum Direction {\n    NORTH = 0,\n    EAST  = 1,\n    SOUTH = 2,\n    WEST  = 3,\n}\n\nexport const DIRECTIONS = [\n    Direction.NORTH,\n    Direction.EAST,\n    Direction.SOUTH,\n    Direction.WEST,\n];\n\nconst DIRECTIONS_STR = [\n    'N',\n    'E',\n    'S',\n    'W',\n];\n\nexport function directionToString(dir: Direction) {\n    return DIRECTIONS_STR[dir];\n}\n\nexport function directionOpposite(dir: Direction) {\n    return ((dir + 2) & 3) as Direction;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/direction.ts","import * as geom from '.';\n\nconst LOCAL_OFF = new geom.Offset();\n\nexport class MaskRect implements geom.RectangleLike {\n    private readonly _rectangle = new geom.Rectangle();\n    private readonly _mask: geom.Mask;\n    private readonly _outsideValue: boolean;\n\n    constructor(rect: geom.RectangleLike, initialValue = false, outsideValue = false) {\n        this._rectangle.copyFrom(rect);\n        this._mask = new geom.Mask(rect, initialValue);\n        this._outsideValue = outsideValue;\n    }\n\n    // accessors\n\n    toString() {\n        return `${this._rectangle.northWest}/${this._outsideValue}\\n${this._mask}`;\n    }\n\n    get westX() {\n        return this._rectangle.westX;\n    }\n\n    get northY() {\n        return this._rectangle.northY;\n    }\n\n    get width() {\n        return this._rectangle.width;\n    }\n\n    get height() {\n        return this._rectangle.height;\n    }\n\n    index(off: geom.OffsetLike) {\n        return this._mask.index(LOCAL_OFF.copyFrom(off).subtractOffset(this._rectangle.northWest));\n    }\n\n    getAt(index: number) {\n        return this._mask.getAt(index);\n    }\n\n    get(off: geom.OffsetLike) {\n        if (!this._rectangle.containsOffset(off)) {\n            return this._outsideValue;\n        }\n        return this._mask.getAt(this._rectangle.index(off));\n    }\n\n    // mutators\n\n    setAt(index: number, value: boolean) {\n        this._mask.setAt(index, value);\n        return this;\n    }\n\n    set(off: geom.OffsetLike, value: boolean) {\n        this._mask.setAt(this._rectangle.index(off), value);\n        return this;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/mask-rect.ts","import * as geom from '.';\n\nexport class Mask implements geom.SizeLike {\n    private readonly _size = new geom.Size();\n    private readonly _bits: boolean[];\n    // TODO consider Uint8Array for bits\n\n    constructor(size: geom.SizeLike, initialValue = false) {\n        this._size.copyFrom(size);\n        this._bits = new Array<boolean>(this._size.area).fill(initialValue);\n    }\n\n    // accessors\n\n    toString() {\n        let ret = '';\n        const off = new geom.Offset();\n        for (let y = 0; y < this._size.height; y ++) {\n            for (let x = 0; x < this._size.width; x ++) {\n                off.set(x, y);\n                ret += this.get(off.set(x, y)) ? '☑' : '☐';\n            }\n            ret += '\\n';\n        }\n        return ret;\n    }\n\n    get width() {\n        return this._size.width;\n    }\n\n    get height() {\n        return this._size.height;\n    }\n\n    index(off: geom.OffsetLike) {\n        return this._size.index(off);\n    }\n\n    getAt(index: number) {\n        return this._bits[index];\n    }\n\n    get(off: geom.OffsetLike) {\n        return this.getAt(this.index(off));\n    }\n\n    // mutators\n\n    setAt(index: number, value: boolean) {\n        this._bits[index] = value;\n        return this;\n    }\n\n    set(off: geom.OffsetLike, value: boolean) {\n        return this.setAt(this.index(off), value);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/mask.ts","import * as geom from '.';\n\nconst X_FROM_DIRECTION = [  0, 1, 0, -1 ];\nconst Y_FROM_DIRECTION = [ -1, 0, 1,  0 ];\n\nexport interface OffsetLike {\n    readonly x: number;\n    readonly y: number;\n}\n\nexport class Offset implements OffsetLike {\n    x: number;\n    y: number;\n\n    constructor();\n    constructor(x: number, y: number);\n    constructor(x?: number, y?: number) {\n        if (typeof x === 'undefined') {\n            x = 0;\n        }\n        if (typeof y === 'undefined') {\n            y = 0;\n        }\n        this.x = x;\n        this.y = y;\n    }\n\n    // accessors\n\n    toString() {\n        return `(${this.x},${this.y})`;\n    }\n\n    equals(other: OffsetLike) {\n        return this.x === other.x && this.y === other.y;\n    }\n\n    // chebyshev: can move in any direction (diagonals are ok)\n    get magnitudeChebyshev() {\n        return Math.max(Math.abs(this.x), Math.abs(this.y));\n    }\n\n    // manhattan: can move only in cardinal directions (no diagonals)\n    get magnitudeManhattan(): number {\n        return Math.abs(this.x) + Math.abs(this.y);\n    }\n\n    // mutators\n\n    set(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n\n    copyFrom(other: OffsetLike) {\n        this.x = other.x;\n        this.y = other.y;\n        return this;\n    }\n\n    setFromDirection(dir: geom.Direction) {\n        this.x = X_FROM_DIRECTION[dir];\n        this.y = Y_FROM_DIRECTION[dir];\n        return this;\n    }\n\n    add(x: number, y: number) {\n        this.x += x;\n        this.y += y;\n        return this;\n    }\n\n    addSize(size: geom.SizeLike) {\n        this.x += size.width;\n        this.y += size.height;\n        return this;\n    }\n\n    addOffset(off: OffsetLike) {\n        this.x += off.x;\n        this.y += off.y;\n        return this;\n    }\n\n    addDirection(dir: geom.Direction) {\n        this.x += X_FROM_DIRECTION[dir];\n        this.y += Y_FROM_DIRECTION[dir];\n        return this;\n    }\n\n    addCardinalDirection(dir: geom.Direction) {\n        this.x += X_FROM_DIRECTION[dir];\n        this.y += Y_FROM_DIRECTION[dir];\n        return this;\n    }\n\n    subtractOffset(off: OffsetLike) {\n        this.x -= off.x;\n        this.y -= off.y;\n        return this;\n    }\n\n    multiply(factor: number) {\n        this.x *= factor;\n        this.y *= factor;\n        return this;\n    }\n\n    // utilities\n\n    // chebyshev: can move in any direction (diagonals are ok)\n    distanceChebyshev(other: OffsetLike) {\n        return this.subtractOffset(other).magnitudeChebyshev;\n    }\n\n    // manhattan: can move only in cardinal directions (no diagonals)\n    distanceManhattan(other?: OffsetLike): number {\n        return this.subtractOffset(other).magnitudeManhattan;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/offset.ts","import * as geom from '.';\n\nexport interface RectangleLike extends geom.SizeLike {\n    readonly westX: number;\n    readonly northY: number;\n}\n\nconst LOCAL_OFF = new geom.Offset();\n\nexport class Rectangle implements RectangleLike, geom.SizeLike {\n    northWest: geom.Offset;\n    size: geom.Size;\n\n    constructor();\n    constructor(westX: number, northY: number, width: number, height: number);\n    constructor(westX?: number, northY?: number, width?: number, height?: number) {\n        if (typeof westX === 'undefined') {\n            westX = 0;\n        }\n        if (typeof northY === 'undefined') {\n            northY = 0;\n        }\n        if (typeof width === 'undefined') {\n            width = 0;\n        }\n        if (typeof height === 'undefined') {\n            height = 0;\n        }\n        this.northWest = new geom.Offset(westX, northY);\n        this.size = new geom.Size(width, height);\n    }\n\n    // accessors\n\n    toString() {\n        return `(${this.westX},${this.northY} ${this.width}x${this.height})`;\n    }\n\n    equals(other: RectangleLike) {\n        return this.westX === other.westX && this.northY === other.northY && this.size.equals(other);\n    }\n\n    get northY() {\n        return this.northWest.y;\n    }\n\n    get southY() {\n        return this.northWest.y + this.size.height - 1;\n    }\n\n    get westX() {\n        return this.northWest.x;\n    }\n\n    get eastX() {\n        return this.northWest.x + this.size.width - 1;\n    }\n\n    get width() {\n        return this.size.width;\n    }\n\n    get height() {\n        return this.size.height;\n    }\n\n    get empty() {\n        return this.size.empty;\n    }\n\n    get area() {\n        return this.size.area;\n    }\n\n    // mutators\n\n    set(westX: number, northY: number, width: number, height: number) {\n        this.northWest.set(westX, northY);\n        this.size.set(width, height);\n        return this;\n    }\n\n    copyFrom(other: RectangleLike) {\n        this.northWest.set(other.westX, other.northY);\n        this.size.set(other.width, other.height);\n        return this;\n    }\n\n    extendToInclude(off: geom.OffsetLike) {\n        const dx = off.x - this.westX;\n        if (dx < 0) {\n            this.size.width -= dx;\n            this.northWest.x = off.x;\n        } else if (dx >= this.size.width) {\n            this.size.width = dx + 1;\n        }\n        const dy = off.y - this.northWest.y;\n        if (dy < 0) {\n            this.size.height -= dy;\n            this.northWest.y = off.y;\n        } else if (dy >= this.size.height) {\n            this.size.height = dy + 1;\n        }\n        return this;\n    }\n\n    // utilities\n\n    containsOffset(off: geom.OffsetLike) {\n        return this.size.containsOffset(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\n    }\n\n    containsRectangle(other: RectangleLike) {\n        LOCAL_OFF.set(other.westX, other.northY).subtractOffset(this.northWest);\n        if (!this.size.containsOffset(LOCAL_OFF)) {\n            return false;\n        }\n        if (other.width === 0 && other.height === 0) {\n            return false;\n        }\n        return this.size.containsOffset(LOCAL_OFF.add(other.width - 1, other.height - 1));\n    }\n\n    overlapsRectangle(other: RectangleLike) {\n        return this.northY <= other.northY + other.height - 1\n            && this.southY >= other.northY\n            && this.westX <= other.westX + other.width - 1\n            && this.eastX >= other.westX\n            && !this.empty\n            && other.width !== 0 && other.height !== 0;\n    }\n\n    index(off: geom.OffsetLike) {\n        return this.size.index(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/rectangle.ts","import * as geom from '.';\n\nexport interface SizeLike {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport class Size implements SizeLike {\n    width: number;\n    height: number;\n\n    constructor();\n    constructor(width: number, height: number);\n    constructor(width?: number, height?: number) {\n        if (typeof width === 'undefined') {\n            width = 0;\n        }\n        if (typeof height === 'undefined') {\n            height = 0;\n        }\n        this.width = width;\n        this.height = height;\n    }\n\n    // accessors\n\n    toString() {\n        return `(${this.width}x${this.height})`;\n    }\n\n    equals(other: SizeLike) {\n        return this.width === other.width && this.height === other.height;\n    }\n\n    get empty() {\n        return this.width === 0 || this.height === 0;\n    }\n\n    get area() {\n        return this.width * this.height;\n    }\n\n    // mutators\n\n    set(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n\n    copyFrom(other: SizeLike) {\n        this.width = other.width;\n        this.height = other.height;\n        return this;\n    }\n\n    add(width: number, height: number) {\n        this.width += width;\n        this.height += height;\n        return this;\n    }\n\n    addOffset(off: geom.OffsetLike) {\n        this.width += off.x;\n        this.height += off.y;\n        return this;\n    }\n\n    multiply(factor: number) {\n        this.width *= factor;\n        this.height *= factor;\n        return this;\n    }\n\n    // TODO: rotate\n\n    // utilities\n\n    containsOffset(off: geom.OffsetLike) {\n        return off.x >= 0 && off.y >= 0 && off.x < this.width && off.y < this.height;\n    }\n\n    index(off: geom.OffsetLike) {\n        return off.y * this.width + off.x;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/size.ts"],"sourceRoot":""}