{"version":3,"sources":["webpack:///warp-field-0.1.3.min.js","webpack:///webpack/bootstrap ec1277d340c71ac2aa7b","webpack:///./src/geom/index.ts","webpack:///./src/index.ts","webpack:///./src/field-of-view.ts","webpack:///./src/warp-rect.ts","webpack:///./src/fov-util.ts","webpack:///./src/geom/direction-flags.ts","webpack:///./src/geom/direction.ts","webpack:///./src/geom/mask-rect.ts","webpack:///./src/geom/mask.ts","webpack:///./src/geom/offset.ts","webpack:///./src/geom/rectangle.ts","webpack:///./src/geom/size.ts"],"names":["WarpField","modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__export","field_of_view_1","FieldOfViewMap","warp_rect_1","WarpRect","geom_1","Direction","DirectionFlags","Offset","geom","fov_util_1","_1","LOCAL_OFF","id","width","height","addEdgeWalls","_this","this","_size","Size","_warps","Array","set","_tileFlags","area","fill","y","_addFlag","TileFlag","WALL_WEST","WALL_EAST","x","WALL_NORTH","WALL_SOUTH","_tileWarpIds","DIRECTIONS","map","off","flag","index","_removeFlag","_getFlag","_findOrMakeWarp","offset","fid","length","fwarp","equals","warp","copyFrom","push","_addWarp","dir","warpId","_removeWarp","_getWarp","addWall","oneWay","addCardinalDirection","containsOffset","directionOpposite","removeWall","getWalls","ALL","addBody","BODY","removeBody","getBody","addWarp","sourceX","sourceY","targetMap","targetX","targetY","removeWarp","getWarpFlags","ret","forEach","getFieldOfView","chebyshevRadius","origin","boundRect","Rectangle","mask","undefined","_quadrant","xDir","yDir","startX","startY","endDXY","farYFlag","farXFlag","yWarpDir","NORTH","SOUTH","yWarps","xWarpDir","WEST","EAST","xWarps","startMapIndex","startMaskIndex","wedges","low","high","Number","POSITIVE_INFINITY","warpCount","dy","yMapIndex","yMaskIndex","divYpos","divYneg","divYmid","wedgeIndex","dx","mapIndex","maskIndex","slopeY","slopeX","slopeFar","slopeMid","centerWedge","whichWedge","setAt","wedgeIndexInner","newWedges","wallY","wallX","body","warpY","warpX","nextWarpCount","add","cutWedges","WALL_EPSILON","warpWedges","WARP_EPSILON","BODY_EPSILON","splice","apply","concat","rect","initialValue","outsideValue","_rectangle","_mask","Mask","_warpsToString","addOffset","northWest","getMask","_getWarpAt","toString","westX","northY","subtractOffset","getMaskAt","getAt","getMapIdAt","getMap","getOffsetAt","getOffset","rangeToString","toFixed","wedgeToString","wedge","wedgesToString","join","cutWedge","DEBUG_CUTWEDGE","console","info","nextWedge","_i","wedges_1","warpWedge","DEBUG_WARPWEDGE","middleWedge","highWedge","wedges_2","centerSlope","cur","Math","abs","directionFlagsToString","flags","directionFlagsFromDirection","directionToString","DIRECTIONS_STR","MaskRect","_outsideValue","size","_bits","X_FROM_DIRECTION","Y_FROM_DIRECTION","other","max","setFromDirection","addSize","addDirection","multiply","factor","distanceChebyshev","magnitudeChebyshev","distanceManhattan","magnitudeManhattan","empty","extendToInclude","containsRectangle","overlapsRectangle","southY","eastX"],"mappings":"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","file":"warp-field-0.1.3.min.js","sourcesContent":["var WarpField =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/bin/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(6));\r\n__export(__webpack_require__(5));\r\n__export(__webpack_require__(9));\r\n__export(__webpack_require__(11));\r\n__export(__webpack_require__(10));\r\n__export(__webpack_require__(8));\r\n__export(__webpack_require__(7));\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/*\r\n *  WallyFOV\r\n *  github.com/sbj42/WallyFOV\r\n *  James Clark\r\n *  Licensed under the MIT license.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar field_of_view_1 = __webpack_require__(2);\r\nexports.FieldOfViewMap = field_of_view_1.FieldOfViewMap;\r\nvar warp_rect_1 = __webpack_require__(3);\r\nexports.WarpRect = warp_rect_1.WarpRect;\r\nvar geom_1 = __webpack_require__(0);\r\nexports.Direction = geom_1.Direction;\r\nexports.DirectionFlags = geom_1.DirectionFlags;\r\nexports.Offset = geom_1.Offset;\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar geom = __webpack_require__(0);\r\nvar fov_util_1 = __webpack_require__(4);\r\nvar _1 = __webpack_require__(1);\r\n// tslint:disable:no-bitwise\r\n/**\r\n * We avoid heap allocations during the core part of the algorithm by using this\r\n * preallocated offset object.\r\n */\r\nvar LOCAL_OFF = new geom.Offset();\r\n/**\r\n * The FieldOFViewMap represents the map over which the field of view will be\r\n * computed.  It starts out empty.  You can add walls and bodies to it, and then\r\n * use getFieldOfView() to compute the field of view from a given point.\r\n */\r\nvar FieldOfViewMap = /** @class */ (function () {\r\n    function FieldOfViewMap(id, width, height, addEdgeWalls) {\r\n        if (addEdgeWalls === void 0) { addEdgeWalls = false; }\r\n        var _this = this;\r\n        this._size = new geom.Size();\r\n        this._warps = new Array();\r\n        this.id = id;\r\n        this._size.set(width, height);\r\n        this._tileFlags = new Array(this._size.area).fill(0);\r\n        if (addEdgeWalls) {\r\n            for (var y = 0; y < this._size.height; y++) {\r\n                this._addFlag(LOCAL_OFF.set(0, y), fov_util_1.TileFlag.WALL_WEST);\r\n                this._addFlag(LOCAL_OFF.set(this._size.width - 1, y), fov_util_1.TileFlag.WALL_EAST);\r\n            }\r\n            for (var x = 0; x < this._size.width; x++) {\r\n                this._addFlag(LOCAL_OFF.set(x, 0), fov_util_1.TileFlag.WALL_NORTH);\r\n                this._addFlag(LOCAL_OFF.set(x, this._size.height - 1), fov_util_1.TileFlag.WALL_SOUTH);\r\n            }\r\n        }\r\n        this._tileWarpIds = geom.DIRECTIONS.map(function () { return new Array(_this._size.area).fill(-1); });\r\n    }\r\n    FieldOfViewMap.prototype._addFlag = function (off, flag) {\r\n        var index = this._size.index(off);\r\n        this._tileFlags[index] |= flag;\r\n    };\r\n    FieldOfViewMap.prototype._removeFlag = function (off, flag) {\r\n        var index = this._size.index(off);\r\n        this._tileFlags[index] &= ~flag;\r\n    };\r\n    FieldOfViewMap.prototype._getFlag = function (off, flag) {\r\n        var index = this._size.index(off);\r\n        return (this._tileFlags[index] & flag) !== 0;\r\n    };\r\n    FieldOfViewMap.prototype._findOrMakeWarp = function (map, offset) {\r\n        for (var fid = 0; fid < this._warps.length; fid++) {\r\n            var fwarp = this._warps[fid];\r\n            if (fwarp.map === map && fwarp.offset.equals(offset)) {\r\n                return fid;\r\n            }\r\n        }\r\n        var warp = {\r\n            map: map,\r\n            offset: new geom.Offset().copyFrom(offset),\r\n        };\r\n        var id = this._warps.length;\r\n        this._warps.push(warp);\r\n        return id;\r\n    };\r\n    FieldOfViewMap.prototype._addWarp = function (off, dir, warpId) {\r\n        var index = this._size.index(off);\r\n        this._tileWarpIds[dir][index] = warpId;\r\n    };\r\n    FieldOfViewMap.prototype._removeWarp = function (off, dir) {\r\n        var index = this._size.index(off);\r\n        delete this._tileWarpIds[dir][index];\r\n    };\r\n    FieldOfViewMap.prototype._getWarp = function (off, dir) {\r\n        var index = this._size.index(off);\r\n        var warpId = this._tileWarpIds[dir][index];\r\n        if (warpId === -1) {\r\n            return undefined;\r\n        }\r\n        else {\r\n            return this._warps[warpId];\r\n        }\r\n    };\r\n    // setup and maintenance\r\n    /**\r\n     * Adds a wall at a particular edge.  This automatically adds the\r\n     * corresponding wall on the other side.\r\n     */\r\n    FieldOfViewMap.prototype.addWall = function (x, y, dir, oneWay) {\r\n        if (oneWay === void 0) { oneWay = false; }\r\n        LOCAL_OFF.set(x, y);\r\n        this._addFlag(LOCAL_OFF, 1 << dir);\r\n        LOCAL_OFF.addCardinalDirection(dir);\r\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\r\n            this._addFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\r\n        }\r\n    };\r\n    /**\r\n     * Removes a wall at a particular edge.  This automatically removes the\r\n     * corresponding wall on the other side.\r\n     */\r\n    FieldOfViewMap.prototype.removeWall = function (x, y, dir, oneWay) {\r\n        if (oneWay === void 0) { oneWay = false; }\r\n        LOCAL_OFF.set(x, y);\r\n        this._removeFlag(LOCAL_OFF, 1 << dir);\r\n        LOCAL_OFF.addCardinalDirection(dir);\r\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\r\n            this._removeFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\r\n        }\r\n    };\r\n    FieldOfViewMap.prototype.getWalls = function (x, y) {\r\n        LOCAL_OFF.set(x, y);\r\n        var index = this._size.index(LOCAL_OFF);\r\n        return this._tileFlags[index] & geom.DirectionFlags.ALL;\r\n    };\r\n    FieldOfViewMap.prototype.addBody = function (x, y) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._addFlag(LOCAL_OFF, fov_util_1.TileFlag.BODY);\r\n    };\r\n    FieldOfViewMap.prototype.removeBody = function (x, y) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._removeFlag(LOCAL_OFF, fov_util_1.TileFlag.BODY);\r\n    };\r\n    FieldOfViewMap.prototype.getBody = function (x, y) {\r\n        LOCAL_OFF.set(x, y);\r\n        var index = this._size.index(LOCAL_OFF);\r\n        return this._tileFlags[index] & fov_util_1.TileFlag.BODY;\r\n    };\r\n    // TODO add length argument\r\n    FieldOfViewMap.prototype.addWarp = function (sourceX, sourceY, dir, targetMap, targetX, targetY) {\r\n        LOCAL_OFF.set(targetX - sourceX, targetY - sourceY)\r\n            .addCardinalDirection(geom.directionOpposite(dir));\r\n        var warpId = this._findOrMakeWarp(targetMap, LOCAL_OFF);\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        this._addWarp(LOCAL_OFF, dir, warpId);\r\n    };\r\n    // TODO add length argument\r\n    FieldOfViewMap.prototype.removeWarp = function (sourceX, sourceY, dir) {\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        this._removeWarp(LOCAL_OFF, dir);\r\n    };\r\n    FieldOfViewMap.prototype.getWarpFlags = function (sourceX, sourceY) {\r\n        var _this = this;\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        var ret = 0;\r\n        geom.DIRECTIONS.forEach(function (dir) {\r\n            if (_this._getWarp(LOCAL_OFF, dir)) {\r\n                ret |= 1 << dir;\r\n            }\r\n        });\r\n        return ret;\r\n    };\r\n    // execution\r\n    /**\r\n     * Compute the field of view for a camera at the given tile.\r\n     * chebyshevRadius is the vision radius.  It uses chebyshev distance\r\n     * (https://en.wikipedia.org/wiki/Chebyshev_distance), which just means\r\n     * that the limit of vision in a large empty field will be square.\r\n     *\r\n     * This returns a MaskRect, which indicates which tiles are visible.\r\n     * maskRect.get(x, y) will return true for visible tiles.\r\n     */\r\n    FieldOfViewMap.prototype.getFieldOfView = function (x, y, chebyshevRadius) {\r\n        var origin = new geom.Offset(x, y);\r\n        var boundRect = new geom.Rectangle().set(origin.x - chebyshevRadius, origin.y - chebyshevRadius, chebyshevRadius * 2 + 1, chebyshevRadius * 2 + 1);\r\n        var mask = new _1.WarpRect(boundRect);\r\n        // the player can always see itself\r\n        mask.set(origin, true, undefined);\r\n        // the field is divided into quadrants\r\n        this._quadrant(mask, origin, chebyshevRadius, -1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius, 1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius, -1, 1);\r\n        this._quadrant(mask, origin, chebyshevRadius, 1, 1);\r\n        return mask;\r\n    };\r\n    FieldOfViewMap.prototype._quadrant = function (mask, origin, chebyshevRadius, xDir, yDir) {\r\n        var startX = origin.x, startY = origin.y;\r\n        var endDXY = (chebyshevRadius + 1);\r\n        if (endDXY < 0 || !this._size.containsOffset(origin)) {\r\n            return;\r\n        }\r\n        var farYFlag = [fov_util_1.TileFlag.WALL_NORTH, fov_util_1.TileFlag.WALL_SOUTH][(yDir + 1) / 2];\r\n        var farXFlag = [fov_util_1.TileFlag.WALL_WEST, fov_util_1.TileFlag.WALL_EAST][(xDir + 1) / 2];\r\n        var yWarpDir = [geom.Direction.NORTH, geom.Direction.SOUTH][(yDir + 1) / 2];\r\n        var yWarps = this._tileWarpIds[yWarpDir];\r\n        var xWarpDir = [geom.Direction.WEST, geom.Direction.EAST][(xDir + 1) / 2];\r\n        var xWarps = this._tileWarpIds[xWarpDir];\r\n        var startMapIndex = this._size.index(origin);\r\n        var startMaskIndex = mask.index(origin.x, origin.y);\r\n        // Initial wedge is from slope zero to slope infinity (i.e. the whole quadrant)\r\n        var wedges = [{\r\n                low: 0,\r\n                high: Number.POSITIVE_INFINITY,\r\n                warp: undefined,\r\n                warpCount: 0,\r\n            }];\r\n        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n        for (var dy = 0, yMapIndex = startMapIndex, yMaskIndex = startMaskIndex; dy !== endDXY && wedges.length > 0; dy++, yMapIndex = yMapIndex + yDir * this._size.width, yMaskIndex = yMaskIndex + yDir * mask.width) {\r\n            var divYpos = 1 / (dy + 0.5);\r\n            var divYneg = dy === 0 ? Number.POSITIVE_INFINITY : 1 / (dy - 0.5);\r\n            var divYmid = 1 / dy;\r\n            var wedgeIndex = 0;\r\n            // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n            // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n            for (var dx = 0, mapIndex = yMapIndex, maskIndex = yMaskIndex, slopeY = -0.5 * divYpos, slopeX = 0.5 * divYneg, slopeFar = 0.5 * divYpos, slopeMid = 0; dx !== endDXY && wedgeIndex !== wedges.length; dx++, mapIndex = mapIndex + xDir, maskIndex = maskIndex + xDir,\r\n                slopeY = slopeY + divYpos, slopeX = slopeX + divYneg,\r\n                slopeFar = slopeFar + divYpos, slopeMid = slopeMid + divYmid) {\r\n                // the slopes of the four corners of this tile\r\n                // these are named as follows:\r\n                //   slopeY is the slope closest to the Y axis\r\n                //   slopeFar is the slope to the farthest corner\r\n                //   slopeMid is the slope to the center\r\n                //   slopeX is the slope closest to the X axis\r\n                // these are always true:\r\n                //   slopeY < slopeFar < slopeX\r\n                //   slopeY < slopeMid < slopeX\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---X\r\n                // |   |   | C |\r\n                // +---+---Y---F\r\n                // the walls of this tile\r\n                // these are named as follows:\r\n                //   wallY is the farthest horizontal wall (slopeY to slopeFar)\r\n                //   wallX is the farthest vertical wall (slopeFar to slopeX)\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---+\r\n                // |   |   | C X\r\n                // +---+---+-Y-+\r\n                // advance the wedge index until this tile is not after the current wedge\r\n                while (slopeY >= wedges[wedgeIndex].high) {\r\n                    wedgeIndex++;\r\n                    if (wedgeIndex >= wedges.length) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (wedgeIndex >= wedges.length) {\r\n                    break;\r\n                }\r\n                // if the current wedge is after this tile, move on\r\n                if (slopeX <= wedges[wedgeIndex].low) {\r\n                    continue;\r\n                }\r\n                {\r\n                    var centerWedge = fov_util_1.whichWedge(wedges, wedgeIndex, slopeMid);\r\n                    mask.setAt(maskIndex, true, wedges[centerWedge].warp);\r\n                }\r\n                {\r\n                    var wedgeIndexInner = wedgeIndex;\r\n                    while (wedgeIndexInner < wedges.length && slopeX > wedges[wedgeIndexInner].low) {\r\n                        var newWedges = [wedges[wedgeIndexInner]];\r\n                        var warp = wedges[wedgeIndexInner].warp;\r\n                        var wallY = void 0;\r\n                        var wallX = void 0;\r\n                        var body = void 0;\r\n                        var warpY = void 0;\r\n                        var warpX = void 0;\r\n                        var nextWarpCount = wedges[wedgeIndexInner].warpCount + 1;\r\n                        if (typeof warp === 'undefined') {\r\n                            wallY = (this._tileFlags[mapIndex] & farYFlag) !== 0;\r\n                            wallX = (this._tileFlags[mapIndex] & farXFlag) !== 0;\r\n                            body = (dx !== 0 || dy !== 0) && (this._tileFlags[mapIndex] & fov_util_1.TileFlag.BODY) !== 0;\r\n                            warpY = this._warps[yWarps[mapIndex]];\r\n                            warpX = this._warps[xWarps[mapIndex]];\r\n                        }\r\n                        else {\r\n                            var map = warp.map, offset = warp.offset;\r\n                            LOCAL_OFF.copyFrom(offset).add(startX + dx * xDir, startY + dy * yDir);\r\n                            wallY = map._getFlag(LOCAL_OFF, farYFlag);\r\n                            wallX = map._getFlag(LOCAL_OFF, farXFlag);\r\n                            body = (dx !== 0 || dy !== 0) && map._getFlag(LOCAL_OFF, fov_util_1.TileFlag.BODY);\r\n                            warpY = map._getWarp(LOCAL_OFF, yWarpDir);\r\n                            warpX = map._getWarp(LOCAL_OFF, xWarpDir);\r\n                        }\r\n                        if (wallX && wallY) {\r\n                            // this tile has both far walls\r\n                            // so we can't see beyond it and the whole range should be cut out of the wedge(s)\r\n                            newWedges = fov_util_1.cutWedges(newWedges, slopeY - fov_util_1.WALL_EPSILON, slopeX + fov_util_1.WALL_EPSILON);\r\n                        }\r\n                        else if (wallX) {\r\n                            if (typeof warpY !== 'undefined') {\r\n                                newWedges = fov_util_1.warpWedges(newWedges, slopeY - fov_util_1.WARP_EPSILON, slopeFar + fov_util_1.WARP_EPSILON, warpY, nextWarpCount);\r\n                            }\r\n                            if (body) {\r\n                                newWedges = fov_util_1.cutWedges(newWedges, slopeY + fov_util_1.BODY_EPSILON, slopeX + fov_util_1.WALL_EPSILON);\r\n                            }\r\n                            else {\r\n                                newWedges = fov_util_1.cutWedges(newWedges, slopeFar - fov_util_1.WALL_EPSILON, slopeX + fov_util_1.WALL_EPSILON);\r\n                            }\r\n                        }\r\n                        else if (wallY) {\r\n                            if (body) {\r\n                                newWedges = fov_util_1.cutWedges(newWedges, slopeY - fov_util_1.WALL_EPSILON, slopeX - fov_util_1.BODY_EPSILON);\r\n                            }\r\n                            else {\r\n                                newWedges = fov_util_1.cutWedges(newWedges, slopeY - fov_util_1.WALL_EPSILON, slopeFar + fov_util_1.WALL_EPSILON);\r\n                            }\r\n                            if (typeof warpX !== 'undefined') {\r\n                                newWedges = fov_util_1.warpWedges(newWedges, slopeFar - fov_util_1.WARP_EPSILON, slopeX + fov_util_1.WARP_EPSILON, warpX, nextWarpCount);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (typeof warpY !== 'undefined') {\r\n                                newWedges = fov_util_1.warpWedges(newWedges, slopeY - fov_util_1.WARP_EPSILON, slopeFar + fov_util_1.WARP_EPSILON, warpY, nextWarpCount);\r\n                            }\r\n                            if (body) {\r\n                                newWedges = fov_util_1.cutWedges(newWedges, slopeY + fov_util_1.BODY_EPSILON, slopeX - fov_util_1.BODY_EPSILON);\r\n                            }\r\n                            if (typeof warpX !== 'undefined') {\r\n                                newWedges = fov_util_1.warpWedges(newWedges, slopeFar - fov_util_1.WARP_EPSILON, slopeX + fov_util_1.WARP_EPSILON, warpX, nextWarpCount);\r\n                            }\r\n                        }\r\n                        if (newWedges.length !== 1) {\r\n                            wedges.splice.apply(wedges, [wedgeIndexInner, 1].concat(newWedges));\r\n                        }\r\n                        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n                        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n                        wedgeIndexInner = wedgeIndexInner + newWedges.length;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return FieldOfViewMap;\r\n}());\r\nexports.FieldOfViewMap = FieldOfViewMap;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar geom = __webpack_require__(0);\r\nvar LOCAL_OFF = new geom.Offset();\r\nvar WarpRect = /** @class */ (function () {\r\n    function WarpRect(rect, initialValue, outsideValue) {\r\n        if (initialValue === void 0) { initialValue = false; }\r\n        if (outsideValue === void 0) { outsideValue = false; }\r\n        this._rectangle = new geom.Rectangle();\r\n        this._rectangle.copyFrom(rect);\r\n        this._mask = new geom.Mask(rect, initialValue);\r\n        this._warps = new Array(this._rectangle.area);\r\n    }\r\n    WarpRect.prototype._warpsToString = function () {\r\n        var ret = '';\r\n        var off = new geom.Offset();\r\n        for (var y = 0; y < this._rectangle.height; y++) {\r\n            for (var x = 0; x < this._rectangle.width; x++) {\r\n                off.set(x, y).addOffset(this._rectangle.northWest);\r\n                if (this.getMask(off.x, off.y)) {\r\n                    var warp = this._getWarp(off);\r\n                    if (typeof warp === 'undefined') {\r\n                        ret += '-';\r\n                    }\r\n                    else {\r\n                        ret += warp.map.id[0];\r\n                    }\r\n                }\r\n                else {\r\n                    ret += '.';\r\n                }\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    };\r\n    WarpRect.prototype._getWarpAt = function (index) {\r\n        return this._warps[index];\r\n    };\r\n    WarpRect.prototype._getWarp = function (off) {\r\n        return this._warps[this._rectangle.index(off)];\r\n    };\r\n    // accessors\r\n    WarpRect.prototype.toString = function () {\r\n        return this._rectangle.northWest + \"\\n\" + this._warpsToString();\r\n    };\r\n    Object.defineProperty(WarpRect.prototype, \"westX\", {\r\n        get: function () {\r\n            return this._rectangle.westX;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WarpRect.prototype, \"northY\", {\r\n        get: function () {\r\n            return this._rectangle.northY;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WarpRect.prototype, \"width\", {\r\n        get: function () {\r\n            return this._rectangle.width;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WarpRect.prototype, \"height\", {\r\n        get: function () {\r\n            return this._rectangle.height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    WarpRect.prototype.index = function (x, y) {\r\n        LOCAL_OFF.set(x, y).subtractOffset(this._rectangle.northWest);\r\n        return this._mask.index(LOCAL_OFF);\r\n    };\r\n    WarpRect.prototype.getMaskAt = function (index) {\r\n        return this._mask.getAt(index);\r\n    };\r\n    WarpRect.prototype.getMask = function (x, y) {\r\n        LOCAL_OFF.set(x, y);\r\n        if (!this._rectangle.containsOffset(LOCAL_OFF)) {\r\n            return false;\r\n        }\r\n        return this._mask.getAt(this._rectangle.index(LOCAL_OFF));\r\n    };\r\n    WarpRect.prototype.getMapIdAt = function (index) {\r\n        var warp = this._getWarpAt(index);\r\n        if (warp) {\r\n            return warp.map;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    };\r\n    WarpRect.prototype.getMap = function (x, y) {\r\n        LOCAL_OFF.set(x, y);\r\n        var warp = this._getWarp(LOCAL_OFF);\r\n        if (warp) {\r\n            return warp.map;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    };\r\n    WarpRect.prototype.getOffsetAt = function (index) {\r\n        var warp = this._getWarpAt(index);\r\n        if (warp) {\r\n            return warp.offset;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    };\r\n    WarpRect.prototype.getOffset = function (x, y) {\r\n        LOCAL_OFF.set(x, y);\r\n        var warp = this._getWarp(LOCAL_OFF);\r\n        if (warp) {\r\n            return warp.offset;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    };\r\n    // mutators\r\n    WarpRect.prototype.setAt = function (index, value, warp) {\r\n        this._mask.setAt(index, value);\r\n        this._warps[index] = warp;\r\n        return this;\r\n    };\r\n    WarpRect.prototype.set = function (off, value, warp) {\r\n        this._mask.setAt(this._rectangle.index(off), value);\r\n        this._warps[this._rectangle.index(off)] = warp;\r\n        return this;\r\n    };\r\n    return WarpRect;\r\n}());\r\nexports.WarpRect = WarpRect;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar geom = __webpack_require__(0);\r\n// tslint:disable:no-bitwise\r\n/**\r\n * These flags determine whether a given tile has walls in any of the cardinal\r\n * directions, and whether there is a \"body\" in the tile.\r\n */\r\nvar TileFlag;\r\n(function (TileFlag) {\r\n    TileFlag[TileFlag[\"WALL_NORTH\"] = 1] = \"WALL_NORTH\";\r\n    TileFlag[TileFlag[\"WALL_EAST\"] = 2] = \"WALL_EAST\";\r\n    TileFlag[TileFlag[\"WALL_WEST\"] = 8] = \"WALL_WEST\";\r\n    TileFlag[TileFlag[\"WALL_SOUTH\"] = 4] = \"WALL_SOUTH\";\r\n    TileFlag[TileFlag[\"BODY\"] = 1 << geom.DIRECTIONS.length] = \"BODY\";\r\n})(TileFlag = exports.TileFlag || (exports.TileFlag = {}));\r\nfunction rangeToString(low, high) {\r\n    return low.toFixed(7) + \"-\" + high.toFixed(7);\r\n}\r\nfunction wedgeToString(wedge) {\r\n    return \"{\" + rangeToString(wedge.low, wedge.high)\r\n        + ((typeof wedge.warp !== 'undefined' ? \"~\" + wedge.warp.map.id : '') + \"}\");\r\n}\r\nfunction wedgesToString(wedges) {\r\n    return \"[\" + wedges.map(wedgeToString).join(', ') + \"]\";\r\n}\r\n/**\r\n * Bodies in this algorithm do not entirely fill their tiles.  This is\r\n * implemented by adjusting the angles of the shadows the bodies cast,\r\n * making the wedge very slightly narrower.  BODY_EPSILON represents the\r\n * amount of reduction on either side of the wedge.\r\n */\r\nexports.BODY_EPSILON = 0.00001;\r\n/**\r\n * Walls do fill the entire tile edge.  With infinite precision, there would be\r\n * no need to adjust the shadow cast by a wall.  But we're using floating point\r\n * math here, which means imprecision can creep in and cause angles not to line\r\n * up properly.  To fix that, we widen the wedges of the shadows cast by walls.\r\n * We must make sure not to widen them as much as we narrow the body shadows,\r\n * or else they might close the gap we want between a body and a wall.\r\n */\r\nexports.WALL_EPSILON = exports.BODY_EPSILON / 4;\r\n/**\r\n * Warps also fill the entire tile edge.  But we don't extend warps as much as\r\n * walls, just in case a sliver of warp might make it past a wall on the other\r\n * side of the warp, at the edge of the warp range.\r\n */\r\nexports.WARP_EPSILON = exports.WALL_EPSILON / 4;\r\nvar DEBUG_CUTWEDGE = false;\r\n/**\r\n * This function cuts a range of angles out of a wedge.\r\n */\r\nfunction cutWedge(wedge, low, high) {\r\n    if (DEBUG_CUTWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(\"cut \" + wedgeToString(wedge) + \" \" + rangeToString(low, high));\r\n    }\r\n    var ret;\r\n    if (low <= wedge.low) {\r\n        if (high >= wedge.high) {\r\n            // wedge is entirely occluded, remove it\r\n            ret = [];\r\n        }\r\n        else if (high >= wedge.low) {\r\n            // low part of wedge is occluded, trim it\r\n            wedge.low = high;\r\n            ret = [wedge];\r\n        }\r\n        else {\r\n            // cut doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    }\r\n    else if (high >= wedge.high) {\r\n        if (low <= wedge.high) {\r\n            // high part of wedge is occluded, trim it\r\n            wedge.high = low;\r\n            ret = [wedge];\r\n        }\r\n        else {\r\n            // cut doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    }\r\n    else {\r\n        // middle part of wedge is occluded, split it\r\n        var nextWedge = {\r\n            low: high,\r\n            high: wedge.high,\r\n            warp: wedge.warp,\r\n            warpCount: wedge.warpCount,\r\n        };\r\n        wedge.high = low;\r\n        ret = [wedge, nextWedge];\r\n    }\r\n    if (DEBUG_CUTWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(\"--> \" + wedgesToString(ret));\r\n    }\r\n    return ret;\r\n}\r\nexports.cutWedge = cutWedge;\r\nfunction cutWedges(wedges, low, high) {\r\n    var ret = new Array();\r\n    for (var _i = 0, wedges_1 = wedges; _i < wedges_1.length; _i++) {\r\n        var wedge = wedges_1[_i];\r\n        ret.push.apply(ret, cutWedge(wedge, low, high));\r\n    }\r\n    return ret;\r\n}\r\nexports.cutWedges = cutWedges;\r\nvar DEBUG_WARPWEDGE = false;\r\nfunction warpWedge(wedge, low, high, warp, warpCount) {\r\n    if (DEBUG_WARPWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(\"warp \" + wedgeToString(wedge) + \" \" + rangeToString(low, high) + \" \" + warp.map.id);\r\n    }\r\n    var ret;\r\n    if (low <= wedge.low) {\r\n        if (high >= wedge.high) {\r\n            // wedge is entirely warped\r\n            wedge.warp = warp;\r\n            wedge.warpCount = warpCount;\r\n            ret = [wedge];\r\n        }\r\n        else if (high >= wedge.low) {\r\n            // low part of wedge is warped, split it into two\r\n            var nextWedge = {\r\n                low: high,\r\n                high: wedge.high,\r\n                warp: wedge.warp,\r\n                warpCount: wedge.warpCount,\r\n            };\r\n            wedge.high = high;\r\n            wedge.warp = warp;\r\n            wedge.warpCount = warpCount;\r\n            ret = [wedge, nextWedge];\r\n        }\r\n        else {\r\n            // warp doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    }\r\n    else if (high >= wedge.high) {\r\n        if (low <= wedge.high) {\r\n            // high part of wedge is occluded, split it into two\r\n            var nextWedge = {\r\n                low: low,\r\n                high: wedge.high,\r\n                warp: warp,\r\n                warpCount: warpCount,\r\n            };\r\n            wedge.high = low;\r\n            ret = [wedge, nextWedge];\r\n        }\r\n        else {\r\n            // warp doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    }\r\n    else {\r\n        // middle part of wedge is occluded, split it into three\r\n        var middleWedge = {\r\n            low: low,\r\n            high: high,\r\n            warp: warp,\r\n            warpCount: warpCount,\r\n        };\r\n        var highWedge = {\r\n            low: high,\r\n            high: wedge.high,\r\n            warp: wedge.warp,\r\n            warpCount: wedge.warpCount,\r\n        };\r\n        wedge.high = low;\r\n        ret = [wedge, middleWedge, highWedge];\r\n    }\r\n    if (DEBUG_WARPWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(\"--> \" + wedgesToString(ret));\r\n    }\r\n    return ret;\r\n}\r\nexports.warpWedge = warpWedge;\r\nfunction warpWedges(wedges, low, high, warp, warpCount) {\r\n    var ret = new Array();\r\n    for (var _i = 0, wedges_2 = wedges; _i < wedges_2.length; _i++) {\r\n        var wedge = wedges_2[_i];\r\n        ret.push.apply(ret, warpWedge(wedge, low, high, warp, warpCount));\r\n    }\r\n    return ret;\r\n}\r\nexports.warpWedges = warpWedges;\r\nfunction whichWedge(wedges, wedgeIndex, centerSlope) {\r\n    // determine the wedge containing centerSlope,\r\n    // or if there isn't one, then the one nearest to centerSlope\r\n    // or if two are very close, the one with the least warp count\r\n    // or if they both have the same warp count, the one with the lowest map id\r\n    var cur = wedgeIndex;\r\n    // skip to the next wedge while it starts before before centerSlope\r\n    while (cur < wedges.length - 1 && wedges[cur + 1].low < centerSlope - exports.WALL_EPSILON * 2) {\r\n        cur++;\r\n    }\r\n    if (cur >= wedges.length - 1 || wedges[cur].high > centerSlope + exports.WALL_EPSILON * 2) {\r\n        // the current wedge contains centerSlope or is past it, so this is the closest\r\n        return cur;\r\n    }\r\n    else if (wedges[cur].high < centerSlope - exports.WALL_EPSILON * 2) {\r\n        // the current wedge isn't very close to centerSlope\r\n        // choose the closest one\r\n        if (Math.abs(wedges[cur].high - centerSlope) < Math.abs(wedges[cur + 1].low - centerSlope)) {\r\n            return cur;\r\n        }\r\n        else {\r\n            return cur + 1;\r\n        }\r\n    }\r\n    else {\r\n        // the current wedge is very close to centerSlope\r\n        if (wedges[cur + 1].low < centerSlope + exports.WALL_EPSILON * 2) {\r\n            // the next wedge is very close to centerSlope too\r\n            // compare warp counts\r\n            if (wedges[cur].warpCount < wedges[cur + 1].warpCount) {\r\n                return cur;\r\n            }\r\n            else if (wedges[cur].warpCount > wedges[cur + 1].warpCount) {\r\n                return cur + 1;\r\n            }\r\n            else {\r\n                // same warp count\r\n                // compare map ids\r\n                if (wedges[cur].warp.map.id < wedges[cur + 1].warp.map.id) {\r\n                    return cur;\r\n                }\r\n                else {\r\n                    return cur + 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // the next wedge isn't very close to centerSlope, use the current one\r\n            return cur;\r\n        }\r\n    }\r\n}\r\nexports.whichWedge = whichWedge;\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// tslint:disable:no-bitwise\r\nvar DirectionFlags;\r\n(function (DirectionFlags) {\r\n    DirectionFlags[DirectionFlags[\"NONE\"] = 0] = \"NONE\";\r\n    DirectionFlags[DirectionFlags[\"NORTH\"] = 1] = \"NORTH\";\r\n    DirectionFlags[DirectionFlags[\"EAST\"] = 2] = \"EAST\";\r\n    DirectionFlags[DirectionFlags[\"SOUTH\"] = 4] = \"SOUTH\";\r\n    DirectionFlags[DirectionFlags[\"WEST\"] = 8] = \"WEST\";\r\n    DirectionFlags[DirectionFlags[\"ALL\"] = 15] = \"ALL\";\r\n})(DirectionFlags = exports.DirectionFlags || (exports.DirectionFlags = {}));\r\nfunction directionFlagsToString(flags) {\r\n    var ret = '[';\r\n    if ((flags & DirectionFlags.NORTH) !== 0) {\r\n        ret += 'N';\r\n    }\r\n    if ((flags & DirectionFlags.EAST) !== 0) {\r\n        ret += 'E';\r\n    }\r\n    if ((flags & DirectionFlags.SOUTH) !== 0) {\r\n        ret += 'S';\r\n    }\r\n    if ((flags & DirectionFlags.WEST) !== 0) {\r\n        ret += 'W';\r\n    }\r\n    return ret + ']';\r\n}\r\nexports.directionFlagsToString = directionFlagsToString;\r\n// conversion\r\nfunction directionFlagsFromDirection(dir) {\r\n    return (1 << dir);\r\n}\r\nexports.directionFlagsFromDirection = directionFlagsFromDirection;\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n// tslint:disable:no-bitwise\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Direction;\r\n(function (Direction) {\r\n    Direction[Direction[\"NORTH\"] = 0] = \"NORTH\";\r\n    Direction[Direction[\"EAST\"] = 1] = \"EAST\";\r\n    Direction[Direction[\"SOUTH\"] = 2] = \"SOUTH\";\r\n    Direction[Direction[\"WEST\"] = 3] = \"WEST\";\r\n})(Direction = exports.Direction || (exports.Direction = {}));\r\nexports.DIRECTIONS = [\r\n    Direction.NORTH,\r\n    Direction.EAST,\r\n    Direction.SOUTH,\r\n    Direction.WEST,\r\n];\r\nvar DIRECTIONS_STR = [\r\n    'N',\r\n    'E',\r\n    'S',\r\n    'W',\r\n];\r\nfunction directionToString(dir) {\r\n    return DIRECTIONS_STR[dir];\r\n}\r\nexports.directionToString = directionToString;\r\nfunction directionOpposite(dir) {\r\n    return ((dir + 2) & 3);\r\n}\r\nexports.directionOpposite = directionOpposite;\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar geom = __webpack_require__(0);\r\nvar LOCAL_OFF = new geom.Offset();\r\nvar MaskRect = /** @class */ (function () {\r\n    function MaskRect(rect, initialValue, outsideValue) {\r\n        if (initialValue === void 0) { initialValue = false; }\r\n        if (outsideValue === void 0) { outsideValue = false; }\r\n        this._rectangle = new geom.Rectangle();\r\n        this._rectangle.copyFrom(rect);\r\n        this._mask = new geom.Mask(rect, initialValue);\r\n        this._outsideValue = outsideValue;\r\n    }\r\n    // accessors\r\n    MaskRect.prototype.toString = function () {\r\n        return this._rectangle.northWest + \"/\" + this._outsideValue + \"\\n\" + this._mask;\r\n    };\r\n    Object.defineProperty(MaskRect.prototype, \"westX\", {\r\n        get: function () {\r\n            return this._rectangle.westX;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MaskRect.prototype, \"northY\", {\r\n        get: function () {\r\n            return this._rectangle.northY;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MaskRect.prototype, \"width\", {\r\n        get: function () {\r\n            return this._rectangle.width;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MaskRect.prototype, \"height\", {\r\n        get: function () {\r\n            return this._rectangle.height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MaskRect.prototype.index = function (off) {\r\n        return this._mask.index(LOCAL_OFF.copyFrom(off).subtractOffset(this._rectangle.northWest));\r\n    };\r\n    MaskRect.prototype.getAt = function (index) {\r\n        return this._mask.getAt(index);\r\n    };\r\n    MaskRect.prototype.get = function (off) {\r\n        if (!this._rectangle.containsOffset(off)) {\r\n            return this._outsideValue;\r\n        }\r\n        return this._mask.getAt(this._rectangle.index(off));\r\n    };\r\n    // mutators\r\n    MaskRect.prototype.setAt = function (index, value) {\r\n        this._mask.setAt(index, value);\r\n        return this;\r\n    };\r\n    MaskRect.prototype.set = function (off, value) {\r\n        this._mask.setAt(this._rectangle.index(off), value);\r\n        return this;\r\n    };\r\n    return MaskRect;\r\n}());\r\nexports.MaskRect = MaskRect;\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar geom = __webpack_require__(0);\r\nvar Mask = /** @class */ (function () {\r\n    // TODO consider Uint8Array for bits\r\n    function Mask(size, initialValue) {\r\n        if (initialValue === void 0) { initialValue = false; }\r\n        this._size = new geom.Size();\r\n        this._size.copyFrom(size);\r\n        this._bits = new Array(this._size.area).fill(initialValue);\r\n    }\r\n    // accessors\r\n    Mask.prototype.toString = function () {\r\n        var ret = '';\r\n        var off = new geom.Offset();\r\n        for (var y = 0; y < this._size.height; y++) {\r\n            for (var x = 0; x < this._size.width; x++) {\r\n                off.set(x, y);\r\n                ret += this.get(off.set(x, y)) ? '☑' : '☐';\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Mask.prototype, \"width\", {\r\n        get: function () {\r\n            return this._size.width;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Mask.prototype, \"height\", {\r\n        get: function () {\r\n            return this._size.height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Mask.prototype.index = function (off) {\r\n        return this._size.index(off);\r\n    };\r\n    Mask.prototype.getAt = function (index) {\r\n        return this._bits[index];\r\n    };\r\n    Mask.prototype.get = function (off) {\r\n        return this.getAt(this.index(off));\r\n    };\r\n    // mutators\r\n    Mask.prototype.setAt = function (index, value) {\r\n        this._bits[index] = value;\r\n        return this;\r\n    };\r\n    Mask.prototype.set = function (off, value) {\r\n        return this.setAt(this.index(off), value);\r\n    };\r\n    return Mask;\r\n}());\r\nexports.Mask = Mask;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar X_FROM_DIRECTION = [0, 1, 0, -1];\r\nvar Y_FROM_DIRECTION = [-1, 0, 1, 0];\r\nvar Offset = /** @class */ (function () {\r\n    function Offset(x, y) {\r\n        if (typeof x === 'undefined') {\r\n            x = 0;\r\n        }\r\n        if (typeof y === 'undefined') {\r\n            y = 0;\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    // accessors\r\n    Offset.prototype.toString = function () {\r\n        return \"(\" + this.x + \",\" + this.y + \")\";\r\n    };\r\n    Offset.prototype.equals = function (other) {\r\n        return this.x === other.x && this.y === other.y;\r\n    };\r\n    Object.defineProperty(Offset.prototype, \"magnitudeChebyshev\", {\r\n        // chebyshev: can move in any direction (diagonals are ok)\r\n        get: function () {\r\n            return Math.max(Math.abs(this.x), Math.abs(this.y));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Offset.prototype, \"magnitudeManhattan\", {\r\n        // manhattan: can move only in cardinal directions (no diagonals)\r\n        get: function () {\r\n            return Math.abs(this.x) + Math.abs(this.y);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // mutators\r\n    Offset.prototype.set = function (x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    };\r\n    Offset.prototype.copyFrom = function (other) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        return this;\r\n    };\r\n    Offset.prototype.setFromDirection = function (dir) {\r\n        this.x = X_FROM_DIRECTION[dir];\r\n        this.y = Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    };\r\n    Offset.prototype.add = function (x, y) {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    };\r\n    Offset.prototype.addSize = function (size) {\r\n        this.x += size.width;\r\n        this.y += size.height;\r\n        return this;\r\n    };\r\n    Offset.prototype.addOffset = function (off) {\r\n        this.x += off.x;\r\n        this.y += off.y;\r\n        return this;\r\n    };\r\n    Offset.prototype.addDirection = function (dir) {\r\n        this.x += X_FROM_DIRECTION[dir];\r\n        this.y += Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    };\r\n    Offset.prototype.addCardinalDirection = function (dir) {\r\n        this.x += X_FROM_DIRECTION[dir];\r\n        this.y += Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    };\r\n    Offset.prototype.subtractOffset = function (off) {\r\n        this.x -= off.x;\r\n        this.y -= off.y;\r\n        return this;\r\n    };\r\n    Offset.prototype.multiply = function (factor) {\r\n        this.x *= factor;\r\n        this.y *= factor;\r\n        return this;\r\n    };\r\n    // utilities\r\n    // chebyshev: can move in any direction (diagonals are ok)\r\n    Offset.prototype.distanceChebyshev = function (other) {\r\n        return this.subtractOffset(other).magnitudeChebyshev;\r\n    };\r\n    // manhattan: can move only in cardinal directions (no diagonals)\r\n    Offset.prototype.distanceManhattan = function (other) {\r\n        return this.subtractOffset(other).magnitudeManhattan;\r\n    };\r\n    return Offset;\r\n}());\r\nexports.Offset = Offset;\r\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar geom = __webpack_require__(0);\r\nvar LOCAL_OFF = new geom.Offset();\r\nvar Rectangle = /** @class */ (function () {\r\n    function Rectangle(westX, northY, width, height) {\r\n        if (typeof westX === 'undefined') {\r\n            westX = 0;\r\n        }\r\n        if (typeof northY === 'undefined') {\r\n            northY = 0;\r\n        }\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.northWest = new geom.Offset(westX, northY);\r\n        this.size = new geom.Size(width, height);\r\n    }\r\n    // accessors\r\n    Rectangle.prototype.toString = function () {\r\n        return \"(\" + this.westX + \",\" + this.northY + \" \" + this.width + \"x\" + this.height + \")\";\r\n    };\r\n    Rectangle.prototype.equals = function (other) {\r\n        return this.westX === other.westX && this.northY === other.northY && this.size.equals(other);\r\n    };\r\n    Object.defineProperty(Rectangle.prototype, \"northY\", {\r\n        get: function () {\r\n            return this.northWest.y;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"southY\", {\r\n        get: function () {\r\n            return this.northWest.y + this.size.height - 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"westX\", {\r\n        get: function () {\r\n            return this.northWest.x;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"eastX\", {\r\n        get: function () {\r\n            return this.northWest.x + this.size.width - 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"width\", {\r\n        get: function () {\r\n            return this.size.width;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"height\", {\r\n        get: function () {\r\n            return this.size.height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"empty\", {\r\n        get: function () {\r\n            return this.size.empty;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle.prototype, \"area\", {\r\n        get: function () {\r\n            return this.size.area;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // mutators\r\n    Rectangle.prototype.set = function (westX, northY, width, height) {\r\n        this.northWest.set(westX, northY);\r\n        this.size.set(width, height);\r\n        return this;\r\n    };\r\n    Rectangle.prototype.copyFrom = function (other) {\r\n        this.northWest.set(other.westX, other.northY);\r\n        this.size.set(other.width, other.height);\r\n        return this;\r\n    };\r\n    Rectangle.prototype.extendToInclude = function (off) {\r\n        var dx = off.x - this.westX;\r\n        if (dx < 0) {\r\n            this.size.width -= dx;\r\n            this.northWest.x = off.x;\r\n        }\r\n        else if (dx >= this.size.width) {\r\n            this.size.width = dx + 1;\r\n        }\r\n        var dy = off.y - this.northWest.y;\r\n        if (dy < 0) {\r\n            this.size.height -= dy;\r\n            this.northWest.y = off.y;\r\n        }\r\n        else if (dy >= this.size.height) {\r\n            this.size.height = dy + 1;\r\n        }\r\n        return this;\r\n    };\r\n    // utilities\r\n    Rectangle.prototype.containsOffset = function (off) {\r\n        return this.size.containsOffset(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    };\r\n    Rectangle.prototype.containsRectangle = function (other) {\r\n        LOCAL_OFF.set(other.westX, other.northY).subtractOffset(this.northWest);\r\n        if (!this.size.containsOffset(LOCAL_OFF)) {\r\n            return false;\r\n        }\r\n        if (other.width === 0 && other.height === 0) {\r\n            return false;\r\n        }\r\n        return this.size.containsOffset(LOCAL_OFF.add(other.width - 1, other.height - 1));\r\n    };\r\n    Rectangle.prototype.overlapsRectangle = function (other) {\r\n        return this.northY <= other.northY + other.height - 1\r\n            && this.southY >= other.northY\r\n            && this.westX <= other.westX + other.width - 1\r\n            && this.eastX >= other.westX\r\n            && !this.empty\r\n            && other.width !== 0 && other.height !== 0;\r\n    };\r\n    Rectangle.prototype.index = function (off) {\r\n        return this.size.index(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    };\r\n    return Rectangle;\r\n}());\r\nexports.Rectangle = Rectangle;\r\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Size = /** @class */ (function () {\r\n    function Size(width, height) {\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    // accessors\r\n    Size.prototype.toString = function () {\r\n        return \"(\" + this.width + \"x\" + this.height + \")\";\r\n    };\r\n    Size.prototype.equals = function (other) {\r\n        return this.width === other.width && this.height === other.height;\r\n    };\r\n    Object.defineProperty(Size.prototype, \"empty\", {\r\n        get: function () {\r\n            return this.width === 0 || this.height === 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Size.prototype, \"area\", {\r\n        get: function () {\r\n            return this.width * this.height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // mutators\r\n    Size.prototype.set = function (width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    };\r\n    Size.prototype.copyFrom = function (other) {\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n        return this;\r\n    };\r\n    Size.prototype.add = function (width, height) {\r\n        this.width += width;\r\n        this.height += height;\r\n        return this;\r\n    };\r\n    Size.prototype.addOffset = function (off) {\r\n        this.width += off.x;\r\n        this.height += off.y;\r\n        return this;\r\n    };\r\n    Size.prototype.multiply = function (factor) {\r\n        this.width *= factor;\r\n        this.height *= factor;\r\n        return this;\r\n    };\r\n    // TODO: rotate\r\n    // utilities\r\n    Size.prototype.containsOffset = function (off) {\r\n        return off.x >= 0 && off.y >= 0 && off.x < this.width && off.y < this.height;\r\n    };\r\n    Size.prototype.index = function (off) {\r\n        return off.y * this.width + off.x;\r\n    };\r\n    return Size;\r\n}());\r\nexports.Size = Size;\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// warp-field-0.1.3.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bin/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ec1277d340c71ac2aa7b","export * from './direction';\r\nexport * from './direction-flags';\r\nexport * from './offset';\r\nexport * from './size';\r\nexport * from './rectangle';\r\nexport * from './mask';\r\nexport * from './mask-rect';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/index.ts","/*\r\n *  WallyFOV\r\n *  github.com/sbj42/WallyFOV\r\n *  James Clark\r\n *  Licensed under the MIT license.\r\n */\r\n\r\nexport {FieldOfViewMap} from './field-of-view';\r\nexport {Warp} from './fov-util';\r\nexport {WarpRect} from './warp-rect';\r\nexport {Direction, DirectionFlags, Offset} from './geom';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import * as geom from './geom';\r\nimport {\r\n    TileFlag,\r\n    Warp,\r\n    Wedge,\r\n    WALL_EPSILON,\r\n    BODY_EPSILON,\r\n    WARP_EPSILON,\r\n    cutWedges,\r\n    warpWedges,\r\n    whichWedge,\r\n} from './fov-util';\r\nimport {WarpRect} from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\n/**\r\n * We avoid heap allocations during the core part of the algorithm by using this\r\n * preallocated offset object.\r\n */\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\n/**\r\n * The FieldOFViewMap represents the map over which the field of view will be\r\n * computed.  It starts out empty.  You can add walls and bodies to it, and then\r\n * use getFieldOfView() to compute the field of view from a given point.\r\n */\r\nexport class FieldOfViewMap {\r\n    readonly id: string;\r\n    private readonly _size = new geom.Size();\r\n    private readonly _tileFlags: number[];\r\n\r\n    private readonly _warps = new Array<Warp>();\r\n    private readonly _tileWarpIds: number[][];\r\n\r\n    constructor(id: string, width: number, height: number, addEdgeWalls = false) {\r\n        this.id = id;\r\n        this._size.set(width, height);\r\n        this._tileFlags = new Array<number>(this._size.area).fill(0);\r\n        if (addEdgeWalls) {\r\n            for (let y = 0; y < this._size.height; y ++) {\r\n                this._addFlag(LOCAL_OFF.set(0, y), TileFlag.WALL_WEST);\r\n                this._addFlag(LOCAL_OFF.set(this._size.width - 1, y), TileFlag.WALL_EAST);\r\n            }\r\n            for (let x = 0; x < this._size.width; x ++) {\r\n                this._addFlag(LOCAL_OFF.set(x, 0), TileFlag.WALL_NORTH);\r\n                this._addFlag(LOCAL_OFF.set(x, this._size.height - 1), TileFlag.WALL_SOUTH);\r\n            }\r\n        }\r\n        this._tileWarpIds = geom.DIRECTIONS.map(() => new Array<number>(this._size.area).fill(-1));\r\n    }\r\n\r\n    private _addFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        this._tileFlags[index] |= flag;\r\n    }\r\n\r\n    private _removeFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        this._tileFlags[index] &= ~flag;\r\n    }\r\n\r\n    private _getFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        return (this._tileFlags[index] & flag) !== 0;\r\n    }\r\n\r\n    private _findOrMakeWarp(map: FieldOfViewMap, offset: geom.OffsetLike) {\r\n        for (let fid = 0; fid < this._warps.length; fid ++) {\r\n            const fwarp = this._warps[fid];\r\n            if (fwarp.map === map && fwarp.offset.equals(offset)) {\r\n                return fid;\r\n            }\r\n        }\r\n        const warp = {\r\n            map,\r\n            offset: new geom.Offset().copyFrom(offset),\r\n        };\r\n        const id = this._warps.length;\r\n        this._warps.push(warp);\r\n        return id;\r\n    }\r\n\r\n    private _addWarp(off: geom.OffsetLike, dir: geom.Direction, warpId: number) {\r\n        const index = this._size.index(off);\r\n        this._tileWarpIds[dir][index] = warpId;\r\n    }\r\n\r\n    private _removeWarp(off: geom.OffsetLike, dir: geom.Direction) {\r\n        const index = this._size.index(off);\r\n        delete this._tileWarpIds[dir][index];\r\n    }\r\n\r\n    private _getWarp(off: geom.OffsetLike, dir: geom.Direction) {\r\n        const index = this._size.index(off);\r\n        const warpId = this._tileWarpIds[dir][index];\r\n        if (warpId === -1) {\r\n            return undefined;\r\n        } else {\r\n            return this._warps[warpId];\r\n        }\r\n    }\r\n\r\n    // setup and maintenance\r\n\r\n    /**\r\n     * Adds a wall at a particular edge.  This automatically adds the\r\n     * corresponding wall on the other side.\r\n     */\r\n    addWall(x: number, y: number, dir: geom.Direction, oneWay = false) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._addFlag(LOCAL_OFF, 1 << dir);\r\n        LOCAL_OFF.addCardinalDirection(dir);\r\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\r\n            this._addFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a wall at a particular edge.  This automatically removes the\r\n     * corresponding wall on the other side.\r\n     */\r\n    removeWall(x: number, y: number, dir: geom.Direction, oneWay = false) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._removeFlag(LOCAL_OFF, 1 << dir);\r\n        LOCAL_OFF.addCardinalDirection(dir);\r\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\r\n            this._removeFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\r\n        }\r\n    }\r\n\r\n    getWalls(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        return this._tileFlags[index] & geom.DirectionFlags.ALL;\r\n    }\r\n\r\n    addBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._addFlag(LOCAL_OFF, TileFlag.BODY);\r\n    }\r\n\r\n    removeBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._removeFlag(LOCAL_OFF, TileFlag.BODY);\r\n    }\r\n\r\n    getBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        return this._tileFlags[index] & TileFlag.BODY;\r\n    }\r\n\r\n    // TODO add length argument\r\n    addWarp(sourceX: number, sourceY: number, dir: geom.Direction,\r\n            targetMap: FieldOfViewMap, targetX: number, targetY: number) {\r\n        LOCAL_OFF.set(targetX - sourceX, targetY - sourceY)\r\n                .addCardinalDirection(geom.directionOpposite(dir));\r\n        const warpId = this._findOrMakeWarp(targetMap, LOCAL_OFF);\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        this._addWarp(LOCAL_OFF, dir, warpId);\r\n    }\r\n\r\n    // TODO add length argument\r\n    removeWarp(sourceX: number, sourceY: number, dir: geom.Direction) {\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        this._removeWarp(LOCAL_OFF, dir);\r\n    }\r\n\r\n    getWarpFlags(sourceX: number, sourceY: number) {\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        let ret = 0;\r\n        geom.DIRECTIONS.forEach((dir) => {\r\n            if (this._getWarp(LOCAL_OFF, dir)) {\r\n                ret |= 1 << dir;\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    // execution\r\n\r\n    /**\r\n     * Compute the field of view for a camera at the given tile.\r\n     * chebyshevRadius is the vision radius.  It uses chebyshev distance\r\n     * (https://en.wikipedia.org/wiki/Chebyshev_distance), which just means\r\n     * that the limit of vision in a large empty field will be square.\r\n     *\r\n     * This returns a MaskRect, which indicates which tiles are visible.\r\n     * maskRect.get(x, y) will return true for visible tiles.\r\n     */\r\n    getFieldOfView(x: number, y: number, chebyshevRadius: number) {\r\n        const origin = new geom.Offset(x, y);\r\n        const boundRect = new geom.Rectangle().set(\r\n            origin.x - chebyshevRadius, origin.y - chebyshevRadius,\r\n            chebyshevRadius * 2 + 1, chebyshevRadius * 2 + 1,\r\n        );\r\n        const mask = new WarpRect(boundRect);\r\n        // the player can always see itself\r\n        mask.set(origin, true, undefined);\r\n        // the field is divided into quadrants\r\n        this._quadrant(mask, origin, chebyshevRadius, -1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius,  1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius, -1,  1);\r\n        this._quadrant(mask, origin, chebyshevRadius,  1,  1);\r\n        return mask;\r\n    }\r\n\r\n    private _quadrant(mask: WarpRect, origin: geom.OffsetLike, chebyshevRadius: number,\r\n                      xDir: number, yDir: number) {\r\n        const {x: startX, y: startY} = origin;\r\n        const endDXY = (chebyshevRadius + 1);\r\n        if (endDXY < 0 || !this._size.containsOffset(origin)) {\r\n            return;\r\n        }\r\n        const farYFlag = [TileFlag.WALL_NORTH, TileFlag.WALL_SOUTH][(yDir + 1) / 2];\r\n        const farXFlag = [TileFlag.WALL_WEST, TileFlag.WALL_EAST][(xDir + 1) / 2];\r\n        const yWarpDir = [geom.Direction.NORTH, geom.Direction.SOUTH][(yDir + 1) / 2];\r\n        const yWarps = this._tileWarpIds[yWarpDir];\r\n        const xWarpDir = [geom.Direction.WEST, geom.Direction.EAST][(xDir + 1) / 2];\r\n        const xWarps = this._tileWarpIds[xWarpDir];\r\n        const startMapIndex = this._size.index(origin);\r\n        const startMaskIndex = mask.index(origin.x, origin.y);\r\n        // Initial wedge is from slope zero to slope infinity (i.e. the whole quadrant)\r\n        const wedges = [{\r\n            low: 0,\r\n            high: Number.POSITIVE_INFINITY,\r\n            warp: undefined,\r\n            warpCount: 0,\r\n        } as Wedge];\r\n        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n        for (let dy = 0, yMapIndex = startMapIndex, yMaskIndex = startMaskIndex;\r\n             dy !== endDXY && wedges.length > 0;\r\n             dy ++, yMapIndex = yMapIndex + yDir * this._size.width, yMaskIndex = yMaskIndex + yDir * mask.width\r\n        ) {\r\n            const divYpos = 1 / (dy + 0.5);\r\n            const divYneg = dy === 0 ? Number.POSITIVE_INFINITY : 1 / (dy - 0.5);\r\n            const divYmid = 1 / dy;\r\n            let wedgeIndex = 0;\r\n            // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n            // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n            for (let dx = 0, mapIndex = yMapIndex, maskIndex = yMaskIndex,\r\n                 slopeY = -0.5 * divYpos, slopeX = 0.5 * divYneg,\r\n                 slopeFar = 0.5 * divYpos, slopeMid = 0;\r\n                 dx !== endDXY && wedgeIndex !== wedges.length;\r\n                 dx ++, mapIndex = mapIndex + xDir, maskIndex = maskIndex + xDir,\r\n                 slopeY = slopeY + divYpos, slopeX = slopeX + divYneg,\r\n                 slopeFar = slopeFar + divYpos, slopeMid = slopeMid + divYmid\r\n            ) {\r\n                // the slopes of the four corners of this tile\r\n                // these are named as follows:\r\n                //   slopeY is the slope closest to the Y axis\r\n                //   slopeFar is the slope to the farthest corner\r\n                //   slopeMid is the slope to the center\r\n                //   slopeX is the slope closest to the X axis\r\n                // these are always true:\r\n                //   slopeY < slopeFar < slopeX\r\n                //   slopeY < slopeMid < slopeX\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---X\r\n                // |   |   | C |\r\n                // +---+---Y---F\r\n\r\n                // the walls of this tile\r\n                // these are named as follows:\r\n                //   wallY is the farthest horizontal wall (slopeY to slopeFar)\r\n                //   wallX is the farthest vertical wall (slopeFar to slopeX)\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---+\r\n                // |   |   | C X\r\n                // +---+---+-Y-+\r\n\r\n                // advance the wedge index until this tile is not after the current wedge\r\n                while (slopeY >= wedges[wedgeIndex].high) {\r\n                    wedgeIndex ++;\r\n                    if (wedgeIndex >= wedges.length) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (wedgeIndex >= wedges.length) {\r\n                    break;\r\n                }\r\n\r\n                // if the current wedge is after this tile, move on\r\n                if (slopeX <= wedges[wedgeIndex].low) {\r\n                    continue;\r\n                }\r\n\r\n                {\r\n                    const centerWedge = whichWedge(wedges, wedgeIndex, slopeMid);\r\n                    mask.setAt(maskIndex, true, wedges[centerWedge].warp);\r\n                }\r\n\r\n                {\r\n                    let wedgeIndexInner = wedgeIndex;\r\n                    while (wedgeIndexInner < wedges.length && slopeX > wedges[wedgeIndexInner].low) {\r\n                        let newWedges = [wedges[wedgeIndexInner]];\r\n                        const {warp} = wedges[wedgeIndexInner];\r\n                        let wallY: boolean;\r\n                        let wallX: boolean;\r\n                        let body: boolean;\r\n                        let warpY: Warp;\r\n                        let warpX: Warp;\r\n                        const nextWarpCount = wedges[wedgeIndexInner].warpCount + 1;\r\n\r\n                        if (typeof warp === 'undefined') {\r\n                            wallY = (this._tileFlags[mapIndex] & farYFlag) !== 0;\r\n                            wallX = (this._tileFlags[mapIndex] & farXFlag) !== 0;\r\n                            body = (dx !== 0 || dy !== 0) && (this._tileFlags[mapIndex] & TileFlag.BODY) !== 0;\r\n                            warpY = this._warps[yWarps[mapIndex]];\r\n                            warpX = this._warps[xWarps[mapIndex]];\r\n                        } else {\r\n                            const {map, offset} = warp;\r\n                            LOCAL_OFF.copyFrom(offset).add(startX + dx * xDir, startY + dy * yDir);\r\n                            wallY = map._getFlag(LOCAL_OFF, farYFlag);\r\n                            wallX = map._getFlag(LOCAL_OFF, farXFlag);\r\n                            body = (dx !== 0 || dy !== 0) && map._getFlag(LOCAL_OFF, TileFlag.BODY);\r\n                            warpY = map._getWarp(LOCAL_OFF, yWarpDir);\r\n                            warpX = map._getWarp(LOCAL_OFF, xWarpDir);\r\n                        }\r\n\r\n                        if (wallX && wallY) {\r\n                            // this tile has both far walls\r\n                            // so we can't see beyond it and the whole range should be cut out of the wedge(s)\r\n                            newWedges = cutWedges(newWedges, slopeY - WALL_EPSILON, slopeX + WALL_EPSILON);\r\n                        } else if (wallX) {\r\n                            if (typeof warpY !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeY - WARP_EPSILON, slopeFar + WARP_EPSILON, warpY, nextWarpCount);\r\n                            }\r\n                            if (body) {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY + BODY_EPSILON, slopeX + WALL_EPSILON);\r\n                            } else {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeFar - WALL_EPSILON, slopeX + WALL_EPSILON);\r\n                            }\r\n                        } else if (wallY) {\r\n                            if (body) {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY - WALL_EPSILON, slopeX - BODY_EPSILON);\r\n                            } else {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY - WALL_EPSILON, slopeFar + WALL_EPSILON);\r\n                            }\r\n                            if (typeof warpX !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeFar - WARP_EPSILON, slopeX + WARP_EPSILON, warpX, nextWarpCount);\r\n                            }\r\n                        } else {\r\n                            if (typeof warpY !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeY - WARP_EPSILON, slopeFar + WARP_EPSILON, warpY, nextWarpCount);\r\n                            }\r\n                            if (body) {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY + BODY_EPSILON, slopeX - BODY_EPSILON);\r\n                            }\r\n                            if (typeof warpX !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeFar - WARP_EPSILON, slopeX + WARP_EPSILON, warpX, nextWarpCount);\r\n                            }\r\n                        }\r\n\r\n                        if (newWedges.length !== 1) {\r\n                            wedges.splice(wedgeIndexInner, 1, ...newWedges);\r\n                        }\r\n                        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n                        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n                        wedgeIndexInner = wedgeIndexInner + newWedges.length;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/field-of-view.ts","import * as geom from './geom';\r\nimport {FieldOfViewMap} from '.';\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport interface Warp {\r\n    map: FieldOfViewMap;\r\n    offset: geom.Offset;\r\n}\r\n\r\nimport {Offset} from './geom';\r\n\r\nexport class WarpRect implements geom.RectangleLike {\r\n    private readonly _rectangle = new geom.Rectangle();\r\n    private readonly _mask: geom.Mask;\r\n    private readonly _warps: Warp[];\r\n\r\n    constructor(rect: geom.RectangleLike, initialValue = false, outsideValue = false) {\r\n        this._rectangle.copyFrom(rect);\r\n        this._mask = new geom.Mask(rect, initialValue);\r\n        this._warps = new Array<Warp>(this._rectangle.area);\r\n    }\r\n\r\n    private _warpsToString() {\r\n        let ret = '';\r\n        const off = new geom.Offset();\r\n        for (let y = 0; y < this._rectangle.height; y ++) {\r\n            for (let x = 0; x < this._rectangle.width; x ++) {\r\n                off.set(x, y).addOffset(this._rectangle.northWest);\r\n                if (this.getMask(off.x, off.y)) {\r\n                    const warp = this._getWarp(off);\r\n                    if (typeof warp === 'undefined') {\r\n                        ret += '-';\r\n                    } else {\r\n                        ret += warp.map.id[0];\r\n                    }\r\n                } else {\r\n                    ret += '.';\r\n                }\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    private _getWarpAt(index: number) {\r\n        return this._warps[index];\r\n    }\r\n\r\n    private _getWarp(off: geom.OffsetLike) {\r\n        return this._warps[this._rectangle.index(off)];\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `${this._rectangle.northWest}\\n${this._warpsToString()}`;\r\n    }\r\n\r\n    get westX() {\r\n        return this._rectangle.westX;\r\n    }\r\n\r\n    get northY() {\r\n        return this._rectangle.northY;\r\n    }\r\n\r\n    get width() {\r\n        return this._rectangle.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._rectangle.height;\r\n    }\r\n\r\n    index(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y).subtractOffset(this._rectangle.northWest);\r\n        return this._mask.index(LOCAL_OFF);\r\n    }\r\n\r\n    getMaskAt(index: number) {\r\n        return this._mask.getAt(index);\r\n    }\r\n\r\n    getMask(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        if (!this._rectangle.containsOffset(LOCAL_OFF)) {\r\n            return false;\r\n        }\r\n        return this._mask.getAt(this._rectangle.index(LOCAL_OFF));\r\n    }\r\n\r\n    getMapIdAt(index: number) {\r\n        const warp = this._getWarpAt(index);\r\n        if (warp) {\r\n            return warp.map;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getMap(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const warp = this._getWarp(LOCAL_OFF);\r\n        if (warp) {\r\n            return warp.map;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getOffsetAt(index: number): Offset {\r\n        const warp = this._getWarpAt(index);\r\n        if (warp) {\r\n            return warp.offset;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getOffset(x: number, y: number): Offset {\r\n        LOCAL_OFF.set(x, y);\r\n        const warp = this._getWarp(LOCAL_OFF);\r\n        if (warp) {\r\n            return warp.offset;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean, warp: Warp) {\r\n        this._mask.setAt(index, value);\r\n        this._warps[index] = warp;\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean, warp: Warp) {\r\n        this._mask.setAt(this._rectangle.index(off), value);\r\n        this._warps[this._rectangle.index(off)] = warp;\r\n        return this;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/warp-rect.ts","import * as geom from './geom';\r\nimport {FieldOfViewMap} from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\n/**\r\n * These flags determine whether a given tile has walls in any of the cardinal\r\n * directions, and whether there is a \"body\" in the tile.\r\n */\r\nexport enum TileFlag {\r\n    WALL_NORTH = 1 << geom.Direction.NORTH,\r\n    WALL_EAST  = 1 << geom.Direction.EAST,\r\n    WALL_WEST  = 1 << geom.Direction.WEST,\r\n    WALL_SOUTH = 1 << geom.Direction.SOUTH,\r\n    BODY       = 1 << geom.DIRECTIONS.length,\r\n}\r\n\r\nexport interface Warp {\r\n    map: FieldOfViewMap;\r\n    offset: geom.Offset;\r\n}\r\n\r\n/**\r\n * In the shadowcasting algorithm, each shadow is represented by a \"wedge\",\r\n * running from a \"low\" angle to a \"high\" angle.  To support warps, we also\r\n * track for each wedge a map (if we've gone through a warp), and an offset\r\n * (the location within the target map relative to the player's location in\r\n * the source map).\r\n */\r\nexport interface Wedge {\r\n    low: number;\r\n    high: number;\r\n    warp: Warp | undefined;\r\n    warpCount: number;\r\n}\r\n\r\nfunction rangeToString(low: number, high: number) {\r\n    return `${low.toFixed(7)}-${high.toFixed(7)}`;\r\n}\r\n\r\nfunction wedgeToString(wedge: Wedge) {\r\n    return `{${rangeToString(wedge.low, wedge.high)}`\r\n        + `${typeof wedge.warp !== 'undefined' ? `~${wedge.warp.map.id}` : ''}}`;\r\n}\r\n\r\nfunction wedgesToString(wedges: Wedge[]) {\r\n    return `[${wedges.map(wedgeToString).join(', ')}]`;\r\n}\r\n\r\n/**\r\n * Bodies in this algorithm do not entirely fill their tiles.  This is\r\n * implemented by adjusting the angles of the shadows the bodies cast,\r\n * making the wedge very slightly narrower.  BODY_EPSILON represents the\r\n * amount of reduction on either side of the wedge.\r\n */\r\nexport const BODY_EPSILON = 0.00001;\r\n\r\n/**\r\n * Walls do fill the entire tile edge.  With infinite precision, there would be\r\n * no need to adjust the shadow cast by a wall.  But we're using floating point\r\n * math here, which means imprecision can creep in and cause angles not to line\r\n * up properly.  To fix that, we widen the wedges of the shadows cast by walls.\r\n * We must make sure not to widen them as much as we narrow the body shadows,\r\n * or else they might close the gap we want between a body and a wall.\r\n */\r\nexport const WALL_EPSILON = BODY_EPSILON / 4;\r\n\r\n/**\r\n * Warps also fill the entire tile edge.  But we don't extend warps as much as\r\n * walls, just in case a sliver of warp might make it past a wall on the other\r\n * side of the warp, at the edge of the warp range.\r\n */\r\nexport const WARP_EPSILON = WALL_EPSILON / 4;\r\n\r\nconst DEBUG_CUTWEDGE: boolean = false;\r\n\r\n/**\r\n * This function cuts a range of angles out of a wedge.\r\n */\r\nexport function cutWedge(wedge: Wedge, low: number, high: number): Wedge[] {\r\n    if (DEBUG_CUTWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`cut ${wedgeToString(wedge)} ${rangeToString(low, high)}`);\r\n    }\r\n    let ret: Wedge[];\r\n    if (low <= wedge.low) {\r\n        if (high >= wedge.high) {\r\n            // wedge is entirely occluded, remove it\r\n            ret = [];\r\n        } else if (high >= wedge.low) {\r\n            // low part of wedge is occluded, trim it\r\n            wedge.low = high;\r\n            ret = [wedge];\r\n        } else {\r\n            // cut doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else if (high >= wedge.high) {\r\n        if (low <= wedge.high) {\r\n            // high part of wedge is occluded, trim it\r\n            wedge.high = low;\r\n            ret = [wedge];\r\n        } else {\r\n            // cut doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else {\r\n        // middle part of wedge is occluded, split it\r\n        const nextWedge = {\r\n            low: high,\r\n            high: wedge.high,\r\n            warp: wedge.warp,\r\n            warpCount: wedge.warpCount,\r\n        };\r\n        wedge.high = low;\r\n        ret = [wedge, nextWedge];\r\n    }\r\n    if (DEBUG_CUTWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`--> ${wedgesToString(ret)}`);\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function cutWedges(wedges: Wedge[], low: number, high: number): Wedge[] {\r\n    const ret = new Array<Wedge>();\r\n    for (const wedge of wedges) {\r\n        ret.push(...cutWedge(wedge, low, high));\r\n    }\r\n    return ret;\r\n}\r\n\r\nconst DEBUG_WARPWEDGE: boolean = false;\r\n\r\nexport function warpWedge(wedge: Wedge, low: number, high: number, warp: Warp, warpCount: number): Wedge[] {\r\n    if (DEBUG_WARPWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`warp ${wedgeToString(wedge)} ${rangeToString(low, high)} ${warp.map.id}`);\r\n    }\r\n    let ret: Wedge[];\r\n    if (low <= wedge.low) {\r\n        if (high >= wedge.high) {\r\n            // wedge is entirely warped\r\n            wedge.warp = warp;\r\n            wedge.warpCount = warpCount;\r\n            ret = [wedge];\r\n        } else if (high >= wedge.low) {\r\n            // low part of wedge is warped, split it into two\r\n            const nextWedge = {\r\n                low: high,\r\n                high: wedge.high,\r\n                warp: wedge.warp,\r\n                warpCount: wedge.warpCount,\r\n            };\r\n            wedge.high = high;\r\n            wedge.warp = warp;\r\n            wedge.warpCount = warpCount;\r\n            ret = [wedge, nextWedge];\r\n        } else {\r\n            // warp doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else if (high >= wedge.high) {\r\n        if (low <= wedge.high) {\r\n            // high part of wedge is occluded, split it into two\r\n            const nextWedge = {\r\n                low,\r\n                high: wedge.high,\r\n                warp,\r\n                warpCount,\r\n            };\r\n            wedge.high = low;\r\n            ret = [wedge, nextWedge];\r\n        } else {\r\n            // warp doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else {\r\n        // middle part of wedge is occluded, split it into three\r\n        const middleWedge = {\r\n            low,\r\n            high,\r\n            warp,\r\n            warpCount,\r\n        };\r\n        const highWedge = {\r\n            low: high,\r\n            high: wedge.high,\r\n            warp: wedge.warp,\r\n            warpCount: wedge.warpCount,\r\n        };\r\n        wedge.high = low;\r\n        ret = [wedge, middleWedge, highWedge];\r\n    }\r\n    if (DEBUG_WARPWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`--> ${wedgesToString(ret)}`);\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function warpWedges(wedges: Wedge[], low: number, high: number, warp: Warp, warpCount: number): Wedge[] {\r\n    const ret = new Array<Wedge>();\r\n    for (const wedge of wedges) {\r\n        ret.push(...warpWedge(wedge, low, high, warp, warpCount));\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function whichWedge(wedges: Wedge[], wedgeIndex: number, centerSlope: number) {\r\n    // determine the wedge containing centerSlope,\r\n    // or if there isn't one, then the one nearest to centerSlope\r\n    // or if two are very close, the one with the least warp count\r\n    // or if they both have the same warp count, the one with the lowest map id\r\n    let cur = wedgeIndex;\r\n    // skip to the next wedge while it starts before before centerSlope\r\n    while (cur < wedges.length - 1 && wedges[cur + 1].low < centerSlope - WALL_EPSILON * 2) {\r\n        cur ++;\r\n    }\r\n    if (cur >= wedges.length - 1 || wedges[cur].high > centerSlope + WALL_EPSILON * 2) {\r\n        // the current wedge contains centerSlope or is past it, so this is the closest\r\n        return cur;\r\n    } else if (wedges[cur].high < centerSlope - WALL_EPSILON * 2) {\r\n        // the current wedge isn't very close to centerSlope\r\n        // choose the closest one\r\n        if (Math.abs(wedges[cur].high - centerSlope) < Math.abs(wedges[cur + 1].low - centerSlope)) {\r\n            return cur;\r\n        } else {\r\n            return cur + 1;\r\n        }\r\n    } else {\r\n        // the current wedge is very close to centerSlope\r\n        if (wedges[cur + 1].low < centerSlope + WALL_EPSILON * 2) {\r\n            // the next wedge is very close to centerSlope too\r\n            // compare warp counts\r\n            if (wedges[cur].warpCount < wedges[cur + 1].warpCount) {\r\n                return cur;\r\n            } else if (wedges[cur].warpCount > wedges[cur + 1].warpCount) {\r\n                return cur + 1;\r\n            } else {\r\n                // same warp count\r\n                // compare map ids\r\n                if (wedges[cur].warp.map.id < wedges[cur + 1].warp.map.id) {\r\n                    return cur;\r\n                } else {\r\n                    return cur + 1;\r\n                }\r\n            }\r\n        } else {\r\n            // the next wedge isn't very close to centerSlope, use the current one\r\n            return cur;\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/fov-util.ts","import * as geom from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\nexport enum DirectionFlags {\r\n    NONE  = 0,\r\n    NORTH = 1,\r\n    EAST  = 2,\r\n    SOUTH = 4,\r\n    WEST  = 8,\r\n    ALL   = 15,\r\n}\r\n\r\nexport function directionFlagsToString(flags: DirectionFlags) {\r\n    let ret = '[';\r\n    if ((flags & DirectionFlags.NORTH) !== 0) {\r\n        ret += 'N';\r\n    }\r\n    if ((flags & DirectionFlags.EAST) !== 0) {\r\n        ret += 'E';\r\n    }\r\n    if ((flags & DirectionFlags.SOUTH) !== 0) {\r\n        ret += 'S';\r\n    }\r\n    if ((flags & DirectionFlags.WEST) !== 0) {\r\n        ret += 'W';\r\n    }\r\n    return ret + ']';\r\n}\r\n\r\n// conversion\r\n\r\nexport function directionFlagsFromDirection(dir: geom.Direction) {\r\n    return (1 << dir) as DirectionFlags;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/direction-flags.ts","// tslint:disable:no-bitwise\r\n\r\nexport enum Direction {\r\n    NORTH = 0,\r\n    EAST  = 1,\r\n    SOUTH = 2,\r\n    WEST  = 3,\r\n}\r\n\r\nexport const DIRECTIONS = [\r\n    Direction.NORTH,\r\n    Direction.EAST,\r\n    Direction.SOUTH,\r\n    Direction.WEST,\r\n];\r\n\r\nconst DIRECTIONS_STR = [\r\n    'N',\r\n    'E',\r\n    'S',\r\n    'W',\r\n];\r\n\r\nexport function directionToString(dir: Direction) {\r\n    return DIRECTIONS_STR[dir];\r\n}\r\n\r\nexport function directionOpposite(dir: Direction) {\r\n    return ((dir + 2) & 3) as Direction;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/direction.ts","import * as geom from '.';\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport class MaskRect implements geom.RectangleLike {\r\n    private readonly _rectangle = new geom.Rectangle();\r\n    private readonly _mask: geom.Mask;\r\n    private readonly _outsideValue: boolean;\r\n\r\n    constructor(rect: geom.RectangleLike, initialValue = false, outsideValue = false) {\r\n        this._rectangle.copyFrom(rect);\r\n        this._mask = new geom.Mask(rect, initialValue);\r\n        this._outsideValue = outsideValue;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `${this._rectangle.northWest}/${this._outsideValue}\\n${this._mask}`;\r\n    }\r\n\r\n    get westX() {\r\n        return this._rectangle.westX;\r\n    }\r\n\r\n    get northY() {\r\n        return this._rectangle.northY;\r\n    }\r\n\r\n    get width() {\r\n        return this._rectangle.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._rectangle.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this._mask.index(LOCAL_OFF.copyFrom(off).subtractOffset(this._rectangle.northWest));\r\n    }\r\n\r\n    getAt(index: number) {\r\n        return this._mask.getAt(index);\r\n    }\r\n\r\n    get(off: geom.OffsetLike) {\r\n        if (!this._rectangle.containsOffset(off)) {\r\n            return this._outsideValue;\r\n        }\r\n        return this._mask.getAt(this._rectangle.index(off));\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean) {\r\n        this._mask.setAt(index, value);\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean) {\r\n        this._mask.setAt(this._rectangle.index(off), value);\r\n        return this;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/mask-rect.ts","import * as geom from '.';\r\n\r\nexport class Mask implements geom.SizeLike {\r\n    private readonly _size = new geom.Size();\r\n    private readonly _bits: boolean[];\r\n    // TODO consider Uint8Array for bits\r\n\r\n    constructor(size: geom.SizeLike, initialValue = false) {\r\n        this._size.copyFrom(size);\r\n        this._bits = new Array<boolean>(this._size.area).fill(initialValue);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        let ret = '';\r\n        const off = new geom.Offset();\r\n        for (let y = 0; y < this._size.height; y ++) {\r\n            for (let x = 0; x < this._size.width; x ++) {\r\n                off.set(x, y);\r\n                ret += this.get(off.set(x, y)) ? '☑' : '☐';\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    get width() {\r\n        return this._size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._size.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this._size.index(off);\r\n    }\r\n\r\n    getAt(index: number) {\r\n        return this._bits[index];\r\n    }\r\n\r\n    get(off: geom.OffsetLike) {\r\n        return this.getAt(this.index(off));\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean) {\r\n        this._bits[index] = value;\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean) {\r\n        return this.setAt(this.index(off), value);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/mask.ts","import * as geom from '.';\r\n\r\nconst X_FROM_DIRECTION = [  0, 1, 0, -1 ];\r\nconst Y_FROM_DIRECTION = [ -1, 0, 1,  0 ];\r\n\r\nexport interface OffsetLike {\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\nexport class Offset implements OffsetLike {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor();\r\n    constructor(x: number, y: number);\r\n    constructor(x?: number, y?: number) {\r\n        if (typeof x === 'undefined') {\r\n            x = 0;\r\n        }\r\n        if (typeof y === 'undefined') {\r\n            y = 0;\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.x},${this.y})`;\r\n    }\r\n\r\n    equals(other: OffsetLike) {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    // chebyshev: can move in any direction (diagonals are ok)\r\n    get magnitudeChebyshev() {\r\n        return Math.max(Math.abs(this.x), Math.abs(this.y));\r\n    }\r\n\r\n    // manhattan: can move only in cardinal directions (no diagonals)\r\n    get magnitudeManhattan(): number {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: OffsetLike) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        return this;\r\n    }\r\n\r\n    setFromDirection(dir: geom.Direction) {\r\n        this.x = X_FROM_DIRECTION[dir];\r\n        this.y = Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    add(x: number, y: number) {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n\r\n    addSize(size: geom.SizeLike) {\r\n        this.x += size.width;\r\n        this.y += size.height;\r\n        return this;\r\n    }\r\n\r\n    addOffset(off: OffsetLike) {\r\n        this.x += off.x;\r\n        this.y += off.y;\r\n        return this;\r\n    }\r\n\r\n    addDirection(dir: geom.Direction) {\r\n        this.x += X_FROM_DIRECTION[dir];\r\n        this.y += Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    addCardinalDirection(dir: geom.Direction) {\r\n        this.x += X_FROM_DIRECTION[dir];\r\n        this.y += Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    subtractOffset(off: OffsetLike) {\r\n        this.x -= off.x;\r\n        this.y -= off.y;\r\n        return this;\r\n    }\r\n\r\n    multiply(factor: number) {\r\n        this.x *= factor;\r\n        this.y *= factor;\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    // chebyshev: can move in any direction (diagonals are ok)\r\n    distanceChebyshev(other: OffsetLike) {\r\n        return this.subtractOffset(other).magnitudeChebyshev;\r\n    }\r\n\r\n    // manhattan: can move only in cardinal directions (no diagonals)\r\n    distanceManhattan(other?: OffsetLike): number {\r\n        return this.subtractOffset(other).magnitudeManhattan;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/offset.ts","import * as geom from '.';\r\n\r\nexport interface RectangleLike extends geom.SizeLike {\r\n    readonly westX: number;\r\n    readonly northY: number;\r\n}\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport class Rectangle implements RectangleLike, geom.SizeLike {\r\n    northWest: geom.Offset;\r\n    size: geom.Size;\r\n\r\n    constructor();\r\n    constructor(westX: number, northY: number, width: number, height: number);\r\n    constructor(westX?: number, northY?: number, width?: number, height?: number) {\r\n        if (typeof westX === 'undefined') {\r\n            westX = 0;\r\n        }\r\n        if (typeof northY === 'undefined') {\r\n            northY = 0;\r\n        }\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.northWest = new geom.Offset(westX, northY);\r\n        this.size = new geom.Size(width, height);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.westX},${this.northY} ${this.width}x${this.height})`;\r\n    }\r\n\r\n    equals(other: RectangleLike) {\r\n        return this.westX === other.westX && this.northY === other.northY && this.size.equals(other);\r\n    }\r\n\r\n    get northY() {\r\n        return this.northWest.y;\r\n    }\r\n\r\n    get southY() {\r\n        return this.northWest.y + this.size.height - 1;\r\n    }\r\n\r\n    get westX() {\r\n        return this.northWest.x;\r\n    }\r\n\r\n    get eastX() {\r\n        return this.northWest.x + this.size.width - 1;\r\n    }\r\n\r\n    get width() {\r\n        return this.size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this.size.height;\r\n    }\r\n\r\n    get empty() {\r\n        return this.size.empty;\r\n    }\r\n\r\n    get area() {\r\n        return this.size.area;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(westX: number, northY: number, width: number, height: number) {\r\n        this.northWest.set(westX, northY);\r\n        this.size.set(width, height);\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: RectangleLike) {\r\n        this.northWest.set(other.westX, other.northY);\r\n        this.size.set(other.width, other.height);\r\n        return this;\r\n    }\r\n\r\n    extendToInclude(off: geom.OffsetLike) {\r\n        const dx = off.x - this.westX;\r\n        if (dx < 0) {\r\n            this.size.width -= dx;\r\n            this.northWest.x = off.x;\r\n        } else if (dx >= this.size.width) {\r\n            this.size.width = dx + 1;\r\n        }\r\n        const dy = off.y - this.northWest.y;\r\n        if (dy < 0) {\r\n            this.size.height -= dy;\r\n            this.northWest.y = off.y;\r\n        } else if (dy >= this.size.height) {\r\n            this.size.height = dy + 1;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return this.size.containsOffset(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n\r\n    containsRectangle(other: RectangleLike) {\r\n        LOCAL_OFF.set(other.westX, other.northY).subtractOffset(this.northWest);\r\n        if (!this.size.containsOffset(LOCAL_OFF)) {\r\n            return false;\r\n        }\r\n        if (other.width === 0 && other.height === 0) {\r\n            return false;\r\n        }\r\n        return this.size.containsOffset(LOCAL_OFF.add(other.width - 1, other.height - 1));\r\n    }\r\n\r\n    overlapsRectangle(other: RectangleLike) {\r\n        return this.northY <= other.northY + other.height - 1\r\n            && this.southY >= other.northY\r\n            && this.westX <= other.westX + other.width - 1\r\n            && this.eastX >= other.westX\r\n            && !this.empty\r\n            && other.width !== 0 && other.height !== 0;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this.size.index(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/rectangle.ts","import * as geom from '.';\r\n\r\nexport interface SizeLike {\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport class Size implements SizeLike {\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor();\r\n    constructor(width: number, height: number);\r\n    constructor(width?: number, height?: number) {\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.width}x${this.height})`;\r\n    }\r\n\r\n    equals(other: SizeLike) {\r\n        return this.width === other.width && this.height === other.height;\r\n    }\r\n\r\n    get empty() {\r\n        return this.width === 0 || this.height === 0;\r\n    }\r\n\r\n    get area() {\r\n        return this.width * this.height;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: SizeLike) {\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n        return this;\r\n    }\r\n\r\n    add(width: number, height: number) {\r\n        this.width += width;\r\n        this.height += height;\r\n        return this;\r\n    }\r\n\r\n    addOffset(off: geom.OffsetLike) {\r\n        this.width += off.x;\r\n        this.height += off.y;\r\n        return this;\r\n    }\r\n\r\n    multiply(factor: number) {\r\n        this.width *= factor;\r\n        this.height *= factor;\r\n        return this;\r\n    }\r\n\r\n    // TODO: rotate\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return off.x >= 0 && off.y >= 0 && off.x < this.width && off.y < this.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return off.y * this.width + off.x;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geom/size.ts"],"sourceRoot":""}