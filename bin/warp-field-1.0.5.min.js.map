{"version":3,"sources":["webpack://WarpField/webpack/bootstrap","webpack://WarpField/./src/geom/index.ts","webpack://WarpField/./src/index.ts","webpack://WarpField/./src/field-of-view.ts","webpack://WarpField/./src/geom/direction.ts","webpack://WarpField/./src/geom/direction-flags.ts","webpack://WarpField/./src/geom/offset.ts","webpack://WarpField/./src/geom/size.ts","webpack://WarpField/./src/geom/rectangle.ts","webpack://WarpField/./src/geom/mask.ts","webpack://WarpField/./src/fov-util.ts","webpack://WarpField/./src/warp-rect.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","FieldOfViewMap","WarpRect","Direction","DirectionFlags","Offset","LOCAL_OFF","geom","id","width","height","addEdgeWalls","_size","Size","_warps","Array","this","set","_tileFlags","area","fill","y","_addFlag","TileFlag","WALL_WEST","WALL_EAST","x","WALL_NORTH","WALL_SOUTH","_tileWarpIds","DIRECTIONS","map","off","flag","index","_removeFlag","_getFlag","_findOrMakeWarp","offset","fid","length","fwarp","equals","warp","copyFrom","push","_addWarp","dir","warpId","_removeWarp","_getWarp","addWall","oneWay","addCardinalDirection","containsOffset","directionOpposite","removeWall","getWalls","ALL","getWall","addBody","BODY","removeBody","getBody","addWarp","sourceX","sourceY","targetMap","targetX","targetY","removeWarp","getWarpFlags","ret","forEach","getWarpFlag","getFieldOfView","chebyshevRadius","origin","boundRect","Rectangle","mask","undefined","_quadrant","xDir","yDir","startX","startY","endDXY","farYFlag","farXFlag","yWarpDir","NORTH","SOUTH","yWarps","xWarpDir","WEST","EAST","xWarps","startMapIndex","startMaskIndex","wedges","low","high","Number","POSITIVE_INFINITY","warpCount","dy","yMapIndex","yMaskIndex","divYpos","divYneg","divYmid","wedgeIndex","dx","mapIndex","maskIndex","slopeY","slopeX","slopeFar","slopeMid","centerWedge","whichWedge","setAt","wedgeIndexInner","newWedges","wallY","wallX","body","warpY","warpX","nextWarpCount","add","cutWedges","WALL_EPSILON","warpWedges","WARP_EPSILON","BODY_EPSILON","splice","DIRECTIONS_STR","flags","X_FROM_DIRECTION","Y_FROM_DIRECTION","toString","other","Math","max","abs","setFromDirection","addSize","size","addOffset","addDirection","subtractOffset","multiply","factor","distanceChebyshev","magnitudeChebyshev","distanceManhattan","magnitudeManhattan","westX","northY","northWest","empty","extendToInclude","containsRectangle","overlapsRectangle","southY","eastX","initialValue","_bits","getAt","Mask","cutWedge","wedge","nextWedge","warpWedge","middleWedge","highWedge","centerSlope","cur","rect","_rectangle","_mask","_warpsToString","getMask","_getWarpAt","getMaskAt","getMapAt","getMap","getOffsetAt","getOffset"],"mappings":"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","file":"warp-field-1.0.5.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bin/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export * from './direction';\r\nexport * from './direction-flags';\r\nexport * from './offset';\r\nexport * from './size';\r\nexport * from './rectangle';\r\nexport * from './mask';\r\n","/*\r\n *  WarpField\r\n *  github.com/sbj42/warp-field\r\n *  James Clark\r\n *  Licensed under the MIT license.\r\n */\r\n\r\nexport {FieldOfViewMap} from './field-of-view';\r\nexport {Warp} from './fov-util';\r\nexport {WarpRect} from './warp-rect';\r\nexport {Direction, DirectionFlags, Offset} from './geom';\r\n","import * as geom from './geom';\r\nimport {\r\n    TileFlag,\r\n    Warp,\r\n    Wedge,\r\n    WALL_EPSILON,\r\n    BODY_EPSILON,\r\n    WARP_EPSILON,\r\n    cutWedges,\r\n    warpWedges,\r\n    whichWedge,\r\n} from './fov-util';\r\nimport {WarpRect} from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\n/**\r\n * We avoid heap allocations during the core part of the algorithm by using this\r\n * preallocated offset object.\r\n */\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\n/**\r\n * The FieldOFViewMap represents the map over which the field of view will be\r\n * computed.  It starts out empty.  You can add walls and bodies to it, and then\r\n * use getFieldOfView() to compute the field of view from a given point.\r\n */\r\nexport class FieldOfViewMap {\r\n    readonly id: string;\r\n    private readonly _size = new geom.Size();\r\n    private readonly _tileFlags: number[];\r\n\r\n    private readonly _warps = new Array<Warp>();\r\n    private readonly _tileWarpIds: number[][];\r\n\r\n    constructor(id: string, width: number, height: number, addEdgeWalls = false) {\r\n        this.id = id;\r\n        this._size.set(width, height);\r\n        this._tileFlags = new Array<number>(this._size.area).fill(0);\r\n        if (addEdgeWalls) {\r\n            for (let y = 0; y < this._size.height; y ++) {\r\n                this._addFlag(LOCAL_OFF.set(0, y), TileFlag.WALL_WEST);\r\n                this._addFlag(LOCAL_OFF.set(this._size.width - 1, y), TileFlag.WALL_EAST);\r\n            }\r\n            for (let x = 0; x < this._size.width; x ++) {\r\n                this._addFlag(LOCAL_OFF.set(x, 0), TileFlag.WALL_NORTH);\r\n                this._addFlag(LOCAL_OFF.set(x, this._size.height - 1), TileFlag.WALL_SOUTH);\r\n            }\r\n        }\r\n        this._tileWarpIds = geom.DIRECTIONS.map(() => new Array<number>(this._size.area).fill(-1));\r\n    }\r\n\r\n    private _addFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        this._tileFlags[index] |= flag;\r\n    }\r\n\r\n    private _removeFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        this._tileFlags[index] &= ~flag;\r\n    }\r\n\r\n    private _getFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        return (this._tileFlags[index] & flag) !== 0;\r\n    }\r\n\r\n    private _findOrMakeWarp(map: FieldOfViewMap, offset: geom.OffsetLike) {\r\n        for (let fid = 0; fid < this._warps.length; fid ++) {\r\n            const fwarp = this._warps[fid];\r\n            if (fwarp.map === map && fwarp.offset.equals(offset)) {\r\n                return fid;\r\n            }\r\n        }\r\n        const warp = {\r\n            map,\r\n            offset: new geom.Offset().copyFrom(offset),\r\n        };\r\n        const id = this._warps.length;\r\n        this._warps.push(warp);\r\n        return id;\r\n    }\r\n\r\n    private _addWarp(off: geom.OffsetLike, dir: geom.Direction, warpId: number) {\r\n        const index = this._size.index(off);\r\n        this._tileWarpIds[dir][index] = warpId;\r\n    }\r\n\r\n    private _removeWarp(off: geom.OffsetLike, dir: geom.Direction) {\r\n        const index = this._size.index(off);\r\n        delete this._tileWarpIds[dir][index];\r\n    }\r\n\r\n    private _getWarp(off: geom.OffsetLike, dir: geom.Direction) {\r\n        const index = this._size.index(off);\r\n        const warpId = this._tileWarpIds[dir][index];\r\n        if (warpId === -1) {\r\n            return undefined;\r\n        } else {\r\n            return this._warps[warpId];\r\n        }\r\n    }\r\n\r\n    // setup and maintenance\r\n\r\n    /**\r\n     * Adds a wall at a particular edge.  This automatically adds the\r\n     * corresponding wall on the other side.\r\n     */\r\n    addWall(x: number, y: number, dir: geom.Direction, oneWay = false) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._addFlag(LOCAL_OFF, 1 << dir);\r\n        LOCAL_OFF.addCardinalDirection(dir);\r\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\r\n            this._addFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a wall at a particular edge.  This automatically removes the\r\n     * corresponding wall on the other side.\r\n     */\r\n    removeWall(x: number, y: number, dir: geom.Direction, oneWay = false) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._removeFlag(LOCAL_OFF, 1 << dir);\r\n        LOCAL_OFF.addCardinalDirection(dir);\r\n        if (!oneWay && this._size.containsOffset(LOCAL_OFF)) {\r\n            this._removeFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\r\n        }\r\n    }\r\n\r\n    getWalls(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        return this._tileFlags[index] & geom.DirectionFlags.ALL;\r\n    }\r\n\r\n    getWall(x: number, y: number, dir: geom.Direction) {\r\n        return (this.getWalls(x, y) & (1 << dir)) !== 0;\r\n    }\r\n\r\n    addBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._addFlag(LOCAL_OFF, TileFlag.BODY);\r\n    }\r\n\r\n    removeBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._removeFlag(LOCAL_OFF, TileFlag.BODY);\r\n    }\r\n\r\n    getBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        return (this._tileFlags[index] & TileFlag.BODY) !== 0;\r\n    }\r\n\r\n    // TODO add length argument\r\n    addWarp(sourceX: number, sourceY: number, dir: geom.Direction,\r\n            targetMap: FieldOfViewMap, targetX: number, targetY: number) {\r\n        LOCAL_OFF.set(targetX - sourceX, targetY - sourceY)\r\n                .addCardinalDirection(geom.directionOpposite(dir));\r\n        const warpId = this._findOrMakeWarp(targetMap, LOCAL_OFF);\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        this._addWarp(LOCAL_OFF, dir, warpId);\r\n    }\r\n\r\n    // TODO add length argument\r\n    removeWarp(sourceX: number, sourceY: number, dir: geom.Direction) {\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        this._removeWarp(LOCAL_OFF, dir);\r\n    }\r\n\r\n    getWarpFlags(sourceX: number, sourceY: number) {\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        let ret = 0;\r\n        geom.DIRECTIONS.forEach((dir) => {\r\n            if (this._getWarp(LOCAL_OFF, dir)) {\r\n                ret |= 1 << dir;\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    getWarpFlag(sourceX: number, sourceY: number, dir: geom.Direction) {\r\n        LOCAL_OFF.set(sourceX, sourceY);\r\n        return this._getWarp(LOCAL_OFF, dir) != null;\r\n    }\r\n\r\n    // execution\r\n\r\n    /**\r\n     * Compute the field of view for a camera at the given tile.\r\n     * chebyshevRadius is the vision radius.  It uses chebyshev distance\r\n     * (https://en.wikipedia.org/wiki/Chebyshev_distance), which just means\r\n     * that the limit of vision in a large empty field will be square.\r\n     *\r\n     * This returns a WarpRect, which indicates which tiles are visible\r\n     * and which map is seen in each tile.  warpRect.getMask(x, y) will return\r\n     * true for visible tiles, warpRect.getMap(x, y) will return\r\n     * the map for that tile, and warpRect.getOffset(x, y) will return the\r\n     * location in that map which is visible there.\r\n     */\r\n    getFieldOfView(x: number, y: number, chebyshevRadius: number) {\r\n        const origin = new geom.Offset(x, y);\r\n        const boundRect = new geom.Rectangle().set(\r\n            origin.x - chebyshevRadius, origin.y - chebyshevRadius,\r\n            chebyshevRadius * 2 + 1, chebyshevRadius * 2 + 1,\r\n        );\r\n        const mask = new WarpRect(boundRect);\r\n        // the player can always see itself\r\n        mask.set(origin, true, undefined);\r\n        // the field is divided into quadrants\r\n        this._quadrant(mask, origin, chebyshevRadius, -1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius,  1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius, -1,  1);\r\n        this._quadrant(mask, origin, chebyshevRadius,  1,  1);\r\n        return mask;\r\n    }\r\n\r\n    private _quadrant(mask: WarpRect, origin: geom.OffsetLike, chebyshevRadius: number,\r\n                      xDir: number, yDir: number) {\r\n        const {x: startX, y: startY} = origin;\r\n        const endDXY = (chebyshevRadius + 1);\r\n        if (endDXY < 0 || !this._size.containsOffset(origin)) {\r\n            return;\r\n        }\r\n        const farYFlag = [TileFlag.WALL_NORTH, TileFlag.WALL_SOUTH][(yDir + 1) / 2];\r\n        const farXFlag = [TileFlag.WALL_WEST, TileFlag.WALL_EAST][(xDir + 1) / 2];\r\n        const yWarpDir = [geom.Direction.NORTH, geom.Direction.SOUTH][(yDir + 1) / 2];\r\n        const yWarps = this._tileWarpIds[yWarpDir];\r\n        const xWarpDir = [geom.Direction.WEST, geom.Direction.EAST][(xDir + 1) / 2];\r\n        const xWarps = this._tileWarpIds[xWarpDir];\r\n        const startMapIndex = this._size.index(origin);\r\n        const startMaskIndex = mask.index(origin.x, origin.y);\r\n        // Initial wedge is from slope zero to slope infinity (i.e. the whole quadrant)\r\n        const wedges = [{\r\n            low: 0,\r\n            high: Number.POSITIVE_INFINITY,\r\n            warp: undefined,\r\n            warpCount: 0,\r\n        } as Wedge];\r\n        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n        for (let dy = 0, yMapIndex = startMapIndex, yMaskIndex = startMaskIndex;\r\n             dy !== endDXY && wedges.length > 0;\r\n             dy ++, yMapIndex = yMapIndex + yDir * this._size.width, yMaskIndex = yMaskIndex + yDir * mask.width\r\n        ) {\r\n            const divYpos = 1 / (dy + 0.5);\r\n            const divYneg = dy === 0 ? Number.POSITIVE_INFINITY : 1 / (dy - 0.5);\r\n            const divYmid = 1 / dy;\r\n            let wedgeIndex = 0;\r\n            // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n            // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n            for (let dx = 0, mapIndex = yMapIndex, maskIndex = yMaskIndex,\r\n                 slopeY = -0.5 * divYpos, slopeX = 0.5 * divYneg,\r\n                 slopeFar = 0.5 * divYpos, slopeMid = 0;\r\n                 dx !== endDXY && wedgeIndex !== wedges.length;\r\n                 dx ++, mapIndex = mapIndex + xDir, maskIndex = maskIndex + xDir,\r\n                 slopeY = slopeY + divYpos, slopeX = slopeX + divYneg,\r\n                 slopeFar = slopeFar + divYpos, slopeMid = slopeMid + divYmid\r\n            ) {\r\n                // the slopes of the four corners of this tile\r\n                // these are named as follows:\r\n                //   slopeY is the slope closest to the Y axis\r\n                //   slopeFar is the slope to the farthest corner\r\n                //   slopeMid is the slope to the center\r\n                //   slopeX is the slope closest to the X axis\r\n                // these are always true:\r\n                //   slopeY < slopeFar < slopeX\r\n                //   slopeY < slopeMid < slopeX\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---X\r\n                // |   |   | C |\r\n                // +---+---Y---F\r\n\r\n                // the walls of this tile\r\n                // these are named as follows:\r\n                //   wallY is the farthest horizontal wall (slopeY to slopeFar)\r\n                //   wallX is the farthest vertical wall (slopeFar to slopeX)\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---+\r\n                // |   |   | C X\r\n                // +---+---+-Y-+\r\n\r\n                // advance the wedge index until this tile is not after the current wedge\r\n                while (slopeY >= wedges[wedgeIndex].high) {\r\n                    wedgeIndex ++;\r\n                    if (wedgeIndex >= wedges.length) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (wedgeIndex >= wedges.length) {\r\n                    break;\r\n                }\r\n\r\n                // if the current wedge is after this tile, move on\r\n                if (slopeX <= wedges[wedgeIndex].low) {\r\n                    continue;\r\n                }\r\n\r\n                {\r\n                    const centerWedge = whichWedge(wedges, wedgeIndex, slopeMid);\r\n                    mask.setAt(maskIndex, true, wedges[centerWedge].warp);\r\n                }\r\n\r\n                {\r\n                    let wedgeIndexInner = wedgeIndex;\r\n                    while (wedgeIndexInner < wedges.length && slopeX > wedges[wedgeIndexInner].low) {\r\n                        let newWedges = [wedges[wedgeIndexInner]];\r\n                        const {warp} = wedges[wedgeIndexInner];\r\n                        let wallY: boolean;\r\n                        let wallX: boolean;\r\n                        let body: boolean;\r\n                        let warpY: Warp;\r\n                        let warpX: Warp;\r\n                        const nextWarpCount = wedges[wedgeIndexInner].warpCount + 1;\r\n\r\n                        if (typeof warp === 'undefined') {\r\n                            wallY = (this._tileFlags[mapIndex] & farYFlag) !== 0;\r\n                            wallX = (this._tileFlags[mapIndex] & farXFlag) !== 0;\r\n                            body = (dx !== 0 || dy !== 0) && (this._tileFlags[mapIndex] & TileFlag.BODY) !== 0;\r\n                            warpY = this._warps[yWarps[mapIndex]];\r\n                            warpX = this._warps[xWarps[mapIndex]];\r\n                        } else {\r\n                            const {map, offset} = warp;\r\n                            LOCAL_OFF.copyFrom(offset).add(startX + dx * xDir, startY + dy * yDir);\r\n                            wallY = map._getFlag(LOCAL_OFF, farYFlag);\r\n                            wallX = map._getFlag(LOCAL_OFF, farXFlag);\r\n                            body = (dx !== 0 || dy !== 0) && map._getFlag(LOCAL_OFF, TileFlag.BODY);\r\n                            warpY = map._getWarp(LOCAL_OFF, yWarpDir);\r\n                            warpX = map._getWarp(LOCAL_OFF, xWarpDir);\r\n                        }\r\n\r\n                        if (wallX && wallY) {\r\n                            // this tile has both far walls\r\n                            // so we can't see beyond it and the whole range should be cut out of the wedge(s)\r\n                            newWedges = cutWedges(newWedges, slopeY - WALL_EPSILON, slopeX + WALL_EPSILON);\r\n                        } else if (wallX) {\r\n                            if (typeof warpY !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeY - WARP_EPSILON, slopeFar + WARP_EPSILON, warpY, nextWarpCount);\r\n                            }\r\n                            if (body) {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY + BODY_EPSILON, slopeX + WALL_EPSILON);\r\n                            } else {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeFar - WALL_EPSILON, slopeX + WALL_EPSILON);\r\n                            }\r\n                        } else if (wallY) {\r\n                            if (body) {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY - WALL_EPSILON, slopeX - BODY_EPSILON);\r\n                            } else {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY - WALL_EPSILON, slopeFar + WALL_EPSILON);\r\n                            }\r\n                            if (typeof warpX !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeFar - WARP_EPSILON, slopeX + WARP_EPSILON, warpX, nextWarpCount);\r\n                            }\r\n                        } else {\r\n                            if (typeof warpY !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeY - WARP_EPSILON, slopeFar + WARP_EPSILON, warpY, nextWarpCount);\r\n                            }\r\n                            if (body) {\r\n                                newWedges = cutWedges(newWedges,\r\n                                    slopeY + BODY_EPSILON, slopeX - BODY_EPSILON);\r\n                            }\r\n                            if (typeof warpX !== 'undefined') {\r\n                                newWedges = warpWedges(newWedges,\r\n                                    slopeFar - WARP_EPSILON, slopeX + WARP_EPSILON, warpX, nextWarpCount);\r\n                            }\r\n                        }\r\n\r\n                        if (newWedges.length !== 1) {\r\n                            wedges.splice(wedgeIndexInner, 1, ...newWedges);\r\n                        }\r\n                        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n                        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n                        wedgeIndexInner = wedgeIndexInner + newWedges.length;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","// tslint:disable:no-bitwise\r\n\r\nexport enum Direction {\r\n    NORTH = 0,\r\n    EAST  = 1,\r\n    SOUTH = 2,\r\n    WEST  = 3,\r\n}\r\n\r\nexport const DIRECTIONS = [\r\n    Direction.NORTH,\r\n    Direction.EAST,\r\n    Direction.SOUTH,\r\n    Direction.WEST,\r\n];\r\n\r\nconst DIRECTIONS_STR = [\r\n    'N',\r\n    'E',\r\n    'S',\r\n    'W',\r\n];\r\n\r\nexport function directionToString(dir: Direction) {\r\n    return DIRECTIONS_STR[dir];\r\n}\r\n\r\nexport function directionOpposite(dir: Direction) {\r\n    return ((dir + 2) & 3) as Direction;\r\n}\r\n","import * as geom from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\nexport enum DirectionFlags {\r\n    NONE  = 0,\r\n    NORTH = 1,\r\n    EAST  = 2,\r\n    SOUTH = 4,\r\n    WEST  = 8,\r\n    ALL   = 15,\r\n}\r\n\r\nexport function directionFlagsToString(flags: DirectionFlags) {\r\n    let ret = '[';\r\n    if ((flags & DirectionFlags.NORTH) !== 0) {\r\n        ret += 'N';\r\n    }\r\n    if ((flags & DirectionFlags.EAST) !== 0) {\r\n        ret += 'E';\r\n    }\r\n    if ((flags & DirectionFlags.SOUTH) !== 0) {\r\n        ret += 'S';\r\n    }\r\n    if ((flags & DirectionFlags.WEST) !== 0) {\r\n        ret += 'W';\r\n    }\r\n    return ret + ']';\r\n}\r\n\r\n// conversion\r\n\r\nexport function directionFlagsFromDirection(dir: geom.Direction) {\r\n    return (1 << dir) as DirectionFlags;\r\n}\r\n","import * as geom from '.';\r\n\r\nconst X_FROM_DIRECTION = [  0, 1, 0, -1 ];\r\nconst Y_FROM_DIRECTION = [ -1, 0, 1,  0 ];\r\n\r\nexport interface OffsetLike {\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\nexport class Offset implements OffsetLike {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor();\r\n    constructor(x: number, y: number);\r\n    constructor(x?: number, y?: number) {\r\n        if (typeof x === 'undefined') {\r\n            x = 0;\r\n        }\r\n        if (typeof y === 'undefined') {\r\n            y = 0;\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.x},${this.y})`;\r\n    }\r\n\r\n    equals(other: OffsetLike) {\r\n        return this.x === other.x && this.y === other.y;\r\n    }\r\n\r\n    // chebyshev: can move in any direction (diagonals are ok)\r\n    get magnitudeChebyshev() {\r\n        return Math.max(Math.abs(this.x), Math.abs(this.y));\r\n    }\r\n\r\n    // manhattan: can move only in cardinal directions (no diagonals)\r\n    get magnitudeManhattan(): number {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: OffsetLike) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        return this;\r\n    }\r\n\r\n    setFromDirection(dir: geom.Direction) {\r\n        this.x = X_FROM_DIRECTION[dir];\r\n        this.y = Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    add(x: number, y: number) {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n\r\n    addSize(size: geom.SizeLike) {\r\n        this.x += size.width;\r\n        this.y += size.height;\r\n        return this;\r\n    }\r\n\r\n    addOffset(off: OffsetLike) {\r\n        this.x += off.x;\r\n        this.y += off.y;\r\n        return this;\r\n    }\r\n\r\n    addDirection(dir: geom.Direction) {\r\n        this.x += X_FROM_DIRECTION[dir];\r\n        this.y += Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    addCardinalDirection(dir: geom.Direction) {\r\n        this.x += X_FROM_DIRECTION[dir];\r\n        this.y += Y_FROM_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    subtractOffset(off: OffsetLike) {\r\n        this.x -= off.x;\r\n        this.y -= off.y;\r\n        return this;\r\n    }\r\n\r\n    multiply(factor: number) {\r\n        this.x *= factor;\r\n        this.y *= factor;\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    // chebyshev: can move in any direction (diagonals are ok)\r\n    distanceChebyshev(other: OffsetLike) {\r\n        return this.subtractOffset(other).magnitudeChebyshev;\r\n    }\r\n\r\n    // manhattan: can move only in cardinal directions (no diagonals)\r\n    distanceManhattan(other?: OffsetLike): number {\r\n        return this.subtractOffset(other).magnitudeManhattan;\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport interface SizeLike {\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport class Size implements SizeLike {\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor();\r\n    constructor(width: number, height: number);\r\n    constructor(width?: number, height?: number) {\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.width}x${this.height})`;\r\n    }\r\n\r\n    equals(other: SizeLike) {\r\n        return this.width === other.width && this.height === other.height;\r\n    }\r\n\r\n    get empty() {\r\n        return this.width === 0 || this.height === 0;\r\n    }\r\n\r\n    get area() {\r\n        return this.width * this.height;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: SizeLike) {\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n        return this;\r\n    }\r\n\r\n    add(width: number, height: number) {\r\n        this.width += width;\r\n        this.height += height;\r\n        return this;\r\n    }\r\n\r\n    addOffset(off: geom.OffsetLike) {\r\n        this.width += off.x;\r\n        this.height += off.y;\r\n        return this;\r\n    }\r\n\r\n    multiply(factor: number) {\r\n        this.width *= factor;\r\n        this.height *= factor;\r\n        return this;\r\n    }\r\n\r\n    // TODO: rotate\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return off.x >= 0 && off.y >= 0 && off.x < this.width && off.y < this.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return off.y * this.width + off.x;\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport interface RectangleLike extends geom.SizeLike {\r\n    readonly westX: number;\r\n    readonly northY: number;\r\n}\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport class Rectangle implements RectangleLike, geom.SizeLike {\r\n    northWest: geom.Offset;\r\n    size: geom.Size;\r\n\r\n    constructor();\r\n    constructor(westX: number, northY: number, width: number, height: number);\r\n    constructor(westX?: number, northY?: number, width?: number, height?: number) {\r\n        if (typeof westX === 'undefined') {\r\n            westX = 0;\r\n        }\r\n        if (typeof northY === 'undefined') {\r\n            northY = 0;\r\n        }\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.northWest = new geom.Offset(westX, northY);\r\n        this.size = new geom.Size(width, height);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.westX},${this.northY} ${this.width}x${this.height})`;\r\n    }\r\n\r\n    equals(other: RectangleLike) {\r\n        return this.westX === other.westX && this.northY === other.northY && this.size.equals(other);\r\n    }\r\n\r\n    get northY() {\r\n        return this.northWest.y;\r\n    }\r\n\r\n    get southY() {\r\n        return this.northWest.y + this.size.height - 1;\r\n    }\r\n\r\n    get westX() {\r\n        return this.northWest.x;\r\n    }\r\n\r\n    get eastX() {\r\n        return this.northWest.x + this.size.width - 1;\r\n    }\r\n\r\n    get width() {\r\n        return this.size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this.size.height;\r\n    }\r\n\r\n    get empty() {\r\n        return this.size.empty;\r\n    }\r\n\r\n    get area() {\r\n        return this.size.area;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(westX: number, northY: number, width: number, height: number) {\r\n        this.northWest.set(westX, northY);\r\n        this.size.set(width, height);\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: RectangleLike) {\r\n        this.northWest.set(other.westX, other.northY);\r\n        this.size.set(other.width, other.height);\r\n        return this;\r\n    }\r\n\r\n    extendToInclude(off: geom.OffsetLike) {\r\n        const dx = off.x - this.westX;\r\n        if (dx < 0) {\r\n            this.size.width -= dx;\r\n            this.northWest.x = off.x;\r\n        } else if (dx >= this.size.width) {\r\n            this.size.width = dx + 1;\r\n        }\r\n        const dy = off.y - this.northWest.y;\r\n        if (dy < 0) {\r\n            this.size.height -= dy;\r\n            this.northWest.y = off.y;\r\n        } else if (dy >= this.size.height) {\r\n            this.size.height = dy + 1;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return this.size.containsOffset(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n\r\n    containsRectangle(other: RectangleLike) {\r\n        LOCAL_OFF.set(other.westX, other.northY).subtractOffset(this.northWest);\r\n        if (!this.size.containsOffset(LOCAL_OFF)) {\r\n            return false;\r\n        }\r\n        if (other.width === 0 && other.height === 0) {\r\n            return false;\r\n        }\r\n        return this.size.containsOffset(LOCAL_OFF.add(other.width - 1, other.height - 1));\r\n    }\r\n\r\n    overlapsRectangle(other: RectangleLike) {\r\n        return this.northY <= other.northY + other.height - 1\r\n            && this.southY >= other.northY\r\n            && this.westX <= other.westX + other.width - 1\r\n            && this.eastX >= other.westX\r\n            && !this.empty\r\n            && other.width !== 0 && other.height !== 0;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this.size.index(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport class Mask implements geom.SizeLike {\r\n    private readonly _size = new geom.Size();\r\n    private readonly _bits: boolean[];\r\n    // TODO consider Uint8Array for bits\r\n\r\n    constructor(size: geom.SizeLike, initialValue = false) {\r\n        this._size.copyFrom(size);\r\n        this._bits = new Array<boolean>(this._size.area).fill(initialValue);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        let ret = '';\r\n        const off = new geom.Offset();\r\n        for (let y = 0; y < this._size.height; y ++) {\r\n            for (let x = 0; x < this._size.width; x ++) {\r\n                off.set(x, y);\r\n                ret += this.get(off.set(x, y)) ? '☑' : '☐';\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    get width() {\r\n        return this._size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._size.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this._size.index(off);\r\n    }\r\n\r\n    getAt(index: number) {\r\n        return this._bits[index];\r\n    }\r\n\r\n    get(off: geom.OffsetLike) {\r\n        return this.getAt(this.index(off));\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean) {\r\n        this._bits[index] = value;\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean) {\r\n        return this.setAt(this.index(off), value);\r\n    }\r\n}\r\n","import * as geom from './geom';\r\nimport {FieldOfViewMap} from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\n/**\r\n * These flags determine whether a given tile has walls in any of the cardinal\r\n * directions, and whether there is a \"body\" in the tile.\r\n */\r\nexport enum TileFlag {\r\n    WALL_NORTH = 1 << geom.Direction.NORTH,\r\n    WALL_EAST  = 1 << geom.Direction.EAST,\r\n    WALL_WEST  = 1 << geom.Direction.WEST,\r\n    WALL_SOUTH = 1 << geom.Direction.SOUTH,\r\n    BODY       = 1 << geom.DIRECTIONS.length,\r\n}\r\n\r\nexport interface Warp {\r\n    map: FieldOfViewMap;\r\n    offset: geom.Offset;\r\n}\r\n\r\n/**\r\n * In the shadowcasting algorithm, each shadow is represented by a \"wedge\",\r\n * running from a \"low\" angle to a \"high\" angle.  To support warps, we also\r\n * track for each wedge a map (if we've gone through a warp), and an offset\r\n * (the location within the target map relative to the player's location in\r\n * the source map).\r\n */\r\nexport interface Wedge {\r\n    low: number;\r\n    high: number;\r\n    warp: Warp | undefined;\r\n    warpCount: number;\r\n}\r\n\r\n// istanbul ignore next\r\nfunction rangeToString(low: number, high: number) {\r\n    return `${low.toFixed(7)}-${high.toFixed(7)}`;\r\n}\r\n\r\n// istanbul ignore next\r\nfunction wedgeToString(wedge: Wedge) {\r\n    return `{${rangeToString(wedge.low, wedge.high)}`\r\n        + `${typeof wedge.warp !== 'undefined' ? `~${wedge.warp.map.id}` : ''}}`;\r\n}\r\n\r\n// istanbul ignore next\r\nfunction wedgesToString(wedges: Wedge[]) {\r\n    return `[${wedges.map(wedgeToString).join(', ')}]`;\r\n}\r\n\r\n/**\r\n * Bodies in this algorithm do not entirely fill their tiles.  This is\r\n * implemented by adjusting the angles of the shadows the bodies cast,\r\n * making the wedge very slightly narrower.  BODY_EPSILON represents the\r\n * amount of reduction on either side of the wedge.\r\n */\r\nexport const BODY_EPSILON = 0.00001;\r\n\r\n/**\r\n * Walls do fill the entire tile edge.  With infinite precision, there would be\r\n * no need to adjust the shadow cast by a wall.  But we're using floating point\r\n * math here, which means imprecision can creep in and cause angles not to line\r\n * up properly.  To fix that, we widen the wedges of the shadows cast by walls.\r\n * We must make sure not to widen them as much as we narrow the body shadows,\r\n * or else they might close the gap we want between a body and a wall.\r\n */\r\nexport const WALL_EPSILON = BODY_EPSILON / 4;\r\n\r\n/**\r\n * Warps also fill the entire tile edge.  But we don't extend warps as much as\r\n * walls, just in case a sliver of warp might make it past a wall on the other\r\n * side of the warp, at the edge of the warp range.\r\n */\r\nexport const WARP_EPSILON = WALL_EPSILON / 4;\r\n\r\nconst DEBUG_CUTWEDGE = false;\r\n\r\n/**\r\n * This function cuts a range of angles out of a wedge.\r\n */\r\nexport function cutWedge(wedge: Wedge, low: number, high: number): Wedge[] {\r\n    // istanbul ignore next\r\n    if (DEBUG_CUTWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`cut ${wedgeToString(wedge)} ${rangeToString(low, high)}`);\r\n    }\r\n    let ret: Wedge[];\r\n    if (low <= wedge.low) {\r\n        if (high >= wedge.high) {\r\n            // wedge is entirely occluded, remove it\r\n            ret = [];\r\n        } else if (high >= wedge.low) {\r\n            // low part of wedge is occluded, trim it\r\n            wedge.low = high;\r\n            ret = [wedge];\r\n        } else {\r\n            // cut doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else if (high >= wedge.high) {\r\n        if (low <= wedge.high) {\r\n            // high part of wedge is occluded, trim it\r\n            wedge.high = low;\r\n            ret = [wedge];\r\n        } else {\r\n            // cut doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else {\r\n        // middle part of wedge is occluded, split it\r\n        const nextWedge = {\r\n            low: high,\r\n            high: wedge.high,\r\n            warp: wedge.warp,\r\n            warpCount: wedge.warpCount,\r\n        };\r\n        wedge.high = low;\r\n        ret = [wedge, nextWedge];\r\n    }\r\n    // istanbul ignore next\r\n    if (DEBUG_CUTWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`--> ${wedgesToString(ret)}`);\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function cutWedges(wedges: Wedge[], low: number, high: number): Wedge[] {\r\n    const ret = new Array<Wedge>();\r\n    for (const wedge of wedges) {\r\n        ret.push(...cutWedge(wedge, low, high));\r\n    }\r\n    return ret;\r\n}\r\n\r\nconst DEBUG_WARPWEDGE = false;\r\n\r\nexport function warpWedge(wedge: Wedge, low: number, high: number, warp: Warp, warpCount: number): Wedge[] {\r\n    // istanbul ignore next\r\n    if (DEBUG_WARPWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`warp ${wedgeToString(wedge)} ${rangeToString(low, high)} ${warp.map.id}`);\r\n    }\r\n    let ret: Wedge[];\r\n    if (low <= wedge.low) {\r\n        if (high >= wedge.high) {\r\n            // wedge is entirely warped\r\n            wedge.warp = warp;\r\n            wedge.warpCount = warpCount;\r\n            ret = [wedge];\r\n        } else if (high >= wedge.low) {\r\n            // low part of wedge is warped, split it into two\r\n            const nextWedge = {\r\n                low: high,\r\n                high: wedge.high,\r\n                warp: wedge.warp,\r\n                warpCount: wedge.warpCount,\r\n            };\r\n            wedge.high = high;\r\n            wedge.warp = warp;\r\n            wedge.warpCount = warpCount;\r\n            ret = [wedge, nextWedge];\r\n        } else {\r\n            // warp doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else if (high >= wedge.high) {\r\n        if (low <= wedge.high) {\r\n            // high part of wedge is occluded, split it into two\r\n            const nextWedge = {\r\n                low,\r\n                high: wedge.high,\r\n                warp,\r\n                warpCount,\r\n            };\r\n            wedge.high = low;\r\n            ret = [wedge, nextWedge];\r\n        } else {\r\n            // warp doesn't reach the wedge\r\n            ret = [wedge];\r\n        }\r\n    } else {\r\n        // middle part of wedge is occluded, split it into three\r\n        const middleWedge = {\r\n            low,\r\n            high,\r\n            warp,\r\n            warpCount,\r\n        };\r\n        const highWedge = {\r\n            low: high,\r\n            high: wedge.high,\r\n            warp: wedge.warp,\r\n            warpCount: wedge.warpCount,\r\n        };\r\n        wedge.high = low;\r\n        ret = [wedge, middleWedge, highWedge];\r\n    }\r\n    // istanbul ignore next\r\n    if (DEBUG_WARPWEDGE) {\r\n        // tslint:disable-next-line:no-console\r\n        console.info(`--> ${wedgesToString(ret)}`);\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function warpWedges(wedges: Wedge[], low: number, high: number, warp: Warp, warpCount: number): Wedge[] {\r\n    const ret = new Array<Wedge>();\r\n    for (const wedge of wedges) {\r\n        ret.push(...warpWedge(wedge, low, high, warp, warpCount));\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function whichWedge(wedges: Wedge[], wedgeIndex: number, centerSlope: number) {\r\n    // determine the wedge containing centerSlope,\r\n    // or if there isn't one, then the one nearest to centerSlope\r\n    // or if two are very close, the one with the least warp count\r\n    // or if they both have the same warp count, the one with the lowest map id\r\n    let cur = wedgeIndex;\r\n    // skip to the next wedge while it starts before before centerSlope\r\n    while (cur < wedges.length - 1 && wedges[cur + 1].low < centerSlope - WALL_EPSILON * 2) {\r\n        cur ++;\r\n    }\r\n    if (cur >= wedges.length - 1 || wedges[cur].high > centerSlope + WALL_EPSILON * 2) {\r\n        // the current wedge contains centerSlope or is past it, so this is the closest\r\n        return cur;\r\n    } else if (wedges[cur].high < centerSlope - WALL_EPSILON * 2) {\r\n        // the current wedge isn't very close to centerSlope\r\n        // choose the closest one\r\n        if (Math.abs(wedges[cur].high - centerSlope) < Math.abs(wedges[cur + 1].low - centerSlope)) {\r\n            return cur;\r\n        } else {\r\n            return cur + 1;\r\n        }\r\n    } else {\r\n        // the current wedge is very close to centerSlope\r\n        if (wedges[cur + 1].low < centerSlope + WALL_EPSILON * 2) {\r\n            // the next wedge is very close to centerSlope too\r\n            // compare warp counts\r\n            if (wedges[cur].warpCount < wedges[cur + 1].warpCount) {\r\n                return cur;\r\n            } else if (wedges[cur].warpCount > wedges[cur + 1].warpCount) {\r\n                return cur + 1;\r\n            } else {\r\n                // same warp count\r\n                // compare map ids\r\n                if (wedges[cur].warp.map.id < wedges[cur + 1].warp.map.id) {\r\n                    return cur;\r\n                } else {\r\n                    return cur + 1;\r\n                }\r\n            }\r\n        } else {\r\n            // the next wedge isn't very close to centerSlope, use the current one\r\n            return cur;\r\n        }\r\n    }\r\n}\r\n","import * as geom from './geom';\r\nimport {FieldOfViewMap} from '.';\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport interface Warp {\r\n    map: FieldOfViewMap;\r\n    offset: geom.Offset;\r\n}\r\n\r\nimport {Offset} from './geom';\r\n\r\nexport class WarpRect implements geom.RectangleLike {\r\n    private readonly _rectangle = new geom.Rectangle();\r\n    private readonly _mask: geom.Mask;\r\n    private readonly _warps: Warp[];\r\n\r\n    constructor(rect: geom.RectangleLike, initialValue = false) {\r\n        this._rectangle.copyFrom(rect);\r\n        this._mask = new geom.Mask(rect, initialValue);\r\n        this._warps = new Array<Warp>(this._rectangle.area);\r\n    }\r\n\r\n    private _warpsToString() {\r\n        let ret = '';\r\n        const off = new geom.Offset();\r\n        for (let y = 0; y < this._rectangle.height; y ++) {\r\n            for (let x = 0; x < this._rectangle.width; x ++) {\r\n                off.set(x, y).addOffset(this._rectangle.northWest);\r\n                if (this.getMask(off.x, off.y)) {\r\n                    const warp = this._getWarp(off);\r\n                    if (typeof warp === 'undefined') {\r\n                        ret += '-';\r\n                    } else {\r\n                        ret += warp.map.id[0];\r\n                    }\r\n                } else {\r\n                    ret += '.';\r\n                }\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    private _getWarpAt(index: number) {\r\n        return this._warps[index];\r\n    }\r\n\r\n    private _getWarp(off: geom.OffsetLike) {\r\n        return this._warps[this._rectangle.index(off)];\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `${this._rectangle.northWest}\\n${this._warpsToString()}`;\r\n    }\r\n\r\n    get westX() {\r\n        return this._rectangle.westX;\r\n    }\r\n\r\n    get northY() {\r\n        return this._rectangle.northY;\r\n    }\r\n\r\n    get width() {\r\n        return this._rectangle.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._rectangle.height;\r\n    }\r\n\r\n    index(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y).subtractOffset(this._rectangle.northWest);\r\n        return this._mask.index(LOCAL_OFF);\r\n    }\r\n\r\n    getMaskAt(index: number) {\r\n        return this._mask.getAt(index);\r\n    }\r\n\r\n    getMask(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        if (!this._rectangle.containsOffset(LOCAL_OFF)) {\r\n            return false;\r\n        }\r\n        return this._mask.getAt(this._rectangle.index(LOCAL_OFF));\r\n    }\r\n\r\n    getMapAt(index: number) {\r\n        const warp = this._getWarpAt(index);\r\n        if (warp) {\r\n            return warp.map;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getMap(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const warp = this._getWarp(LOCAL_OFF);\r\n        if (warp) {\r\n            return warp.map;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getOffsetAt(index: number): Offset {\r\n        const warp = this._getWarpAt(index);\r\n        if (warp) {\r\n            return warp.offset;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getOffset(x: number, y: number): Offset {\r\n        LOCAL_OFF.set(x, y);\r\n        const warp = this._getWarp(LOCAL_OFF);\r\n        if (warp) {\r\n            return warp.offset;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean, warp: Warp | undefined) {\r\n        this._mask.setAt(index, value);\r\n        this._warps[index] = warp;\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean, warp: Warp | undefined) {\r\n        this._mask.setAt(this._rectangle.index(off), value);\r\n        this._warps[this._rectangle.index(off)] = warp;\r\n        return this;\r\n    }\r\n}\r\n"],"sourceRoot":""}